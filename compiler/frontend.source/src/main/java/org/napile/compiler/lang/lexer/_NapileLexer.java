/* The following code was generated by JFlex 1.4.3 on 30.01.13 22:44 */

 package org.napile.compiler.lang.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30.01.13 22:44 from the specification file
 * <tt>I:/github.com/napile-lang/napile.compiler/compiler/frontend.source/src/main/java/org/napile/compiler/lang/lexer/_NapileLexer.flex</tt>
 */
class _NapileLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int INJECTION_BLOCK = 10;
  public static final int DOC_COMMENT = 6;
  public static final int INJECTION = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\1\0\1\3\23\0\1\3\1\54\1\21\1\56"+
    "\1\0\1\66\1\63\1\17\1\71\1\72\1\23\1\61\1\75\1\15"+
    "\1\13\1\6\1\10\11\1\1\73\1\74\1\55\1\62\1\57\1\60"+
    "\1\76\1\2\1\12\2\2\1\14\1\2\11\4\1\16\7\4\1\11"+
    "\2\4\1\67\1\20\1\70\1\65\1\4\1\0\1\36\1\47\1\27"+
    "\1\53\1\34\1\52\1\40\1\45\1\33\1\4\1\37\1\46\1\43"+
    "\1\31\1\30\1\35\1\4\1\41\1\50\1\32\1\22\1\51\1\44"+
    "\1\11\1\42\1\4\1\25\1\64\1\26\1\24\53\0\1\4\12\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0"+
    "\162\4\4\0\14\4\16\0\5\4\11\0\1\4\213\0\1\4\13\0"+
    "\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0"+
    "\46\4\1\0\5\4\4\0\202\4\10\0\105\4\1\0\46\4\2\0"+
    "\2\4\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4\110\0"+
    "\33\4\5\0\3\4\56\0\32\4\5\0\13\4\25\0\12\5\4\0"+
    "\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\5"+
    "\3\4\2\0\1\4\20\0\1\4\1\0\36\4\35\0\3\4\60\0"+
    "\46\4\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0\1\4\7\0"+
    "\12\4\4\0\12\5\25\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\1\4\3\0\4\4\3\0\1\4\36\0\2\4\1\0"+
    "\3\4\4\0\12\5\2\4\23\0\6\4\4\0\2\4\2\0\26\4"+
    "\1\0\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0\4\4"+
    "\1\0\1\4\7\0\12\5\2\0\3\4\20\0\11\4\1\0\3\4"+
    "\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4"+
    "\22\0\1\4\17\0\2\4\4\0\12\5\25\0\10\4\2\0\2\4"+
    "\2\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4"+
    "\36\0\2\4\1\0\3\4\4\0\12\5\1\0\1\4\21\0\1\4"+
    "\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4"+
    "\1\0\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0\3\4"+
    "\55\0\11\5\25\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4"+
    "\1\0\5\4\46\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4"+
    "\1\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\20\4\46\0\2\4\4\0\12\5\25\0\22\4\3\0\30\4"+
    "\1\0\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0\2\4"+
    "\14\0\7\4\11\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4"+
    "\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4"+
    "\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4"+
    "\11\0\1\4\2\0\5\4\1\0\1\4\11\0\12\5\2\0\2\4"+
    "\42\0\1\4\37\0\12\5\26\0\10\4\1\0\42\4\35\0\4\4"+
    "\164\0\42\4\1\0\5\4\1\0\2\4\25\0\12\5\6\0\6\4"+
    "\112\0\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0\122\4"+
    "\6\0\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0\7\4"+
    "\1\0\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0\4\4"+
    "\2\0\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4"+
    "\1\0\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0\37\4"+
    "\1\0\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0\23\4"+
    "\16\0\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4"+
    "\5\0\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4"+
    "\16\0\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0\1\4"+
    "\3\0\12\5\46\0\12\5\6\0\130\4\10\0\51\4\127\0\35\4"+
    "\51\0\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0"+
    "\132\4\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0"+
    "\10\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0"+
    "\65\4\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0"+
    "\4\4\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0"+
    "\1\4\15\0\1\4\202\0\1\4\4\0\1\4\2\0\12\4\1\0"+
    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4\u0ebb\0"+
    "\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0\3\4\1\0"+
    "\132\4\1\0\4\4\5\0\50\4\4\0\136\4\21\0\30\4\70\0"+
    "\20\4\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0"+
    "\u012e\4\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4\1\0"+
    "\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0"+
    "\14\4\164\0\5\4\1\0\207\4\23\0\12\5\7\0\32\4\6\0"+
    "\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\17\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\4\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\0\1\47\1\50\1\51\1\52\1\46"+
    "\2\2\1\46\1\53\1\54\1\55\1\56\2\10\2\11"+
    "\1\57\5\3\1\60\1\61\1\62\3\3\1\63\11\3"+
    "\1\64\1\0\1\65\1\66\1\0\1\67\1\0\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\46\1\106\5\0"+
    "\4\3\1\107\5\3\1\110\7\3\1\111\1\112\1\113"+
    "\1\3\1\114\1\115\1\116\1\117\1\120\1\121\1\46"+
    "\1\0\2\3\1\122\1\123\1\124\1\3\1\125\3\3"+
    "\1\126\2\3\1\127\3\3\1\130\1\3\1\131\1\132"+
    "\3\3\1\133\1\134\1\135\1\136\1\137\2\3\1\140"+
    "\1\141\1\3\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\77\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\77\0\77\0\77\0\u03f0\0\u042f\0\u046e\0\u04ad"+
    "\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\77\0\u081f\0\77"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\u09d8"+
    "\0\u0a17\0\u0a56\0\77\0\77\0\77\0\77\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\77\0\77\0\u0bd0\0\u0c0f\0\u0c4e"+
    "\0\u0c8d\0\77\0\77\0\77\0\77\0\77\0\u0ccc\0\u0d0b"+
    "\0\77\0\77\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u01b9"+
    "\0\u01b9\0\u01b9\0\u0e85\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u01b9"+
    "\0\u11b8\0\77\0\u11f7\0\u1236\0\77\0\u1275\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\u12b4\0\77\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u01b9"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\77\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u01b9\0\u01b9\0\u01b9"+
    "\0\u181e\0\u185d\0\u185d\0\77\0\77\0\77\0\77\0\u189c"+
    "\0\u12b4\0\u18db\0\u191a\0\u01b9\0\u01b9\0\u01b9\0\u1959\0\u01b9"+
    "\0\u1998\0\u19d7\0\u1a16\0\u01b9\0\u1a55\0\u1a94\0\u01b9\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\77\0\u1b90\0\u01b9\0\u01b9\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u1c8c\0\u1ccb"+
    "\0\u01b9\0\u01b9\0\u1d0a\0\u01b9\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\11\1\7\1\13\1\12"+
    "\1\14\2\11\1\15\1\11\1\16\1\11\1\17\1\7"+
    "\1\20\1\11\1\21\1\22\1\23\1\24\1\25\1\11"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\11\1\34"+
    "\1\11\1\35\1\36\2\11\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\77\0\6\67\1\70\14\67"+
    "\1\71\77\67\1\72\77\67\1\73\1\74\75\67\1\75"+
    "\1\76\50\67\1\0\1\10\6\0\1\10\2\0\1\77"+
    "\1\100\17\0\1\100\43\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\25\11\26\0\1\12\3\0\1\12\71\0\1\101\1\0"+
    "\1\101\1\0\1\102\2\0\2\101\1\0\1\101\1\0"+
    "\1\101\3\0\1\101\1\103\1\104\2\0\25\101\6\0"+
    "\1\105\15\0\1\106\6\0\1\106\1\107\1\110\1\77"+
    "\1\100\17\0\1\100\12\0\1\110\30\0\1\111\6\0"+
    "\1\111\2\0\1\112\100\0\1\113\41\0\1\114\2\0"+
    "\1\115\14\0\7\17\1\0\7\17\1\116\1\117\56\17"+
    "\7\20\1\0\10\20\1\120\1\121\55\20\62\0\1\122"+
    "\15\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\1\11\1\123\15\11"+
    "\1\124\5\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\125\4\0\25\11"+
    "\24\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\12\11\1\126\3\11"+
    "\1\127\6\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\2\11"+
    "\1\130\16\11\1\131\1\11\1\132\1\11\24\0\2\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\17\11\1\133\5\11\24\0\2\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\7\11\1\134\15\11\24\0\2\11"+
    "\1\0\2\11\2\0\3\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\2\11\1\135\16\11\1\136\3\11"+
    "\24\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\5\11\1\137\17\11"+
    "\24\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\5\11\1\140\1\11"+
    "\1\141\15\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\16\11"+
    "\1\142\6\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\12\11"+
    "\1\143\12\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\144\4\0\25\11"+
    "\24\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\7\11\1\145\15\11"+
    "\24\0\2\11\1\0\2\11\2\0\3\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\4\0\1\11\1\146\5\11"+
    "\1\147\15\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\1\11"+
    "\1\150\23\11\56\0\1\151\26\0\1\152\71\0\1\153"+
    "\1\154\3\0\1\155\72\0\1\156\3\0\1\157\75\0"+
    "\1\160\1\161\76\0\1\162\76\0\1\163\1\164\75\0"+
    "\1\165\1\0\1\166\74\0\1\167\76\0\1\170\37\0"+
    "\1\171\61\0\1\172\76\0\1\173\71\0\1\111\6\0"+
    "\1\111\2\0\1\174\64\0\1\175\6\0\1\175\4\0"+
    "\1\175\43\0\1\175\16\0\2\101\1\0\2\101\1\176"+
    "\1\0\3\101\1\0\1\101\1\0\1\101\3\0\1\101"+
    "\4\0\25\101\23\0\7\102\1\0\67\102\23\0\1\177"+
    "\54\0\1\106\6\0\1\106\2\0\1\200\1\100\17\0"+
    "\1\100\43\0\2\107\5\0\1\107\1\0\1\107\1\201"+
    "\1\107\1\0\1\202\10\0\1\107\4\0\1\107\1\202"+
    "\1\107\10\0\1\107\2\0\2\107\24\0\1\110\6\0"+
    "\1\110\2\0\1\203\64\0\1\111\6\0\1\111\3\0"+
    "\1\100\17\0\1\100\42\0\7\17\1\0\67\17\7\20"+
    "\1\0\67\20\1\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\2\11"+
    "\1\204\22\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\7\11"+
    "\1\205\15\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\17\11"+
    "\1\206\5\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\207\4\0\13\11"+
    "\1\210\11\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\4\11"+
    "\1\211\5\11\1\212\12\11\24\0\2\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\4\0\21\11\1\213\3\11\24\0\2\11\1\0\2\11"+
    "\2\0\3\11\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\4\0\1\214\24\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\1\11\1\215\23\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\25\11\4\0\1\216\17\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\3\11\1\217\21\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\3\11\1\220\21\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\1\221\24\11\24\0\2\11\1\0\2\11\2\0\3\11"+
    "\1\0\1\11\1\0\1\11\3\0\1\11\4\0\4\11"+
    "\1\222\1\223\17\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\5\11\1\224\17\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\6\11\1\225\16\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\12\11\1\226\4\11\1\227\5\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\12\11\1\230\12\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\17\11\1\231\5\11\54\0\1\232\16\0"+
    "\1\233\110\0\1\234\71\0\1\235\100\0\1\236\20\0"+
    "\1\175\6\0\1\175\74\0\1\237\71\0\1\111\6\0"+
    "\1\111\67\0\2\240\5\0\1\240\1\0\1\240\1\174"+
    "\1\240\12\0\1\240\4\0\1\240\1\0\1\240\10\0"+
    "\1\240\2\0\2\240\24\0\1\175\6\0\1\175\4\0"+
    "\1\241\43\0\1\241\30\0\1\174\64\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\3\11\1\242\21\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\21\11\1\243\3\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\17\11\1\244\5\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\5\11\1\245\17\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\21\11\1\246\3\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\1\11\1\247\23\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\5\11\1\250\17\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\10\11\1\251\14\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\2\11\1\252\22\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\253\4\0\25\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\16\11\1\254\6\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\12\11\1\255\12\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\17\11\1\256\5\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\2\11\1\257\22\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\7\11\1\260\15\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\5\11\1\261\17\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\21\11\1\262\3\11\24\0\2\263\1\0\2\263\2\0"+
    "\3\263\1\0\1\263\1\0\1\263\3\0\1\263\4\0"+
    "\25\263\24\0\2\240\5\0\1\240\1\0\1\240\1\0"+
    "\1\240\1\0\1\202\10\0\1\240\4\0\1\240\1\202"+
    "\1\240\10\0\1\240\2\0\2\240\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\4\11\1\264\20\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\21\11\1\265\3\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\15\11\1\266\7\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\7\11\1\267\15\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\13\11\1\270\11\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\12\11\1\271\12\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\1\11\1\272\23\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\5\11\1\273\17\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\10\11\1\274\14\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\12\11\1\275\12\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\5\11\1\276\17\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\2\11\1\277\22\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\11\11\1\300\13\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\14\11\1\301\10\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\2\11\1\302\22\11\24\0\2\11\1\0"+
    "\2\11\2\0\3\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\303\4\0\25\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\5\11\1\304\17\11\24\0\2\11\1\0\2\11\2\0"+
    "\3\11\1\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\5\11\1\305\17\11\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7497];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\4\0\1\11\12\1\3\11\21\1\1\11"+
    "\1\1\1\11\6\1\11\11\3\1\4\11\1\0\1\1"+
    "\1\0\2\1\2\11\4\1\5\11\2\1\2\11\26\1"+
    "\1\0\1\11\1\1\1\0\1\11\1\0\16\11\1\1"+
    "\1\11\5\0\12\1\1\11\15\1\4\11\1\1\1\0"+
    "\21\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[197];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int state;

        public State(int state) {
            this.state = state;
        }

        @Override
        public String toString() {
            return "yystate = " + state ;
        }
    }

    private final Stack<State> states = new Stack<State>();

    private int commentStart;
    private int commentDepth;

	private int injectionBraceCount;
	private int injectionStart;
	private int injectionStart2;
	private boolean isInjectionBlock;

    private void pushState(int state) {
        states.push(new State(yystate()));
        yybegin(state);
    }

    private void popState()
    {
        State state = states.pop();
        yybegin(state.state);
    }


  _NapileLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _NapileLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1324) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return NapileTokens.MUL       ;
          }
        case 100: break;
        case 20: 
          { return NapileTokens.EQ        ;
          }
        case 101: break;
        case 82: 
          { return NapileTokens.NULL_KEYWORD ;
          }
        case 102: break;
        case 32: 
          { return NapileTokens.AT        ;
          }
        case 103: break;
        case 57: 
          { return NapileTokens.PLUSPLUS  ;
          }
        case 104: break;
        case 83: 
          { return NapileTokens.TRUE_KEYWORD ;
          }
        case 105: break;
        case 39: 
          { return NapileTokens.EOL_COMMENT;
          }
        case 106: break;
        case 27: 
          { return NapileTokens.LPAR      ;
          }
        case 107: break;
        case 30: 
          { return NapileTokens.SEMICOLON ;
          }
        case 108: break;
        case 2: 
          { return NapileTokens.INTEGER_LITERAL;
          }
        case 109: break;
        case 38: 
          { return NapileTokens.FLOAT_LITERAL;
          }
        case 110: break;
        case 37: 
          { if(injectionBraceCount > 0)
			injectionBraceCount --;
		else
		{
			popState();
			yypushback(1);
			zzStartRead = injectionStart2;
			return NapileTokens.INJECTION_BLOCK;
		}
          }
        case 111: break;
        case 87: 
          { return NapileTokens.WHEN_KEYWORD ;
          }
        case 112: break;
        case 7: 
          { return NapileTokens.MINUS     ;
          }
        case 113: break;
        case 47: 
          { return NapileTokens.MULTEQ    ;
          }
        case 114: break;
        case 12: 
          { return NapileTokens.LBRACE    ;
          }
        case 115: break;
        case 72: 
          { return NapileTokens.AS_SAFE;
          }
        case 116: break;
        case 73: 
          { return NapileTokens.VAR_KEYWORD ;
          }
        case 117: break;
        case 80: 
          { return NapileTokens.IDE_TEMPLATE_END    ;
          }
        case 118: break;
        case 54: 
          { return NapileTokens.LTLT      ;
          }
        case 119: break;
        case 42: 
          { return NapileTokens.DIVEQ     ;
          }
        case 120: break;
        case 3: 
          { return NapileTokens.IDENTIFIER;
          }
        case 121: break;
        case 78: 
          { return NapileTokens.LTLTEQ    ;
          }
        case 122: break;
        case 70: 
          { pushState(INJECTION);

	injectionStart = getTokenStart();

	return NapileTokens.INJECTION_START;
          }
        case 123: break;
        case 8: 
          { return NapileTokens.CHARACTER_LITERAL;
          }
        case 124: break;
        case 71: 
          { return NapileTokens.TRY_KEYWORD ;
          }
        case 125: break;
        case 59: 
          { return NapileTokens.EQEQ      ;
          }
        case 126: break;
        case 95: 
          { return NapileTokens.FALSE_KEYWORD ;
          }
        case 127: break;
        case 60: 
          { return NapileTokens.ANDEQ     ;
          }
        case 128: break;
        case 35: 
          { if(isInjectionBlock)
		{
			isInjectionBlock = false;
			popState();
			return NapileTokens.RBRACE;
		}
          }
        case 129: break;
        case 19: 
          { return NapileTokens.PLUS      ;
          }
        case 130: break;
        case 16: 
          { return NapileTokens.HASH      ;
          }
        case 131: break;
        case 58: 
          { return NapileTokens.PLUSEQ    ;
          }
        case 132: break;
        case 31: 
          { return NapileTokens.COMMA     ;
          }
        case 133: break;
        case 17: 
          { return NapileTokens.GT        ;
          }
        case 134: break;
        case 9: 
          { return NapileTokens.STRING_LITERAL;
          }
        case 135: break;
        case 28: 
          { return NapileTokens.RPAR      ;
          }
        case 136: break;
        case 93: 
          { return NapileTokens.BREAK_KEYWORD ;
          }
        case 137: break;
        case 99: 
          { return NapileTokens.CONTINUE_KEYWORD ;
          }
        case 138: break;
        case 15: 
          { return NapileTokens.LT        ;
          }
        case 139: break;
        case 64: 
          { return NapileTokens.XOREQ     ;
          }
        case 140: break;
        case 96: 
          { return NapileTokens.ANONYM_KEYWORD ;
          }
        case 141: break;
        case 29: 
          { return NapileTokens.COLON     ;
          }
        case 142: break;
        case 50: 
          { return NapileTokens.IF_KEYWORD ;
          }
        case 143: break;
        case 45: 
          { return NapileTokens.ARROW     ;
          }
        case 144: break;
        case 25: 
          { return NapileTokens.LBRACKET  ;
          }
        case 145: break;
        case 41: 
          { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 146: break;
        case 76: 
          { return NapileTokens.NOT_IN;
          }
        case 147: break;
        case 36: 
          { injectionBraceCount ++;
          }
        case 148: break;
        case 22: 
          { return NapileTokens.OR        ;
          }
        case 149: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 150: break;
        case 13: 
          { return NapileTokens.RBRACE    ;
          }
        case 151: break;
        case 61: 
          { return NapileTokens.ANDAND    ;
          }
        case 152: break;
        case 98: 
          { return NapileTokens.PACKAGE_KEYWORD ;
          }
        case 153: break;
        case 11: 
          { return NapileTokens.TILDE     ;
          }
        case 154: break;
        case 67: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return NapileTokens.BLOCK_COMMENT;
        }
          }
        case 155: break;
        case 55: 
          { return NapileTokens.LTEQ      ;
          }
        case 156: break;
        case 46: 
          { return NapileTokens.MINUSEQ   ;
          }
        case 157: break;
        case 79: 
          { return NapileTokens.IDE_TEMPLATE_START    ;
          }
        case 158: break;
        case 84: 
          { return NapileTokens.THIS_KEYWORD ;
          }
        case 159: break;
        case 49: 
          { return NapileTokens.IS_KEYWORD ;
          }
        case 160: break;
        case 68: 
          { popState();
		zzStartRead = commentStart;
		return NapileTokens.DOC_COMMENT;
          }
        case 161: break;
        case 44: 
          { return NapileTokens.MINUSMINUS;
          }
        case 162: break;
        case 34: 
          { if(!isInjectionBlock)
		{
			isInjectionBlock = true;

			pushState(INJECTION_BLOCK);

			injectionStart2 = getTokenStart() + 1;

			return NapileTokens.LBRACE;
		}
          }
        case 163: break;
        case 88: 
          { yypushback(3); return NapileTokens.EXCL;
          }
        case 164: break;
        case 40: 
          { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 165: break;
        case 56: 
          { return NapileTokens.GTEQ      ;
          }
        case 166: break;
        case 5: 
          { return NapileTokens.DIV       ;
          }
        case 167: break;
        case 48: 
          { return NapileTokens.IN_KEYWORD ;
          }
        case 168: break;
        case 62: 
          { return NapileTokens.OREQ      ;
          }
        case 169: break;
        case 14: 
          { return NapileTokens.EXCL      ;
          }
        case 170: break;
        case 77: 
          { return NapileTokens.NOT_IS;
          }
        case 171: break;
        case 53: 
          { return NapileTokens.EXCLEQ    ;
          }
        case 172: break;
        case 92: 
          { return NapileTokens.WHILE_KEYWORD ;
          }
        case 173: break;
        case 85: 
          { return NapileTokens.ELSE_KEYWORD ;
          }
        case 174: break;
        case 21: 
          { return NapileTokens.AND       ;
          }
        case 175: break;
        case 18: 
          { return NapileTokens.QUEST     ;
          }
        case 176: break;
        case 24: 
          { return NapileTokens.PERC      ;
          }
        case 177: break;
        case 51: 
          { return NapileTokens.AS_KEYWORD ;
          }
        case 178: break;
        case 89: 
          { return NapileTokens.CLASS_KEYWORD ;
          }
        case 179: break;
        case 65: 
          { return NapileTokens.PERCEQ    ;
          }
        case 180: break;
        case 97: 
          { return NapileTokens.RETURN_KEYWORD ;
          }
        case 181: break;
        case 91: 
          { return NapileTokens.MACRO_KEYWORD ;
          }
        case 182: break;
        case 66: 
          { commentDepth++;
          }
        case 183: break;
        case 90: 
          { return NapileTokens.THROW_KEYWORD ;
          }
        case 184: break;
        case 94: 
          { return NapileTokens.SUPER_KEYWORD ;
          }
        case 185: break;
        case 74: 
          { return NapileTokens.VAL_KEYWORD ;
          }
        case 186: break;
        case 52: 
          { return NapileTokens.DO_KEYWORD ;
          }
        case 187: break;
        case 26: 
          { return NapileTokens.RBRACKET  ;
          }
        case 188: break;
        case 23: 
          { return NapileTokens.XOR       ;
          }
        case 189: break;
        case 63: 
          { return NapileTokens.OROR      ;
          }
        case 190: break;
        case 69: 
          { yypushback(2); return NapileTokens.INTEGER_LITERAL;
          }
        case 191: break;
        case 43: 
          { return NapileTokens.RANGE     ;
          }
        case 192: break;
        case 86: 
          { return NapileTokens.METH_KEYWORD ;
          }
        case 193: break;
        case 4: 
          { return NapileTokens.WHITE_SPACE;
          }
        case 194: break;
        case 81: 
          { return NapileTokens.BLOCK_COMMENT;
          }
        case 195: break;
        case 6: 
          { return NapileTokens.DOT       ;
          }
        case 196: break;
        case 75: 
          { return NapileTokens.FOR_KEYWORD ;
          }
        case 197: break;
        case 33: 
          { 
          }
        case 198: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return NapileTokens.BLOCK_COMMENT;
            }
            case 198: break;
            case INJECTION_BLOCK: {
              popState();
		zzStartRead = injectionStart2;
		return NapileTokens.INJECTION_BLOCK;
            }
            case 199: break;
            case DOC_COMMENT: {
              popState();
        zzStartRead = commentStart;
        return NapileTokens.DOC_COMMENT;
            }
            case 200: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

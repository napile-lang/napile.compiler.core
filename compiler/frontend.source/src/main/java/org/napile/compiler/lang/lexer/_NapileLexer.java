/* The following code was generated by JFlex 1.4.3 on 05.11.12 11:48 */

package org.napile.compiler.lang.lexer;

import java.util.Stack;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05.11.12 11:48 from the specification file
 * <tt>F:/github.com/napile-lang/napile.compiler/compiler/frontend.source/src/main/java/org/napile/compiler/lang/lexer/_NapileLexer.flex</tt>
 */
class _NapileLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int RAW_STRING = 4;
  public static final int INJECTION_BLOCK = 14;
  public static final int SHORT_TEMPLATE_ENTRY = 6;
  public static final int INJECTION = 12;
  public static final int LONG_TEMPLATE_ENTRY = 16;
  public static final int STRING = 2;
  public static final int DOC_COMMENT = 10;
  public static final int YYINITIAL = 0;
  public static final int BLOCK_COMMENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5,  5,  6,  6, 
     7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\1\0\1\3\23\0\1\3\1\55\1\23\1\57"+
    "\1\10\1\66\1\64\1\21\1\71\1\72\1\33\1\62\1\75\1\17"+
    "\1\15\1\11\1\12\11\1\1\73\1\74\1\56\1\63\1\60\1\61"+
    "\1\76\1\2\1\14\2\2\1\16\1\2\11\4\1\20\7\4\1\13"+
    "\2\4\1\67\1\22\1\70\1\0\1\4\1\6\1\41\1\51\1\34"+
    "\1\54\1\37\1\53\1\43\1\30\1\31\1\4\1\42\1\50\1\46"+
    "\1\36\1\35\1\40\1\4\1\44\1\32\1\27\1\24\1\52\1\47"+
    "\1\13\1\45\1\4\1\25\1\65\1\26\54\0\1\4\12\0\1\4"+
    "\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u013f\4\31\0\162\4"+
    "\4\0\14\4\16\0\5\4\11\0\1\4\213\0\1\4\13\0\1\4"+
    "\1\0\3\4\1\0\1\4\1\0\24\4\1\0\54\4\1\0\46\4"+
    "\1\0\5\4\4\0\202\4\10\0\105\4\1\0\46\4\2\0\2\4"+
    "\6\0\20\4\41\0\46\4\2\0\1\4\7\0\47\4\110\0\33\4"+
    "\5\0\3\4\56\0\32\4\5\0\13\4\25\0\12\5\4\0\2\4"+
    "\1\0\143\4\1\0\1\4\17\0\2\4\7\0\2\4\12\5\3\4"+
    "\2\0\1\4\20\0\1\4\1\0\36\4\35\0\3\4\60\0\46\4"+
    "\13\0\1\4\u0152\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4"+
    "\4\0\12\5\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4"+
    "\1\0\1\4\3\0\4\4\3\0\1\4\36\0\2\4\1\0\3\4"+
    "\4\0\12\5\2\4\23\0\6\4\4\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\2\4\1\0\2\4\37\0\4\4\1\0"+
    "\1\4\7\0\12\5\2\0\3\4\20\0\11\4\1\0\3\4\1\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\22\0"+
    "\1\4\17\0\2\4\4\0\12\5\25\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\2\4\1\0\5\4\3\0\1\4\36\0"+
    "\2\4\1\0\3\4\4\0\12\5\1\0\1\4\21\0\1\4\1\0"+
    "\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0"+
    "\2\4\3\0\2\4\3\0\3\4\3\0\10\4\1\0\3\4\55\0"+
    "\11\5\25\0\10\4\1\0\3\4\1\0\27\4\1\0\12\4\1\0"+
    "\5\4\46\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0"+
    "\2\4\4\0\12\5\25\0\10\4\1\0\3\4\1\0\27\4\1\0"+
    "\20\4\46\0\2\4\4\0\12\5\25\0\22\4\3\0\30\4\1\0"+
    "\11\4\1\0\1\4\2\0\7\4\72\0\60\4\1\0\2\4\14\0"+
    "\7\4\11\0\12\5\47\0\2\4\1\0\1\4\2\0\2\4\1\0"+
    "\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0\3\4\1\0"+
    "\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\0\2\4\11\0"+
    "\1\4\2\0\5\4\1\0\1\4\11\0\12\5\2\0\2\4\42\0"+
    "\1\4\37\0\12\5\26\0\10\4\1\0\42\4\35\0\4\4\164\0"+
    "\42\4\1\0\5\4\1\0\2\4\25\0\12\5\6\0\6\4\112\0"+
    "\46\4\12\0\51\4\7\0\132\4\5\0\104\4\5\0\122\4\6\0"+
    "\7\4\1\0\77\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0"+
    "\1\4\1\0\4\4\2\0\47\4\1\0\1\4\1\0\4\4\2\0"+
    "\37\4\1\0\1\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\7\4\1\0\7\4\1\0\27\4\1\0\37\4\1\0"+
    "\1\4\1\0\4\4\2\0\7\4\1\0\47\4\1\0\23\4\16\0"+
    "\11\5\56\0\125\4\14\0\u026c\4\2\0\10\4\12\0\32\4\5\0"+
    "\113\4\25\0\15\4\1\0\4\4\16\0\22\4\16\0\22\4\16\0"+
    "\15\4\1\0\3\4\17\0\64\4\43\0\1\4\4\0\1\4\3\0"+
    "\12\5\46\0\12\5\6\0\130\4\10\0\51\4\127\0\35\4\51\0"+
    "\12\5\36\4\2\0\5\4\u038b\0\154\4\224\0\234\4\4\0\132\4"+
    "\6\0\26\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4"+
    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4"+
    "\1\0\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4"+
    "\2\0\6\4\4\0\15\4\5\0\3\4\1\0\7\4\164\0\1\4"+
    "\15\0\1\4\202\0\1\4\4\0\1\4\2\0\12\4\1\0\1\4"+
    "\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0\4\4"+
    "\1\0\3\4\1\0\7\4\3\0\3\4\5\0\5\4\u0ebb\0\2\4"+
    "\52\0\5\4\5\0\2\4\4\0\126\4\6\0\3\4\1\0\132\4"+
    "\1\0\4\4\5\0\50\4\4\0\136\4\21\0\30\4\70\0\20\4"+
    "\u0200\0\u19b6\4\112\0\u51a6\4\132\0\u048d\4\u0773\0\u2ba4\4\u215c\0\u012e\4"+
    "\2\0\73\4\225\0\7\4\14\0\5\4\5\0\1\4\1\0\12\4"+
    "\1\0\15\4\1\0\5\4\1\0\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0\66\4\50\0\14\4"+
    "\164\0\5\4\1\0\207\4\23\0\12\5\7\0\32\4\6\0\32\4"+
    "\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\2\1\1\5\1\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\3\3\1\14"+
    "\14\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\35\1\0\1\37\2\35"+
    "\1\40\1\0\1\40\3\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\0\1\50\1\0\1\51\3\0\1\52"+
    "\1\53\1\54\1\50\2\2\1\50\1\55\1\56\1\57"+
    "\1\60\2\10\1\0\2\3\1\61\1\62\1\63\1\3"+
    "\1\64\5\3\1\65\10\3\1\66\1\0\1\67\1\0"+
    "\1\70\1\0\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\0\1\101\2\102\2\0\1\40\1\103"+
    "\1\104\1\105\1\50\1\3\1\0\1\106\1\0\1\107"+
    "\4\0\1\110\3\3\1\111\6\3\1\112\6\3\1\113"+
    "\1\114\1\3\1\115\1\116\1\117\1\120\2\0\2\40"+
    "\1\51\1\0\1\121\1\50\1\0\1\122\1\3\1\123"+
    "\3\3\1\124\1\125\3\3\1\126\1\3\1\127\2\3"+
    "\1\130\1\100\1\0\1\131\1\132\1\133\1\3\1\134"+
    "\3\3\1\135\1\136\1\137\1\0\2\3\1\140\1\141"+
    "\1\3\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u01f8\0\u01f8\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b"+
    "\0\u01f8\0\u095a\0\u01f8\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u0ad4\0\u01f8\0\u0b13\0\u0b52\0\u01f8\0\u01f8\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u01f8\0\u0c8d\0\u0ccc\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u01f8\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07"+
    "\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u01f8\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u0276\0\u0276\0\u0276\0\u113a\0\u01f8\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u0276\0\u14eb\0\u01f8"+
    "\0\u152a\0\u01f8\0\u1569\0\u01f8\0\u01f8\0\u01f8\0\u01f8\0\u01f8"+
    "\0\u01f8\0\u01f8\0\u15a8\0\u15e7\0\u01f8\0\u01f8\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u01f8\0\u01f8\0\u01f8\0\u1722\0\u01f8\0\u1761"+
    "\0\u01f8\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u01f8"+
    "\0\u191a\0\u1959\0\u1998\0\u0276\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u01f8\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\u0276\0\u0276\0\u1ccb\0\u1d0a\0\u1d0a\0\u01f8\0\u01f8"+
    "\0\u1d49\0\u1d88\0\u01f8\0\u1dc7\0\u01f8\0\u1e06\0\u01f8\0\u1e45"+
    "\0\u1722\0\u0276\0\u1e84\0\u0276\0\u1ec3\0\u1f02\0\u1f41\0\u0276"+
    "\0\u0276\0\u1f80\0\u1fbf\0\u1ffe\0\u0276\0\u203d\0\u0276\0\u207c"+
    "\0\u20bb\0\u01f8\0\u01f8\0\u20fa\0\u0bd0\0\u0276\0\u0276\0\u2139"+
    "\0\u0276\0\u2178\0\u21b7\0\u21f6\0\u0276\0\u0276\0\u0276\0\u2235"+
    "\0\u2274\0\u22b3\0\u0276\0\u0276\0\u22f2\0\u0276\0\u0276";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\13\1\11\1\15\1\14"+
    "\1\16\1\17\1\20\2\13\1\21\1\13\1\22\1\13"+
    "\1\23\1\11\1\24\1\13\1\25\1\26\1\27\1\13"+
    "\1\30\1\31\1\32\1\33\1\13\1\34\1\35\1\36"+
    "\1\37\2\13\1\40\1\13\1\41\1\42\1\13\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\7\71\1\72\1\73"+
    "\11\71\1\74\1\75\62\71\1\76\1\73\11\71\1\76"+
    "\1\77\53\71\2\0\1\100\1\0\1\100\1\0\1\101"+
    "\4\0\2\100\1\0\1\100\1\0\1\100\3\0\1\100"+
    "\2\0\1\102\3\100\1\0\21\100\22\0\11\103\1\104"+
    "\21\103\1\105\70\103\1\106\1\107\75\103\1\110\1\111"+
    "\50\103\1\11\1\12\1\13\1\14\1\13\1\11\1\15"+
    "\1\14\1\16\1\17\1\20\2\13\1\21\1\13\1\22"+
    "\1\13\1\23\1\11\1\24\1\13\1\112\1\113\1\27"+
    "\1\13\1\30\1\31\1\32\1\33\1\13\1\34\1\35"+
    "\1\36\1\37\2\13\1\40\1\13\1\41\1\42\1\13"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\100\0\1\12"+
    "\10\0\1\12\2\0\1\114\1\115\20\0\1\115\40\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\21\13\25\0"+
    "\1\14\3\0\1\14\67\0\6\116\2\0\67\116\2\0"+
    "\1\117\1\0\1\117\1\0\1\120\4\0\2\117\1\0"+
    "\1\117\1\0\1\117\3\0\1\117\2\0\4\117\1\0"+
    "\21\117\24\0\1\121\1\0\1\121\1\0\1\122\2\0"+
    "\1\123\1\0\2\121\1\0\1\121\1\0\1\121\3\0"+
    "\1\121\2\0\4\121\1\124\21\121\6\0\1\125\14\0"+
    "\1\126\10\0\1\126\1\127\1\130\1\114\1\115\20\0"+
    "\1\115\11\0\1\130\26\0\1\131\10\0\1\131\2\0"+
    "\1\132\100\0\1\133\40\0\1\134\2\0\1\135\13\0"+
    "\7\23\1\0\11\23\1\136\1\137\54\23\23\0\1\140"+
    "\54\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\1\13\1\141\2\13"+
    "\1\0\10\13\1\142\10\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\3\13\1\143\1\0\2\13\1\144\14\13\1\145"+
    "\1\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\146\2\0\4\13\1\0"+
    "\21\13\105\0\1\147\14\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\1\13\1\150\12\13\1\151\4\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\152\2\0\4\13\1\0\21\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\14\13\1\153"+
    "\4\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\5\13\1\154\13\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\3\13\1\155\1\0\2\13\1\156\16\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\4\13\1\0\3\13\1\157\15\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\4\13\1\0\3\13"+
    "\1\160\15\13\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\1\13"+
    "\1\161\2\13\1\0\21\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\10\13\1\162\10\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\4\13\1\0\5\13\1\163\13\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\4\13\1\0\1\13"+
    "\1\164\3\13\1\165\13\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\1\13\1\166\17\13\53\0\1\167"+
    "\31\0\1\170\72\0\1\171\3\0\1\172\72\0\1\173"+
    "\3\0\1\174\75\0\1\175\1\176\76\0\1\177\77\0"+
    "\1\200\77\0\1\201\74\0\1\202\13\0\7\71\2\0"+
    "\11\71\2\0\53\71\2\0\1\203\1\0\1\203\1\0"+
    "\1\204\4\0\2\203\1\0\1\203\1\0\1\203\3\0"+
    "\1\203\1\205\1\0\4\203\1\0\21\203\22\0\7\206"+
    "\1\0\14\206\1\207\52\206\23\0\1\210\54\0\2\100"+
    "\1\0\2\100\4\0\3\100\1\0\1\100\1\0\1\100"+
    "\3\0\1\100\2\0\4\100\1\0\21\100\22\0\6\211"+
    "\2\0\67\211\1\0\2\100\1\0\2\100\4\0\3\100"+
    "\1\0\1\100\1\0\1\100\3\0\1\100\2\0\1\100"+
    "\1\212\2\100\1\0\21\100\55\0\1\213\54\0\1\214"+
    "\66\0\1\131\10\0\1\131\2\0\1\215\62\0\1\216"+
    "\10\0\1\216\4\0\1\216\42\0\1\216\14\0\6\116"+
    "\1\217\1\0\67\116\1\0\2\117\1\0\2\117\4\0"+
    "\3\117\1\0\1\117\1\0\1\117\3\0\1\117\2\0"+
    "\4\117\1\0\21\117\22\0\6\220\2\0\67\220\1\0"+
    "\2\121\1\0\2\121\3\0\1\221\3\121\1\0\1\121"+
    "\1\0\1\121\3\0\1\121\2\0\4\121\1\0\21\121"+
    "\22\0\6\222\2\0\67\222\7\123\1\0\67\123\33\0"+
    "\1\223\44\0\1\126\10\0\1\126\2\0\1\224\1\115"+
    "\20\0\1\115\40\0\2\127\7\0\1\127\1\0\1\127"+
    "\1\225\1\127\1\0\1\226\13\0\1\127\2\0\1\127"+
    "\1\226\1\127\7\0\1\127\1\0\2\127\23\0\1\130"+
    "\10\0\1\130\2\0\1\227\62\0\1\131\10\0\1\131"+
    "\3\0\1\115\20\0\1\115\37\0\7\23\1\0\67\23"+
    "\23\0\1\230\54\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\2\13"+
    "\1\231\1\13\1\0\10\13\1\232\10\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\233\2\0\4\13\1\0\11\13\1\234\7\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\4\13\1\0\4\13"+
    "\1\235\14\13\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\4\13"+
    "\1\0\2\13\1\236\16\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\5\13\1\237\13\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\4\13\1\0\14\13\1\240\4\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\3\13\1\241\1\0"+
    "\21\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\1\242\20\13\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\4\13"+
    "\1\0\21\13\4\0\1\243\16\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\1\13\1\244\17\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\1\245\3\13\1\0\21\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\1\246\3\13\1\0\21\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\2\13\1\247\1\13"+
    "\1\0\3\13\1\250\15\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\3\13\1\251\15\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\4\13\1\0\10\13\1\252\10\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\4\13\1\0\10\13"+
    "\1\253\10\13\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\4\13"+
    "\1\0\14\13\1\254\4\13\54\0\1\255\3\0\1\256"+
    "\116\0\1\257\100\0\1\260\17\0\2\203\1\0\2\203"+
    "\4\0\3\203\1\0\1\203\1\0\1\203\3\0\1\203"+
    "\2\0\4\203\1\0\21\203\22\0\6\261\2\0\67\261"+
    "\1\0\2\262\7\0\1\262\1\0\1\262\1\0\1\262"+
    "\15\0\1\262\2\0\1\262\1\0\1\262\7\0\1\262"+
    "\1\0\2\262\45\0\1\75\53\0\6\211\1\263\1\0"+
    "\67\211\1\0\2\100\1\0\2\100\4\0\3\100\1\0"+
    "\1\100\1\0\1\100\3\0\1\100\2\0\2\100\1\264"+
    "\1\100\1\0\21\100\23\0\1\216\10\0\1\216\64\0"+
    "\6\220\1\265\1\0\67\220\6\222\1\266\1\0\67\222"+
    "\11\0\1\267\66\0\1\131\10\0\1\131\65\0\2\270"+
    "\7\0\1\270\1\0\1\270\1\215\1\270\15\0\1\270"+
    "\2\0\1\270\1\0\1\270\7\0\1\270\1\0\2\270"+
    "\23\0\1\216\10\0\1\216\4\0\1\271\42\0\1\271"+
    "\31\0\1\215\62\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\3\13"+
    "\1\272\1\0\21\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\1\13\1\273\17\13\23\0\2\13\1\0"+
    "\2\13\4\0\3\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\2\0\4\13\1\0\3\13\1\274\15\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\3\13\1\275"+
    "\15\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\1\276\3\13"+
    "\1\0\21\13\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\3\13"+
    "\1\277\1\0\21\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\14\13\1\300\4\13\23\0\2\13\1\0"+
    "\2\13\4\0\3\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\2\0\4\13\1\0\3\13\1\301\15\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\6\13\1\302"+
    "\12\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\2\13\1\303\16\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\304\2\0"+
    "\4\13\1\0\21\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\1\13\1\305\2\13\1\0\21\13\23\0\2\13\1\0"+
    "\2\13\4\0\3\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\2\0\4\13\1\0\14\13\1\306\4\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\2\13\1\307"+
    "\16\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\5\13\1\310\13\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\3\13\1\311\1\0\21\13\23\0\2\312\1\0\2\312"+
    "\4\0\3\312\1\0\1\312\1\0\1\312\3\0\1\312"+
    "\2\0\4\312\1\0\21\312\22\0\6\261\1\313\1\0"+
    "\67\261\1\0\2\314\7\0\1\314\1\0\1\314\1\0"+
    "\1\314\15\0\1\314\2\0\1\314\1\0\1\314\7\0"+
    "\1\314\1\0\2\314\23\0\2\100\1\0\2\100\4\0"+
    "\3\100\1\0\1\100\1\0\1\100\3\0\1\100\2\0"+
    "\3\100\1\315\1\0\21\100\33\0\1\221\66\0\2\270"+
    "\7\0\1\270\1\0\1\270\1\0\1\270\1\0\1\226"+
    "\13\0\1\270\2\0\1\270\1\226\1\270\7\0\1\270"+
    "\1\0\2\270\23\0\2\13\1\0\2\13\4\0\3\13"+
    "\1\0\1\13\1\0\1\13\3\0\1\13\2\0\4\13"+
    "\1\0\13\13\1\316\5\13\23\0\2\13\1\0\2\13"+
    "\4\0\3\13\1\0\1\13\1\0\1\13\3\0\1\13"+
    "\2\0\4\13\1\0\10\13\1\317\10\13\23\0\2\13"+
    "\1\0\2\13\4\0\3\13\1\0\1\13\1\0\1\13"+
    "\3\0\1\13\2\0\2\13\1\320\1\13\1\0\21\13"+
    "\23\0\2\13\1\0\2\13\4\0\3\13\1\0\1\13"+
    "\1\0\1\13\3\0\1\13\2\0\3\13\1\321\1\0"+
    "\21\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\5\13\1\322\13\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\11\13\1\323\7\13\23\0\2\13\1\0"+
    "\2\13\4\0\3\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\2\0\4\13\1\0\10\13\1\324\10\13\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\3\13\1\325"+
    "\15\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\6\13\1\326\12\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\3\13\1\327\15\13\23\0\2\330\7\0"+
    "\1\330\1\0\1\330\1\0\1\330\15\0\1\330\2\0"+
    "\1\330\1\0\1\330\7\0\1\330\1\0\2\330\23\0"+
    "\2\13\1\0\2\13\4\0\3\13\1\0\1\13\1\0"+
    "\1\13\3\0\1\13\2\0\4\13\1\0\2\13\1\331"+
    "\16\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\7\13\1\332\11\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\12\13\1\333\6\13\23\0\2\13\1\0"+
    "\2\13\4\0\3\13\1\0\1\13\1\0\1\13\3\0"+
    "\1\13\2\0\4\13\1\0\2\13\1\334\16\13\23\0"+
    "\2\206\7\0\1\206\1\0\1\206\1\0\1\206\15\0"+
    "\1\206\2\0\1\206\1\0\1\206\7\0\1\206\1\0"+
    "\2\206\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\335\2\0\4\13\1\0"+
    "\21\13\23\0\2\13\1\0\2\13\4\0\3\13\1\0"+
    "\1\13\1\0\1\13\3\0\1\13\2\0\4\13\1\0"+
    "\3\13\1\336\15\13\23\0\2\13\1\0\2\13\4\0"+
    "\3\13\1\0\1\13\1\0\1\13\3\0\1\13\2\0"+
    "\4\13\1\0\3\13\1\337\15\13\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9009];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\13\1\2\11\22\1\1\11\1\1\1\11"+
    "\5\1\10\11\1\1\1\11\1\1\1\0\2\11\2\1"+
    "\1\0\1\1\1\11\2\1\6\11\1\0\1\1\1\0"+
    "\1\1\3\0\2\1\1\11\4\1\5\11\1\1\1\0"+
    "\6\1\1\11\17\1\1\0\1\11\1\0\1\11\1\0"+
    "\7\11\1\1\1\0\2\11\1\1\2\0\1\1\3\11"+
    "\1\1\1\11\1\0\1\11\1\0\1\1\4\0\1\11"+
    "\12\1\1\11\13\1\2\11\2\0\1\11\1\1\1\11"+
    "\1\0\1\11\1\1\1\0\20\1\2\11\1\0\13\1"+
    "\1\0\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;
    
    private int commentStart;
    private int commentDepth;

	private int injectionBraceCount;
	private int injectionStart;
	private int injectionStart2;
	private boolean isInjectionBlock;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    private IElementType commentStateToTokenType(int state) {
        switch (state) {
            case BLOCK_COMMENT:
                return NapileTokens.BLOCK_COMMENT;
            case DOC_COMMENT:
                return NapileTokens.DOC_COMMENT;
            default:
                throw new IllegalArgumentException("Unexpected state: " + state);
        }
    }


  _NapileLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _NapileLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1322) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++]:zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return NapileTokens.MUL       ;
          }
        case 100: break;
        case 19: 
          { return NapileTokens.EQ        ;
          }
        case 101: break;
        case 84: 
          { return NapileTokens.NULL_KEYWORD ;
          }
        case 102: break;
        case 28: 
          { return NapileTokens.AT        ;
          }
        case 103: break;
        case 58: 
          { return NapileTokens.PLUSPLUS  ;
          }
        case 104: break;
        case 83: 
          { return NapileTokens.TRUE_KEYWORD ;
          }
        case 105: break;
        case 42: 
          { return NapileTokens.EOL_COMMENT;
          }
        case 106: break;
        case 23: 
          { return NapileTokens.LPAR      ;
          }
        case 107: break;
        case 26: 
          { return NapileTokens.SEMICOLON ;
          }
        case 108: break;
        case 2: 
          { return NapileTokens.INTEGER_LITERAL;
          }
        case 109: break;
        case 40: 
          { return NapileTokens.FLOAT_LITERAL;
          }
        case 110: break;
        case 37: 
          { if(injectionBraceCount > 0)
			injectionBraceCount --;
		else
		{
			popState();
			yypushback(1);
			zzStartRead = injectionStart2;
			return NapileTokens.INJECTION_BLOCK;
		}
          }
        case 111: break;
        case 87: 
          { return NapileTokens.WHEN_KEYWORD ;
          }
        case 112: break;
        case 7: 
          { return NapileTokens.MINUS     ;
          }
        case 113: break;
        case 52: 
          { return NapileTokens.MULTEQ    ;
          }
        case 114: break;
        case 10: 
          { return NapileTokens.LBRACE    ;
          }
        case 115: break;
        case 74: 
          { return NapileTokens.AS_SAFE;
          }
        case 116: break;
        case 75: 
          { return NapileTokens.VAR_KEYWORD ;
          }
        case 117: break;
        case 80: 
          { return NapileTokens.IDE_TEMPLATE_END    ;
          }
        case 118: break;
        case 44: 
          { return NapileTokens.DIVEQ     ;
          }
        case 119: break;
        case 3: 
          { return NapileTokens.IDENTIFIER;
          }
        case 120: break;
        case 70: 
          { pushState(INJECTION);

	injectionStart = getTokenStart();

	return NapileTokens.INJECTION_START;
          }
        case 121: break;
        case 73: 
          { return NapileTokens.TRY_KEYWORD ;
          }
        case 122: break;
        case 8: 
          { return NapileTokens.CHARACTER_LITERAL;
          }
        case 123: break;
        case 60: 
          { return NapileTokens.EQEQ      ;
          }
        case 124: break;
        case 95: 
          { return NapileTokens.FALSE_KEYWORD ;
          }
        case 125: break;
        case 32: 
          { popState(); return NapileTokens.IDENTIFIER;
          }
        case 126: break;
        case 9: 
          { pushState(STRING); return NapileTokens.OPEN_QUOTE;
          }
        case 127: break;
        case 89: 
          { popState(); return NapileTokens.THIS_KEYWORD;
          }
        case 128: break;
        case 35: 
          { if(isInjectionBlock)
		{
			isInjectionBlock = false;
			popState();
			return NapileTokens.RBRACE;
		}
          }
        case 129: break;
        case 18: 
          { return NapileTokens.PLUS      ;
          }
        case 130: break;
        case 15: 
          { return NapileTokens.HASH      ;
          }
        case 131: break;
        case 65: 
          { pushState(LONG_TEMPLATE_ENTRY); return NapileTokens.LONG_TEMPLATE_ENTRY_START;
          }
        case 132: break;
        case 59: 
          { return NapileTokens.PLUSEQ    ;
          }
        case 133: break;
        case 29: 
          { return NapileTokens.REGULAR_STRING_PART;
          }
        case 134: break;
        case 27: 
          { return NapileTokens.COMMA     ;
          }
        case 135: break;
        case 41: 
          { return NapileTokens.FIELD_IDENTIFIER;
          }
        case 136: break;
        case 16: 
          { return NapileTokens.GT        ;
          }
        case 137: break;
        case 68: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
          }
        case 138: break;
        case 24: 
          { return NapileTokens.RPAR      ;
          }
        case 139: break;
        case 94: 
          { return NapileTokens.BREAK_KEYWORD ;
          }
        case 140: break;
        case 99: 
          { return NapileTokens.CONTINUE_KEYWORD ;
          }
        case 141: break;
        case 14: 
          { return NapileTokens.LT        ;
          }
        case 142: break;
        case 96: 
          { return NapileTokens.ANONYM_KEYWORD ;
          }
        case 143: break;
        case 25: 
          { return NapileTokens.COLON     ;
          }
        case 144: break;
        case 51: 
          { return NapileTokens.IF_KEYWORD ;
          }
        case 145: break;
        case 66: 
          { return NapileTokens.ESCAPE_SEQUENCE;
          }
        case 146: break;
        case 47: 
          { return NapileTokens.ARROW     ;
          }
        case 147: break;
        case 21: 
          { return NapileTokens.LBRACKET  ;
          }
        case 148: break;
        case 71: 
          { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 149: break;
        case 78: 
          { return NapileTokens.NOT_IN;
          }
        case 150: break;
        case 36: 
          { injectionBraceCount ++;
          }
        case 151: break;
        case 39: 
          { if (lBraceCount == 0) {
                                             popState();
                                             return NapileTokens.LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return NapileTokens.RBRACE;
          }
        case 152: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 153: break;
        case 11: 
          { return NapileTokens.RBRACE    ;
          }
        case 154: break;
        case 61: 
          { return NapileTokens.ANDAND    ;
          }
        case 155: break;
        case 98: 
          { return NapileTokens.PACKAGE_KEYWORD ;
          }
        case 156: break;
        case 56: 
          { return NapileTokens.LTEQ      ;
          }
        case 157: break;
        case 48: 
          { return NapileTokens.MINUSEQ   ;
          }
        case 158: break;
        case 79: 
          { return NapileTokens.IDE_TEMPLATE_START    ;
          }
        case 159: break;
        case 82: 
          { return NapileTokens.THIS_KEYWORD ;
          }
        case 160: break;
        case 49: 
          { return NapileTokens.IS_KEYWORD ;
          }
        case 161: break;
        case 46: 
          { return NapileTokens.MINUSMINUS;
          }
        case 162: break;
        case 34: 
          { if(!isInjectionBlock)
		{
			isInjectionBlock = true;

			pushState(INJECTION_BLOCK);

			injectionStart2 = getTokenStart() + 1;

			return NapileTokens.LBRACE;
		}
          }
        case 163: break;
        case 88: 
          { yypushback(3); return NapileTokens.EXCL;
          }
        case 164: break;
        case 43: 
          { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 165: break;
        case 57: 
          { return NapileTokens.GTEQ      ;
          }
        case 166: break;
        case 38: 
          { lBraceCount++; return NapileTokens.LBRACE;
          }
        case 167: break;
        case 72: 
          { pushState(RAW_STRING); return NapileTokens.OPEN_QUOTE;
          }
        case 168: break;
        case 5: 
          { return NapileTokens.DIV       ;
          }
        case 169: break;
        case 50: 
          { return NapileTokens.IN_KEYWORD ;
          }
        case 170: break;
        case 13: 
          { return NapileTokens.EXCL      ;
          }
        case 171: break;
        case 77: 
          { return NapileTokens.NOT_IS;
          }
        case 172: break;
        case 55: 
          { return NapileTokens.EXCLEQ    ;
          }
        case 173: break;
        case 64: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return NapileTokens.SHORT_TEMPLATE_ENTRY_START;
          }
        case 174: break;
        case 93: 
          { return NapileTokens.WHILE_KEYWORD ;
          }
        case 175: break;
        case 85: 
          { return NapileTokens.ELSE_KEYWORD ;
          }
        case 176: break;
        case 17: 
          { return NapileTokens.QUEST     ;
          }
        case 177: break;
        case 20: 
          { return NapileTokens.PERC      ;
          }
        case 178: break;
        case 53: 
          { return NapileTokens.AS_KEYWORD ;
          }
        case 179: break;
        case 92: 
          { return NapileTokens.CLASS_KEYWORD ;
          }
        case 180: break;
        case 63: 
          { return NapileTokens.PERCEQ    ;
          }
        case 181: break;
        case 97: 
          { return NapileTokens.RETURN_KEYWORD ;
          }
        case 182: break;
        case 31: 
          { popState(); return NapileTokens.CLOSING_QUOTE;
          }
        case 183: break;
        case 30: 
          { popState(); yypushback(1); return NapileTokens.DANGLING_NEWLINE;
          }
        case 184: break;
        case 67: 
          { commentDepth++;
          }
        case 185: break;
        case 90: 
          { return NapileTokens.THROW_KEYWORD ;
          }
        case 186: break;
        case 91: 
          { return NapileTokens.SUPER_KEYWORD ;
          }
        case 187: break;
        case 54: 
          { return NapileTokens.DO_KEYWORD ;
          }
        case 188: break;
        case 22: 
          { return NapileTokens.RBRACKET  ;
          }
        case 189: break;
        case 62: 
          { return NapileTokens.OROR      ;
          }
        case 190: break;
        case 69: 
          { yypushback(2); return NapileTokens.INTEGER_LITERAL;
          }
        case 191: break;
        case 45: 
          { return NapileTokens.RANGE     ;
          }
        case 192: break;
        case 86: 
          { return NapileTokens.METH_KEYWORD ;
          }
        case 193: break;
        case 4: 
          { return NapileTokens.WHITE_SPACE;
          }
        case 194: break;
        case 81: 
          { return NapileTokens.BLOCK_COMMENT;
          }
        case 195: break;
        case 6: 
          { return NapileTokens.DOT       ;
          }
        case 196: break;
        case 76: 
          { return NapileTokens.FOR_KEYWORD ;
          }
        case 197: break;
        case 33: 
          { 
          }
        case 198: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case INJECTION_BLOCK: {
              popState();
		zzStartRead = injectionStart2;
		return NapileTokens.INJECTION_BLOCK;
            }
            case 224: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 225: break;
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 226: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

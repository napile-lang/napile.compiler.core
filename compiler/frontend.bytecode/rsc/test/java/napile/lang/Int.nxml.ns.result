package napile.lang

@napile.annotation.DefaultValue
final static class Int : napile.lang.Number
{
	static val MIN_VALUE : napile.lang.Int
	{
		static get
		static set
	}

	static val MAX_VALUE : napile.lang.Int
	{
		static get
		static set
	}

	meth rangeTo(val value : napile.lang.Int) : napile.lang.Array<napile.lang.Int>
	{
		// compiled code
	}

	native meth toByte() : napile.lang.Byte

	native meth toShort() : napile.lang.Short

	meth toInt() : napile.lang.Int
	{
		// compiled code
	}

	native meth toLong() : napile.lang.Long

	native meth toFloat() : napile.lang.Float

	native meth toDouble() : napile.lang.Double

	native meth plus() : napile.lang.Int

	native meth minus() : napile.lang.Int

	native meth inc() : napile.lang.Int

	native meth dec() : napile.lang.Int

	native meth bitNot() : napile.lang.Int

	native meth bitXor(val value : napile.lang.Int) : napile.lang.Int

	native meth bitOr(val value : napile.lang.Int) : napile.lang.Int

	native meth bitAnd(val value : napile.lang.Int) : napile.lang.Int

	native meth bitShiftLeft(val value : napile.lang.Int) : napile.lang.Int

	native meth bitShiftRight(val value : napile.lang.Int) : napile.lang.Int

	native meth bitShiftRightZ(val value : napile.lang.Int) : napile.lang.Int

	native meth plus(val value : napile.lang.Int) : napile.lang.Int

	native meth times(val value : napile.lang.Int) : napile.lang.Int

	native meth minus(val value : napile.lang.Int) : napile.lang.Int

	native meth mod(val value : napile.lang.Int) : napile.lang.Int

	native meth div(val value : napile.lang.Int) : napile.lang.Int

	native meth compareTo(val value : napile.lang.Byte) : napile.condition.CompareResult

	native meth compareTo(val value : napile.lang.Short) : napile.condition.CompareResult

	native meth compareTo(val value : napile.lang.Int) : napile.condition.CompareResult

	native meth compareTo(val value : napile.lang.Long) : napile.condition.CompareResult

	native meth equals(val o : napile.lang.Any?) : napile.lang.Bool

	native meth toString() : napile.lang.String

	local final this()
	{
		// compiled code
	}

	static this()
	{
		// compiled code
	}

}
/* The following code was generated by JFlex 1.4.3 on 4/16/11 2:45 PM */

package protobuf.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import protobuf.lang.PbTokenTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/16/11 2:45 PM from the specification file
 * <tt>D:/projects/protobuf_plugin/idea-plugin-protobuf/src/protobuf/lang/lexer/protobuf.flex</tt>
 */
public class _ProtobufLexer implements FlexLexer, PbTokenTypes {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\17"+
    "\4\0\1\21\1\22\1\23\1\10\1\0\1\32\1\16\1\13\1\7"+
    "\1\11\1\4\1\57\1\56\1\61\1\4\1\60\3\4\1\0\1\31"+
    "\1\0\1\30\3\0\4\5\1\15\1\5\24\6\1\24\1\20\1\25"+
    "\1\0\1\6\1\0\1\41\1\55\1\42\1\47\1\14\1\52\1\44"+
    "\1\6\1\33\1\6\1\43\1\53\1\34\1\46\1\36\1\35\1\54"+
    "\1\37\1\45\1\40\1\51\1\50\1\6\1\12\1\62\1\6\1\26"+
    "\1\0\1\27\54\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\213\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\10\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6\56\0\32\6"+
    "\5\0\13\6\43\0\2\6\1\0\143\6\1\0\1\6\17\0\2\6"+
    "\7\0\2\6\12\0\3\6\2\0\1\6\20\0\1\6\1\0\36\6"+
    "\35\0\3\6\60\0\46\6\13\0\1\6\u0152\0\66\6\3\0\1\6"+
    "\22\0\1\6\7\0\12\6\43\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\1\6\3\0\4\6\3\0\1\6\36\0\2\6"+
    "\1\0\3\6\16\0\2\6\23\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\37\0\4\6"+
    "\1\0\1\6\23\0\3\6\20\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\3\0\1\6\22\0\1\6"+
    "\17\0\2\6\43\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6"+
    "\17\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\113\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\46\0\2\6\43\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\40\0\1\6"+
    "\1\0\2\6\43\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\46\0\2\6\43\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\72\0\60\6\1\0\2\6\14\0\7\6\72\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6\1\0\1\6"+
    "\25\0\2\6\42\0\1\6\77\0\10\6\1\0\42\6\35\0\4\6"+
    "\164\0\42\6\1\0\5\6\1\0\2\6\45\0\6\6\112\0\46\6"+
    "\12\0\51\6\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6"+
    "\1\0\77\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\47\6\1\0\23\6\105\0\125\6"+
    "\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\25\0\15\6"+
    "\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0\3\6"+
    "\17\0\64\6\43\0\1\6\4\0\1\6\103\0\130\6\10\0\51\6"+
    "\127\0\35\6\63\0\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\164\0\1\6\15\0\1\6\202\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\u0ebb\0\2\6\52\0\5\6\5\0\2\6\4\0\126\6\6\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\50\6\4\0\136\6\21\0\30\6"+
    "\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6"+
    "\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\0\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\14\6\164\0\5\6\1\0\207\6\44\0\32\6\6\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\3\1\5"+
    "\1\4\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\14\4\2\0\1\21\1\22"+
    "\1\0\2\4\1\23\2\7\10\4\1\24\15\4\1\25"+
    "\1\22\1\3\2\4\2\23\3\4\1\26\5\4\1\27"+
    "\15\4\1\30\1\0\1\4\1\31\4\0\11\4\1\32"+
    "\12\4\1\33\3\4\1\34\1\35\6\4\1\36\11\4"+
    "\1\37\1\40\1\41\1\4\1\42\1\43\2\4\1\44"+
    "\4\4\1\45\1\46\1\47\1\4\1\50\1\51\1\52"+
    "\3\4\1\53\1\54\2\4\1\55\1\4\1\56\2\4"+
    "\1\57\1\60\1\4\1\61\1\62\1\63\1\64\1\65"+
    "\1\4\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\377\0\u0132"+
    "\0\63\0\u0165\0\63\0\u0198\0\u01cb\0\63\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\63\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\314\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0462\0\u0a5c\0\u052e\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\314\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\314\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57"+
    "\0\63\0\u0f8a\0\u0fbd\0\314\0\u0af5\0\u0ff0\0\u0b28\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\314\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u1386\0\u13b9\0\u13ec\0\314\0\u141f\0\u1452\0\u1485"+
    "\0\314\0\314\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584\0\u15b7"+
    "\0\314\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u174f\0\u1782\0\314\0\314\0\314\0\u17b5\0\314\0\314"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\314"+
    "\0\314\0\314\0\u194d\0\314\0\314\0\314\0\u1980\0\u19b3"+
    "\0\u19e6\0\314\0\314\0\u1a19\0\u1a4c\0\314\0\u1a7f\0\314"+
    "\0\u1ab2\0\u1ae5\0\314\0\314\0\u1b18\0\314\0\314\0\314"+
    "\0\314\0\314\0\u1b4b\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\2\6\1\7\1\2\1\10"+
    "\1\6\1\11\1\12\1\6\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\6"+
    "\1\35\1\36\1\6\1\37\1\6\1\40\1\41\2\6"+
    "\1\42\4\5\1\6\65\0\1\4\64\0\1\5\4\0"+
    "\1\5\1\0\1\43\2\44\40\0\4\5\5\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\30\6\7\0\1\45"+
    "\1\46\56\0\1\5\4\0\1\5\1\47\1\43\2\44"+
    "\40\0\4\5\5\0\3\6\2\0\1\6\1\50\1\0"+
    "\2\6\15\0\13\6\1\51\14\6\1\14\2\0\14\14"+
    "\1\52\1\53\42\14\1\15\2\0\15\15\1\54\1\52"+
    "\41\15\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\1\6\1\55\11\6\1\56\14\6\4\0\3\6\2\0"+
    "\2\6\1\0\1\57\1\6\15\0\6\6\1\60\21\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\6\6"+
    "\1\61\21\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\2\6\1\62\25\6\4\0\3\6\2\0\2\6"+
    "\1\0\1\63\1\6\15\0\2\6\1\64\25\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\3\6\1\65"+
    "\1\66\23\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\4\6\1\67\23\6\4\0\3\6\2\0\2\6"+
    "\1\0\1\70\1\6\15\0\1\71\4\6\1\72\11\6"+
    "\1\73\10\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\3\6\1\74\24\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\1\75\27\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\1\76\5\6\1\77\11\6"+
    "\1\100\7\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\3\6\1\101\23\6\1\102\4\0\1\103\4\0"+
    "\1\103\44\0\4\103\5\0\1\103\4\0\1\103\4\0"+
    "\1\43\37\0\4\103\1\0\1\45\2\0\60\45\10\46"+
    "\1\104\52\46\4\0\2\105\3\0\1\105\2\0\2\105"+
    "\23\0\2\105\4\0\1\105\2\0\1\105\2\0\5\105"+
    "\5\0\3\6\2\0\2\6\1\0\2\6\15\0\5\6"+
    "\1\106\22\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\16\6\1\107\11\6\1\14\2\0\14\14\1\110"+
    "\1\53\42\14\1\15\2\0\15\15\1\54\1\111\41\15"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\2\6"+
    "\1\112\25\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\5\6\1\113\22\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\12\6\1\114\15\6\4\0\3\6"+
    "\2\0\1\6\1\115\1\0\2\6\15\0\30\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\7\6\1\116"+
    "\20\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\117\22\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\2\6\1\120\2\6\1\121\13\6\1\122"+
    "\6\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\7\6\1\123\20\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\16\6\1\124\11\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\3\6\1\125\24\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\4\6\1\126"+
    "\23\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\13\6\1\127\14\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\4\6\1\130\23\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\1\131\27\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\16\6\1\132\11\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\13\6"+
    "\1\133\14\6\4\0\3\6\2\0\1\6\1\134\1\0"+
    "\2\6\15\0\30\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\20\6\1\135\7\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\3\6\1\136\24\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\3\6\1\137"+
    "\24\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\140\22\6\7\46\1\141\1\142\52\46\4\0"+
    "\3\6\2\0\2\6\1\0\1\143\1\6\15\0\30\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\1\6"+
    "\1\144\26\6\1\145\2\0\14\145\1\52\1\146\42\145"+
    "\1\147\2\0\15\147\1\150\1\52\41\147\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\3\6\1\151\24\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\23\6"+
    "\1\152\1\6\1\153\2\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\12\6\1\154\15\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\10\6\1\155\17\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\1\156"+
    "\27\6\4\0\3\6\2\0\2\6\1\0\1\157\1\6"+
    "\15\0\30\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\16\6\1\160\11\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\16\6\1\161\11\6\4\0\3\6"+
    "\2\0\2\6\1\0\1\162\1\6\15\0\30\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\16\6\1\163"+
    "\11\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\15\6\1\164\12\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\5\6\1\165\22\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\1\166\27\6\4\0\3\6"+
    "\2\0\1\6\1\167\1\0\2\6\15\0\30\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\22\6\1\170"+
    "\5\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\171\22\6\4\0\3\6\2\0\2\6\1\0"+
    "\1\172\1\6\15\0\30\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\12\6\1\173\15\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\6\6\1\174\21\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\20\6"+
    "\1\175\7\6\4\0\3\6\2\0\2\6\1\0\1\176"+
    "\1\6\15\0\30\6\7\46\1\0\1\142\52\46\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\13\6\1\177"+
    "\14\6\1\145\2\0\14\145\1\110\1\146\42\145\1\147"+
    "\2\0\15\147\1\150\1\111\41\147\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\4\6\1\200\23\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\24\6\1\201"+
    "\3\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\26\6\1\202\1\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\6\6\1\203\21\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\6\6\1\204\21\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\3\6\1\205"+
    "\24\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\6\6\1\206\21\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\4\6\1\207\23\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\1\210\27\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\2\6\1\211\25\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\1\212"+
    "\27\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\23\6\1\213\1\6\1\214\2\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\13\6\1\215\14\6\4\0"+
    "\3\6\2\0\2\6\1\0\1\216\1\6\15\0\30\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\20\6"+
    "\1\217\7\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\23\6\1\220\1\6\1\221\2\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\14\6\1\222\13\6"+
    "\4\0\3\6\2\0\2\6\1\0\1\223\1\6\15\0"+
    "\30\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\224\22\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\12\6\1\225\15\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\12\6\1\226\1\6\1\227"+
    "\13\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\230\22\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\11\6\1\231\16\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\11\6\1\232\16\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\13\6\1\233"+
    "\14\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\5\6\1\234\22\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\13\6\1\235\14\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\4\6\1\236\23\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\7\6\1\237"+
    "\20\6\4\0\3\6\2\0\2\6\1\0\2\6\15\0"+
    "\24\6\1\240\3\6\4\0\3\6\2\0\2\6\1\0"+
    "\2\6\15\0\26\6\1\241\1\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\11\6\1\242\16\6\4\0"+
    "\3\6\2\0\2\6\1\0\2\6\15\0\14\6\1\243"+
    "\13\6\4\0\3\6\2\0\2\6\1\0\1\244\1\6"+
    "\15\0\30\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\24\6\1\245\3\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\26\6\1\246\1\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\23\6\1\247\1\6"+
    "\1\250\2\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\1\251\27\6\4\0\3\6\2\0\2\6\1\0"+
    "\1\252\1\6\15\0\30\6\4\0\3\6\2\0\2\6"+
    "\1\0\1\253\1\6\15\0\30\6\4\0\3\6\2\0"+
    "\2\6\1\0\2\6\15\0\6\6\1\254\21\6\4\0"+
    "\3\6\2\0\2\6\1\0\1\255\1\6\15\0\30\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\12\6"+
    "\1\256\15\6\4\0\3\6\2\0\2\6\1\0\1\257"+
    "\1\6\15\0\30\6\4\0\3\6\2\0\2\6\1\0"+
    "\1\260\1\6\15\0\30\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\23\6\1\261\1\6\1\262\2\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\24\6"+
    "\1\263\3\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\26\6\1\264\1\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\3\6\1\265\24\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\20\6\1\266\7\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\14\6"+
    "\1\267\13\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\14\6\1\270\13\6\4\0\3\6\2\0\2\6"+
    "\1\0\2\6\15\0\24\6\1\271\3\6\4\0\3\6"+
    "\2\0\2\6\1\0\2\6\15\0\26\6\1\272\1\6"+
    "\4\0\3\6\2\0\2\6\1\0\2\6\15\0\13\6"+
    "\1\273\14\6\4\0\3\6\2\0\2\6\1\0\2\6"+
    "\15\0\12\6\1\274\15\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7038];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\2\1\11\11\14\1\2\0\2\1\1\0\2\1\1\11"+
    "\66\1\1\11\1\0\2\1\4\0\124\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public _ProtobufLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ProtobufLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1242) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 54: 
          { return (EXTENSIONS);
          }
        case 55: break;
        case 45: 
          { return (RETURNS);
          }
        case 56: break;
        case 13: 
          { return (CLOSE_BLOCK);
          }
        case 57: break;
        case 44: 
          { return (PACKAGE);
          }
        case 58: break;
        case 3: 
          { return (NUM_INT);
          }
        case 59: break;
        case 49: 
          { return (OPTIONAL);
          }
        case 60: break;
        case 16: 
          { return (COMMA);
          }
        case 61: break;
        case 31: 
          { return (FALSE);
          }
        case 62: break;
        case 2: 
          { return (WHITE_SPACE);
          }
        case 63: break;
        case 4: 
          { return (IDENTIFIER);
          }
        case 64: break;
        case 38: 
          { return (SINT64);
          }
        case 65: break;
        case 37: 
          { return (SINT32);
          }
        case 66: break;
        case 51: 
          { return (REQUIRED);
          }
        case 67: break;
        case 36: 
          { return (OPTION);
          }
        case 68: break;
        case 5: 
          { return (DOT);
          }
        case 69: break;
        case 43: 
          { return (MESSAGE);
          }
        case 70: break;
        case 42: 
          { return (UINT64);
          }
        case 71: break;
        case 41: 
          { return (UINT32);
          }
        case 72: break;
        case 34: 
          { return (EXTEND);
          }
        case 73: break;
        case 50: 
          { return (REPEATED);
          }
        case 74: break;
        case 9: 
          { return (CLOSE_PARENTHESIS);
          }
        case 75: break;
        case 15: 
          { return (SEMICOLON);
          }
        case 76: break;
        case 26: 
          { return (TRUE);
          }
        case 77: break;
        case 8: 
          { return (OPEN_PARENTHESIS);
          }
        case 78: break;
        case 10: 
          { return (OPEN_BRACE);
          }
        case 79: break;
        case 48: 
          { return (FIXED64);
          }
        case 80: break;
        case 47: 
          { return (FIXED32);
          }
        case 81: break;
        case 46: 
          { return (SERVICE);
          }
        case 82: break;
        case 20: 
          { return (TO);
          }
        case 83: break;
        case 35: 
          { return (IMPORT);
          }
        case 84: break;
        case 22: 
          { return (MAX);
          }
        case 85: break;
        case 40: 
          { return (DOUBLE);
          }
        case 86: break;
        case 30: 
          { return (GROUP);
          }
        case 87: break;
        case 53: 
          { return (SFIXED64);
          }
        case 88: break;
        case 52: 
          { return (SFIXED32);
          }
        case 89: break;
        case 18: 
          { return (WRONG_C_STYLE_COMMENT);
          }
        case 90: break;
        case 11: 
          { return (CLOSE_BRACE);
          }
        case 91: break;
        case 28: 
          { return (INT32);
          }
        case 92: break;
        case 29: 
          { return (INT64);
          }
        case 93: break;
        case 14: 
          { return (EQUAL);
          }
        case 94: break;
        case 27: 
          { return (BOOL);
          }
        case 95: break;
        case 7: 
          { return (WRONG_STRING_LITERAL);
          }
        case 96: break;
        case 19: 
          { return (STRING_LITERAL);
          }
        case 97: break;
        case 23: 
          { return (RPC);
          }
        case 98: break;
        case 24: 
          { return (C_STYLE_COMMENT);
          }
        case 99: break;
        case 32: 
          { return (FLOAT);
          }
        case 100: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 101: break;
        case 12: 
          { return (OPEN_BLOCK);
          }
        case 102: break;
        case 25: 
          { return (ENUM);
          }
        case 103: break;
        case 39: 
          { return (STRING);
          }
        case 104: break;
        case 6: 
          { return (MINUS);
          }
        case 105: break;
        case 33: 
          { return (BYTES);
          }
        case 106: break;
        case 21: 
          { return (NUM_DOUBLE);
          }
        case 107: break;
        case 17: 
          { return (LINE_COMMENT);
          }
        case 108: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>

/**
 * @author VISTALL
 */
class Exception
{
	final val message : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>?

	final val stack : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.StackTraceElement">StackTraceElement</ref>>

	this(<ref class="VariableDescriptorImpl" to="napile.lang.Exception.message">message</ref> = null)
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.Exception.stack">stack</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Exception.generateStack">generateStack</ref>();
	}

	local native meth generateStack() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.StackTraceElement">StackTraceElement</ref>>

	meth printStackTrace(val b : <ref class="MutableClassDescriptor" to="napile.lang.StringBuilder">StringBuilder</ref>)
	{
		<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Exception.getClass">getClass</ref>().<ref class="VariableDescriptorImpl" to="napile.reflect.Class.name">name</ref>
		if(<ref class="VariableDescriptorImpl" to="napile.lang.Exception.message">message</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.equals">!=</ref> null)
		{
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ' : '
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Exception.message">message</ref>
		}

		<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '\n'
		for(i in <ref class="VariableDescriptorImpl" to="napile.lang.Exception.stack">stack</ref>)
		{
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '\tat '
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.Exception.printStackTrace.i">i</ref>
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Exception.printStackTrace.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '\n'
		}
	}

	meth printStackTrace()
	{
		<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.Logger.System">System</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.error">error</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.error.exception">exception</ref> = <ref class="MutableClassDescriptor" to="napile.lang.Exception">this</ref>)
	}
}
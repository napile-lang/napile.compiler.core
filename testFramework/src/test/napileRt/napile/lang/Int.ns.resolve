package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.condition">condition</ref>.<ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>

/**
 * @author VISTALL
 */
@<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>(0)
final class Int : <ref class="MutableClassDescriptor" to="napile.lang.Number">Number</ref>
{
	static val MIN_VALUE : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x80000000
	static val MAX_VALUE : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x7fffffff

	local this()

	meth rangeTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>
	{
		var array = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Int.rangeTo.value">value</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="MutableClassDescriptor" to="napile.lang.Int">this</ref>)

		var index = 0
		var me = <ref class="MutableClassDescriptor" to="napile.lang.Int">this</ref>
		while (<ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.array">array</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.array">array</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref to="null">=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.me">me</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>

		return <ref class="LocalVariableDescriptor" to="napile.lang.Int.rangeTo.array">array</ref>
	}

	override native meth toByte() : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>

	override native meth toShort() : <ref class="MutableClassDescriptor" to="napile.lang.Short">Short</ref>

	override meth toInt() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="MutableClassDescriptor" to="napile.lang.Int">this</ref>

	override native meth toLong() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	override native meth toFloat() : <ref class="MutableClassDescriptor" to="napile.lang.Float">Float</ref>

	override native meth toDouble() : <ref class="MutableClassDescriptor" to="napile.lang.Double">Double</ref>

	native meth plus() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth minus() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth inc() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth dec() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	// bit operators
	native meth bitNot() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitXor(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitOr(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitAnd(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitShiftLeft(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitShiftRight(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth bitShiftRightZ(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth times(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth minus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth mod(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth div(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Short">Short</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	override native meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	override native meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
}
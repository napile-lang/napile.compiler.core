/*
 * Copyright 2010-2013 napile.org
 * Copyright Apache Harmony
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

/**
 * A {@code Thread} is a concurrent unit of execution. It has its own call stack
 * for methods being invoked, their arguments and local variables. Each virtual
 * machine instance has at least one main {@code Thread} running when it is
 * started; typically, there are several others for housekeeping. The
 * application might decide to launch additional {@code Thread}s for specific
 * purposes.
 * <p>
 * {@code Thread}s in the same VM interact and synchronize by the use of shared
 * objects and monitors associated with these objects. Synchronized methods and
 * part of the API in {@link Object} also allow {@code Thread}s to cooperate.
 * <p>
 * There are basically two main ways of having a {@code Thread} execute
 * application code. One is providing a new class that extends {@code Thread}
 * and overriding its {@link #run()} method. The other is providing a new
 * {@code Thread} instance with a {@link Runnable} object during its creation.
 * In both cases, the {@link #start()} method must be called to actually execute
 * the new {@code Thread}.
 * <p>
 * Each {@code Thread} has an integer priority that basically determines the
 * amount of CPU time the {@code Thread} gets. It can be set using the
 * {@link #setPriority(int)} method. A {@code Thread} can also be made a daemon,
 * which makes it run in the background. The latter also affects VM termination
 * behavior: the VM does not terminate automatically as long as there are
 * non-daemon threads running.
 *
 * @see napile.lang.ThreadGroup
 */
class Thread
{
	local static var threadOrdinalNum : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = 0.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toLong">toLong</ref>()

	static meth getNextThreadId() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.inc">++</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Thread.threadOrdinalNum">threadOrdinalNum</ref>

	static var systemThreadGroup : <ref class="MutableClassDescriptor" to="napile.lang.ThreadGroup">ThreadGroup</ref>
	static var mainThreadGroup : <ref class="MutableClassDescriptor" to="napile.lang.ThreadGroup">ThreadGroup</ref>

	static this()
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.systemThreadGroup">systemThreadGroup</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.lang.ThreadGroup.this">ThreadGroup</ref>('system')
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.mainThreadGroup">mainThreadGroup</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.lang.ThreadGroup.this">ThreadGroup</ref>('main', <ref class="VariableDescriptorImpl" to="napile.lang.Thread.systemThreadGroup">systemThreadGroup</ref>)
	}

	local val target : {}

	local var state
	{
		local set
	} = <ref class="MutableClassDescriptor" to="napile.lang.ThreadState">ThreadState</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.ThreadState.NEW">NEW</ref>

	/**
	 * Thread's ID
	 */
	local val threadId : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>
	val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	val group : <ref class="MutableClassDescriptor" to="napile.lang.ThreadGroup">ThreadGroup</ref>

	this(val threadName : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>? = null, val threadGroup : <ref class="MutableClassDescriptor" to="napile.lang.ThreadGroup">ThreadGroup</ref>? = null, <ref class="VariableDescriptorImpl" to="napile.lang.Thread.target">target</ref> = {})
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.threadId">threadId</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Thread.getNextThreadId">getNextThreadId</ref>()
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.name">name</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Thread.this.threadName">threadName</ref> <ref to="null">?:</ref> 'Thread: ' <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.plus">+</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Thread.threadId">threadId</ref>
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.group">group</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Thread.this.threadGroup">threadGroup</ref> <ref to="null">?:</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Thread.mainThreadGroup">mainThreadGroup</ref>
	}

	local meth run()
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.target">target</ref>()

		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.state">state</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="napile.lang.ThreadState">ThreadState</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.ThreadState.FINISHED">FINISHED</ref>
	}

	meth start()
	{
		if(<ref class="VariableDescriptorImpl" to="napile.lang.Thread.state">state</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.ThreadState.equals">!=</ref> <ref class="MutableClassDescriptor" to="napile.lang.ThreadState">ThreadState</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.ThreadState.NEW">NEW</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.IllegalStateException.this">IllegalStateException</ref>()

		<ref class="VariableDescriptorImpl" to="napile.lang.Thread.state">state</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="napile.lang.ThreadState">ThreadState</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.ThreadState.STARTED">STARTED</ref>

		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Thread.start0">start0</ref>()
	}

	local native meth start0();
}
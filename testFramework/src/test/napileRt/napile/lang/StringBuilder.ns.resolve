package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

/**
 * @author VISTALL
 */
final class StringBuilder
{
	local var array : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>> = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>(10)
	local var count : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	this()

	meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.StringBuilder">this</ref>
	{
		var str = if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.StringBuilder.plus.value">value</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.StringBuilder.plus.value">value</ref> <ref to="null">as</ref> <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref> else <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.StringBuilder.plus.value">value</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.toString">toString</ref>()

		var newCount = <ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.str">str</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.size">size</ref>() <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.count">count</ref>
		if(<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.newCount">newCount</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.expandCapacity">expandCapacity</ref>(<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.newCount">newCount</ref>)

		<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.str">str</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.getChars">getChars</ref>(0, <ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.str">str</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.size">size</ref>(), <ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.count">count</ref>)

		<ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.count">count</ref> <ref to="null">=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.plus.newCount">newCount</ref>;

		return <ref class="MutableClassDescriptor" to="napile.lang.StringBuilder">this</ref>
	}

	meth expandCapacity(val minimumCapacity : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		var newCapacity = (<ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> 1) <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.times">*</ref> 2;
		if (<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.expandCapacity.newCapacity">newCapacity</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0)
			<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.expandCapacity.newCapacity">newCapacity</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Int.MAX_VALUE">MAX_VALUE</ref>;
		else if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.StringBuilder.expandCapacity.minimumCapacity">minimumCapacity</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.expandCapacity.newCapacity">newCapacity</ref>)
			<ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.expandCapacity.newCapacity">newCapacity</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.StringBuilder.expandCapacity.minimumCapacity">minimumCapacity</ref>;

		<ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copyOf">copyOf</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref>, <ref class="LocalVariableDescriptor" to="napile.lang.StringBuilder.expandCapacity.newCapacity">newCapacity</ref>);
	}

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		return <ref class="ConstructorDescriptor" to="napile.lang.String.this">String</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.array">array</ref>, 0, <ref class="VariableDescriptorImpl" to="napile.lang.StringBuilder.count">count</ref>);
	}
}
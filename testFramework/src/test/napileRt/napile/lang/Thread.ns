/*
 * Copyright 2010-2013 napile.org
 * Copyright Apache Harmony
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package napile.lang

/**
 * A {@code Thread} is a concurrent unit of execution. It has its own call stack
 * for methods being invoked, their arguments and local variables. Each virtual
 * machine instance has at least one main {@code Thread} running when it is
 * started; typically, there are several others for housekeeping. The
 * application might decide to launch additional {@code Thread}s for specific
 * purposes.
 * <p>
 * {@code Thread}s in the same VM interact and synchronize by the use of shared
 * objects and monitors associated with these objects. Synchronized methods and
 * part of the API in {@link Object} also allow {@code Thread}s to cooperate.
 * <p>
 * There are basically two main ways of having a {@code Thread} execute
 * application code. One is providing a new class that extends {@code Thread}
 * and overriding its {@link #run()} method. The other is providing a new
 * {@code Thread} instance with a {@link Runnable} object during its creation.
 * In both cases, the {@link #start()} method must be called to actually execute
 * the new {@code Thread}.
 * <p>
 * Each {@code Thread} has an integer priority that basically determines the
 * amount of CPU time the {@code Thread} gets. It can be set using the
 * {@link #setPriority(int)} method. A {@code Thread} can also be made a daemon,
 * which makes it run in the background. The latter also affects VM termination
 * behavior: the VM does not terminate automatically as long as there are
 * non-daemon threads running.
 *
 * @see napile.lang.ThreadGroup
 */
class Thread
{
	local static var threadOrdinalNum : Long = 0.toLong()

	static meth getNextThreadId() : Long = ++ threadOrdinalNum

	static var systemThreadGroup : ThreadGroup
	static var mainThreadGroup : ThreadGroup

	static this()
	{
		systemThreadGroup = ThreadGroup("system")
		mainThreadGroup = ThreadGroup("main", systemThreadGroup)
	}

	local val target : {}

	local var state
	{
		local set
	} = ThreadState.NEW

	/**
	 * Thread's ID
	 */
	local val threadId : Long
	val name : String
	val group : ThreadGroup

	this(val threadName : String? = null, val threadGroup : ThreadGroup? = null, target = {})
	{
		threadId = getNextThreadId()
		name = threadName ?: "Thread: " + threadId
		group = threadGroup ?: mainThreadGroup
	}

	local meth run()
	{
		target()

		state = ThreadState.FINISHED
	}

	meth start()
	{
		if(state != ThreadState.NEW)
			throw IllegalStateException()

		state = ThreadState.STARTED

		start0()
	}

	local native meth start0();
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref>

/~
 ~ This class is parent of all classes.
 ~/
class Any
{
	static meth synchronized(val obj : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?, val fun : {})
	{
		<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Any.synchronized.fun">fun</ref>()  //FIXME [VISTALL] stub - need discuss
	}

	static meth assert(val cond : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>, val message : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>? = null)
	{
		if(<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Bool.not">!</ref><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Any.assert.cond">cond</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.AssertionError.this">AssertionError</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Any.assert.message">message</ref>)
	}

	native meth getClass() : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">this</ref>>

	native meth getType() : <ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">this</ref>>

	native meth hashCode() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.fullyEquals">fullyEquals</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Any.equals.o">o</ref>)

	final native meth fullyEquals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>;

	heritable meth clone() : <ref class="MutableClassDescriptor" to="napile.lang.Any">this</ref> = throw <ref class="ConstructorDescriptor" to="napile.lang.Exception.this">Exception</ref>()

	meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.getClass">getClass</ref>().<ref class="VariableDescriptorImpl" to="napile.reflect.Class.name">name</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.plus">+</ref> '@' <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.plus">+</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.hashCode">hashCode</ref>()
}
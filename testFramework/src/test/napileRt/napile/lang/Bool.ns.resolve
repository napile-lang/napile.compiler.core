package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>

/**
 * @author VISTALL
 */
@<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>(<ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Bool.FALSE">FALSE</ref>)
final class Bool
{
	// enum val ?
	static val TRUE : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="ConstructorDescriptor" to="napile.lang.Bool.this">Bool</ref>()

	static val FALSE : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="ConstructorDescriptor" to="napile.lang.Bool.this">Bool</ref>()

	local this()

	meth not() : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = if(<ref class="MutableClassDescriptor" to="napile.lang.Bool">this</ref>) <ref class="VariableDescriptorImpl" to="napile.lang.Bool.FALSE">FALSE</ref> else <ref class="VariableDescriptorImpl" to="napile.lang.Bool.TRUE">TRUE</ref>

	override meth toString() = if(<ref class="MutableClassDescriptor" to="napile.lang.Bool">this</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Bool.equals">==</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Bool.TRUE">TRUE</ref>) "true" else "false"
}
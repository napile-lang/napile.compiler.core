package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.lang]>lang</PackageDescriptorImpl[napile.lang]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.DefaultValue]>DefaultValue</MutableClassDescriptor[napile.annotation.DefaultValue]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.Sizeable]>Sizeable</MutableClassDescriptor[napile.collection.Sizeable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]>

/~
 ~ Authors
 ~  * VISTALL
 ~/
@<MutableClassDescriptor[napile.annotation.DefaultValue]>DefaultValue</MutableClassDescriptor[napile.annotation.DefaultValue]>("")
final class String : <MutableClassDescriptor[napile.collection.Sizeable]>Sizeable</MutableClassDescriptor[napile.collection.Sizeable]>
{
	local val array : @<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]> <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>>
	local val count : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>
	local val offset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>

	this(val oldArray : @<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]> <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>>)
	{
		<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]> <null>=</null> <CallParameterAsVariableDescriptorImpl[napile.lang.String.this.oldArray]>oldArray</CallParameterAsVariableDescriptorImpl[napile.lang.String.this.oldArray]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>
		<VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]> <null>=</null> 0
		<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]> <null>=</null> <CallParameterAsVariableDescriptorImpl[napile.lang.String.this.oldArray]>oldArray</CallParameterAsVariableDescriptorImpl[napile.lang.String.this.oldArray]>
	}

	this(<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>, <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)

	meth getChars(val srcOffset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, val srcEnd : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, val desc : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>>, val descOffset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>)
	{
		<MutableClassDescriptor[napile.lang.ArrayUtil]>ArrayUtil</MutableClassDescriptor[napile.lang.ArrayUtil]>.<SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copy]>copy</SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copy]>(<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcOffset]>srcOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcOffset]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.desc]>desc</CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.desc]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.descOffset]>descOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.descOffset]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcEnd]>srcEnd</CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcEnd]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcOffset]>srcOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.getChars.srcOffset]>)
	}

	meth toArray() : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>> = <MutableClassDescriptor[napile.lang.ArrayUtil]>ArrayUtil</MutableClassDescriptor[napile.lang.ArrayUtil]>.<SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copyOfRange]>copyOfRange</SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copyOfRange]>(<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)

	meth getBytes() : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>
	{
		//TODO [VISTALL] stub
		var byteArray = <ConstructorDescriptor[napile.lang.Array.this]>Array</ConstructorDescriptor[napile.lang.Array.this]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>(<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)
		var i = <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>
		while (<LocalVariableDescriptor[napile.lang.String.getBytes.i]>i</LocalVariableDescriptor[napile.lang.String.getBytes.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)
			<SimpleMethodDescriptorImpl[napile.lang.Array.set]><LocalVariableDescriptor[napile.lang.String.getBytes.byteArray]>byteArray</LocalVariableDescriptor[napile.lang.String.getBytes.byteArray]>[<LocalVariableDescriptor[napile.lang.String.getBytes.i]>i</LocalVariableDescriptor[napile.lang.String.getBytes.i]>]</SimpleMethodDescriptorImpl[napile.lang.Array.set]> <null>=</null> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>[<LocalVariableDescriptor[napile.lang.String.getBytes.i]>i</LocalVariableDescriptor[napile.lang.String.getBytes.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>.<SimpleMethodDescriptorImpl[napile.lang.Char.toByte]>toByte</SimpleMethodDescriptorImpl[napile.lang.Char.toByte]>()
		return <LocalVariableDescriptor[napile.lang.String.getBytes.byteArray]>byteArray</LocalVariableDescriptor[napile.lang.String.getBytes.byteArray]>
	}

	meth startsWith(val prefix : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]> = <SimpleMethodDescriptorImpl[napile.lang.String.startsWith]>startsWith</SimpleMethodDescriptorImpl[napile.lang.String.startsWith]>(<CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>prefix</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>, 0);

	meth endsWith(val suffix : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]> = <SimpleMethodDescriptorImpl[napile.lang.String.startsWith]>startsWith</SimpleMethodDescriptorImpl[napile.lang.String.startsWith]>(<CallParameterAsVariableDescriptorImpl[napile.lang.String.endsWith.suffix]>suffix</CallParameterAsVariableDescriptorImpl[napile.lang.String.endsWith.suffix]>, <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.endsWith.suffix]>suffix</CallParameterAsVariableDescriptorImpl[napile.lang.String.endsWith.suffix]>.<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>);

	meth indexOf(val str : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>) : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = <SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>indexOf</SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>(<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>str</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>, 0)

	meth indexOf(val str : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>, val fromIndex : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = <SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>indexOf</SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>(<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>, <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>str</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>.<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>str</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>.<VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>str</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.str]>.<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>, <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>)

	meth contains(val s : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]> = <SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>indexOf</SimpleMethodDescriptorImpl[napile.lang.String.indexOf]>(<CallParameterAsVariableDescriptorImpl[napile.lang.String.contains.s]>s</CallParameterAsVariableDescriptorImpl[napile.lang.String.contains.s]>) <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1;

	meth plus(val a : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>?) : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>
	{
		var c = <ConstructorDescriptor[napile.lang.StringBuilder.this]>StringBuilder</ConstructorDescriptor[napile.lang.StringBuilder.this]>();
		<LocalVariableDescriptor[napile.lang.String.plus.c]>c</LocalVariableDescriptor[napile.lang.String.plus.c]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> <MutableClassDescriptor[napile.lang.String]>this</MutableClassDescriptor[napile.lang.String]>
		<LocalVariableDescriptor[napile.lang.String.plus.c]>c</LocalVariableDescriptor[napile.lang.String.plus.c]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.plus.a]>a</CallParameterAsVariableDescriptorImpl[napile.lang.String.plus.a]>
		return <LocalVariableDescriptor[napile.lang.String.plus.c]>c</LocalVariableDescriptor[napile.lang.String.plus.c]>.<SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>toString</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>()
	}

	override meth size() : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>

	override meth equals(val o : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>?) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>
	{
		if (<SimpleMethodDescriptorImpl[napile.lang.String.fullyEquals]>fullyEquals</SimpleMethodDescriptorImpl[napile.lang.String.fullyEquals]>(<CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>))
			return true

		if (<CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]> <null>is</null> <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>)
		{
			var n = <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>;
			if (<LocalVariableDescriptor[napile.lang.String.equals.n]>n</LocalVariableDescriptor[napile.lang.String.equals.n]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>.<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)
			{
				var v1 = <VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>
				var v2 = <CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>.<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>
				var i = <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>
				var j = <CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.String.equals.o]>.<VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>
				while (<LocalVariableDescriptor[napile.lang.String.equals.n]>n</LocalVariableDescriptor[napile.lang.String.equals.n]><SimpleMethodDescriptorImpl[napile.lang.Int.dec]>--</SimpleMethodDescriptorImpl[napile.lang.Int.dec]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
				{
					if (<SimpleMethodDescriptorImpl[napile.lang.Array.get]><LocalVariableDescriptor[napile.lang.String.equals.v1]>v1</LocalVariableDescriptor[napile.lang.String.equals.v1]>[<LocalVariableDescriptor[napile.lang.String.equals.i]>i</LocalVariableDescriptor[napile.lang.String.equals.i]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Char.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Char.equals]> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><LocalVariableDescriptor[napile.lang.String.equals.v2]>v2</LocalVariableDescriptor[napile.lang.String.equals.v2]>[<LocalVariableDescriptor[napile.lang.String.equals.j]>j</LocalVariableDescriptor[napile.lang.String.equals.j]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>)
						return false
				}

				return true
			}
		}
		return false
	}

	override meth toString() : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]> = <ConstructorDescriptor[napile.lang.String.this]>String</ConstructorDescriptor[napile.lang.String.this]>(<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>, <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>, <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>)

	static meth indexOf(val source : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>>,
						val sourceOffset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>,
						val sourceCount : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>,
						val target : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Char]>Char</MutableClassDescriptor[napile.lang.Char]>>,
						val targetOffset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>,
						val targetCount : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>,
						val fromIndex : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>
	{
		if (<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]>sourceCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]>)
			return if(<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]>targetCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)  <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]>sourceCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]> else <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1;

		if (<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0)
			<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]> <null>=</null> 0;

		if (<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]>targetCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
			return <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>;

		var first  = <SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.target]>target</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.target]>[<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetOffset]>targetOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetOffset]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>;
		var max = <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]>sourceOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> (<CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]>sourceCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceCount]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]>targetCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]>);

		var i = <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]>sourceOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>fromIndex</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.fromIndex]>;
		while(<LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <LocalVariableDescriptor[napile.lang.String.indexOf.max]>max</LocalVariableDescriptor[napile.lang.String.indexOf.max]>)
		{
			if (<SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>source</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>[<LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Char.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Char.equals]> <LocalVariableDescriptor[napile.lang.String.indexOf.first]>first</LocalVariableDescriptor[napile.lang.String.indexOf.first]>)
				while (<SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]><LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <LocalVariableDescriptor[napile.lang.String.indexOf.max]>max</LocalVariableDescriptor[napile.lang.String.indexOf.max]> <null>&&</null> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>source</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>[<LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Char.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Char.equals]> <LocalVariableDescriptor[napile.lang.String.indexOf.first]>first</LocalVariableDescriptor[napile.lang.String.indexOf.first]>);

			if (<LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <LocalVariableDescriptor[napile.lang.String.indexOf.max]>max</LocalVariableDescriptor[napile.lang.String.indexOf.max]>)
			{
				var j = <LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> 1;
				var end = <LocalVariableDescriptor[napile.lang.String.indexOf.j]>j</LocalVariableDescriptor[napile.lang.String.indexOf.j]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]>targetCount</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetCount]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> 1;
				var k = <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetOffset]>targetOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.targetOffset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> 1;
				while (<LocalVariableDescriptor[napile.lang.String.indexOf.j]>j</LocalVariableDescriptor[napile.lang.String.indexOf.j]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <LocalVariableDescriptor[napile.lang.String.indexOf.end]>end</LocalVariableDescriptor[napile.lang.String.indexOf.end]> <null>&&</null> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>source</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.source]>[<LocalVariableDescriptor[napile.lang.String.indexOf.j]>j</LocalVariableDescriptor[napile.lang.String.indexOf.j]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Char.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Char.equals]> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.target]>target</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.target]>[<LocalVariableDescriptor[napile.lang.String.indexOf.k]>k</LocalVariableDescriptor[napile.lang.String.indexOf.k]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>)
				{
					<LocalVariableDescriptor[napile.lang.String.indexOf.j]>j</LocalVariableDescriptor[napile.lang.String.indexOf.j]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
					<LocalVariableDescriptor[napile.lang.String.indexOf.k]>k</LocalVariableDescriptor[napile.lang.String.indexOf.k]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
				}

				if (<LocalVariableDescriptor[napile.lang.String.indexOf.j]>j</LocalVariableDescriptor[napile.lang.String.indexOf.j]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> <LocalVariableDescriptor[napile.lang.String.indexOf.end]>end</LocalVariableDescriptor[napile.lang.String.indexOf.end]>)
					return <LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]>sourceOffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.indexOf.sourceOffset]>;
			}
			<LocalVariableDescriptor[napile.lang.String.indexOf.i]>i</LocalVariableDescriptor[napile.lang.String.indexOf.i]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
		}
		return <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1;
	}

	local meth startsWith(val prefix : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>, val toffset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>
	{
		var ta = <VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>;
		var to = <VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.plus]>+</SimpleMethodDescriptorImpl[napile.lang.Int.plus]> <CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]>toffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]>;
		var pa = <CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>prefix</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>.<VariableDescriptorImpl[napile.lang.String.array]>array</VariableDescriptorImpl[napile.lang.String.array]>;
		var po = <CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>prefix</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>.<VariableDescriptorImpl[napile.lang.String.offset]>offset</VariableDescriptorImpl[napile.lang.String.offset]>;
		var pc = <CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>prefix</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.prefix]>.<VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]>;

		if (<CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]>toffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> (<CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]>toffset</CallParameterAsVariableDescriptorImpl[napile.lang.String.startsWith.toffset]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.lang.String.count]>count</VariableDescriptorImpl[napile.lang.String.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <LocalVariableDescriptor[napile.lang.String.startsWith.pc]>pc</LocalVariableDescriptor[napile.lang.String.startsWith.pc]>))
			return false;

		while (<SimpleMethodDescriptorImpl[napile.lang.Int.dec]>--</SimpleMethodDescriptorImpl[napile.lang.Int.dec]><LocalVariableDescriptor[napile.lang.String.startsWith.pc]>pc</LocalVariableDescriptor[napile.lang.String.startsWith.pc]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0)
			if (<SimpleMethodDescriptorImpl[napile.lang.Array.get]><LocalVariableDescriptor[napile.lang.String.startsWith.ta]>ta</LocalVariableDescriptor[napile.lang.String.startsWith.ta]>[<LocalVariableDescriptor[napile.lang.String.startsWith.to]>to</LocalVariableDescriptor[napile.lang.String.startsWith.to]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Char.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Char.equals]> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><LocalVariableDescriptor[napile.lang.String.startsWith.pa]>pa</LocalVariableDescriptor[napile.lang.String.startsWith.pa]>[<LocalVariableDescriptor[napile.lang.String.startsWith.po]>po</LocalVariableDescriptor[napile.lang.String.startsWith.po]><SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>)
				return false;

		return true;
	}
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>

/~
 ~ Authors
 ~  * VISTALL
 ~/
@<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>("")
final class String : <ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
{
	local val array : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>
	local val count : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
	local val offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	this(val oldArray : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>)
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.this.oldArray">oldArray</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>
		<ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref> <ref to="null">=</ref> 0
		<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.this.oldArray">oldArray</ref>
	}

	this(<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)

	meth getChars(val srcOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val srcEnd : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val desc : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>, val descOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		<ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copy">copy</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.getChars.srcOffset">srcOffset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.getChars.desc">desc</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.getChars.descOffset">descOffset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.getChars.srcEnd">srcEnd</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.getChars.srcOffset">srcOffset</ref>)
	}

	meth toArray() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>> = <ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange">copyOfRange</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)

	meth getBytes() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>
	{
		//TODO [VISTALL] stub
		var byteArray = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>(<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)
		var i = <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>
		while (<ref class="LocalVariableDescriptor" to="napile.lang.String.getBytes.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)
			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="LocalVariableDescriptor" to="napile.lang.String.getBytes.byteArray">byteArray</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.getBytes.i">i</ref>]</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.getBytes.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.toByte">toByte</ref>()
		return <ref class="LocalVariableDescriptor" to="napile.lang.String.getBytes.byteArray">byteArray</ref>
	}

	meth startsWith(val prefix : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.startsWith">startsWith</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.prefix">prefix</ref>, 0);

	meth endsWith(val suffix : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.startsWith">startsWith</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.endsWith.suffix">suffix</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.endsWith.suffix">suffix</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>);

	meth indexOf(val str : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.indexOf">indexOf</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.str">str</ref>, 0)

	meth indexOf(val str : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>, val fromIndex : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.indexOf">indexOf</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.str">str</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.str">str</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.str">str</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref>)

	meth contains(val s : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.indexOf">indexOf</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.contains.s">s</ref>) <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1;

	meth plus(val a : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		var c = <ref class="ConstructorDescriptor" to="napile.lang.StringBuilder.this">StringBuilder</ref>();
		<ref class="LocalVariableDescriptor" to="napile.lang.String.plus.c">c</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="MutableClassDescriptor" to="napile.lang.String">this</ref>
		<ref class="LocalVariableDescriptor" to="napile.lang.String.plus.c">c</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.plus.a">a</ref>
		return <ref class="LocalVariableDescriptor" to="napile.lang.String.plus.c">c</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.toString">toString</ref>()
	}

	override meth size() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>

	override meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.fullyEquals">fullyEquals</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.equals.o">o</ref>))
			return true

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.equals.o">o</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>)
		{
			var n = <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>;
			if (<ref class="LocalVariableDescriptor" to="napile.lang.String.equals.n">n</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)
			{
				var v1 = <ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>
				var v2 = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>
				var i = <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>
				var j = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>
				while (<ref class="LocalVariableDescriptor" to="napile.lang.String.equals.n">n</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.dec">--</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
				{
					if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.lang.String.equals.v1">v1</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.equals.i">i</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.equals">!=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.lang.String.equals.v2">v2</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.equals.j">j</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>)
						return false
				}

				return true
			}
		}
		return false
	}

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref> = <ref class="ConstructorDescriptor" to="napile.lang.String.this">String</ref>(<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>, <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>)

	static meth indexOf(val source : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>,
						val sourceOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>,
						val sourceCount : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>,
						val target : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Char">Char</ref>>,
						val targetOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>,
						val targetCount : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>,
						val fromIndex : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
	{
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">>=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceCount">sourceCount</ref>)
			return if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetCount">targetCount</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)  <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceCount">sourceCount</ref> else <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1;

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0)
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref> <ref to="null">=</ref> 0;

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetCount">targetCount</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			return <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref>;

		var first  = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.target">target</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetOffset">targetOffset</ref>]</ref>;
		var max = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceOffset">sourceOffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceCount">sourceCount</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetCount">targetCount</ref>);

		var i = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceOffset">sourceOffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.fromIndex">fromIndex</ref>;
		while(<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.max">max</ref>)
		{
			if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.source">source</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.equals">!=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.first">first</ref>)
				while (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref><ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.max">max</ref> <ref to="null">&&</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.source">source</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.equals">!=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.first">first</ref>);

			if (<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.max">max</ref>)
			{
				var j = <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> 1;
				var end = <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.j">j</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetCount">targetCount</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> 1;
				var k = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.targetOffset">targetOffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> 1;
				while (<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.j">j</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.end">end</ref> <ref to="null">&&</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.source">source</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.j">j</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.equals">==</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.target">target</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.k">k</ref>]</ref>)
				{
					<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.j">j</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
					<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.k">k</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
				}

				if (<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.j">j</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.end">end</ref>)
					return <ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.indexOf.sourceOffset">sourceOffset</ref>;
			}
			<ref class="LocalVariableDescriptor" to="napile.lang.String.indexOf.i">i</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
		}
		return <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1;
	}

	local meth startsWith(val prefix : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>, val toffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		var ta = <ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>;
		var to = <ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.toffset">toffset</ref>;
		var pa = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.prefix">prefix</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.array">array</ref>;
		var po = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.prefix">prefix</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.offset">offset</ref>;
		var pc = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.prefix">prefix</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref>;

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.toffset">toffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.String.startsWith.toffset">toffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.pc">pc</ref>))
			return false;

		while (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.dec">--</ref><ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.pc">pc</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">>=</ref> 0)
			if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.ta">ta</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.to">to</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Char.equals">!=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.pa">pa</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.String.startsWith.po">po</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>)
				return false;

		return true;
	}
}
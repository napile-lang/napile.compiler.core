package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="MutableClassDescriptor" to="napile.util.MathUtil">MathUtil</ref>

/**
 * @author VISTALL
 */
util class ArrayUtil
{
	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth copyOf<E>(val oldArray : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.E">E</ref>>, val newSize : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.E">E</ref>>
	{
		var c1 = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.E">E</ref>>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.newSize">newSize</ref>)
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copy">copy</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.oldArray">oldArray</ref>, 0, <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOf.c1">c1</ref>, 0, <ref class="MutableClassDescriptor" to="napile.util.MathUtil">MathUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.util.MathUtil.min">min</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.oldArray">oldArray</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOf.newSize">newSize</ref>));
		return <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOf.c1">c1</ref>
	}

	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth copyOfRange<E>(val original : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.E">E</ref>>, val from : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val to : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.E">E</ref>>
	{
		var newLength = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.to">to</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.from">from</ref>;

		var c = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.E">E</ref>>(<ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOfRange.newLength">newLength</ref>)
		if(<ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOfRange.newLength">newLength</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			return <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOfRange.c">c</ref>

		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copy">copy</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.original">original</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.from">from</ref>, <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOfRange.c">c</ref>, 0, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange.to">to</ref>)

		return <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copyOfRange.c">c</ref>
	}

	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth copy<E>(val src : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copy.E">E</ref>>, val srcOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val desc : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.copy.E">E</ref>>, val descOffset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		var i = 0
		while (<ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copy.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copy.length">length</ref>)
		{
			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copy.desc">desc</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copy.descOffset">descOffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copy.i">i</ref>]</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copy.src">src</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.copy.srcOffset">srcOffset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copy.i">i</ref>]</ref>
			<ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.copy.i">i</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
		}
	}

	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth contains<E>(val src : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.contains.E">E</ref>>, val object : <ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayUtil.contains.E">E</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		for(e in <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.contains.src">src</ref>)
			if(<ref class="LocalVariableDescriptor" to="napile.lang.ArrayUtil.contains.e">e</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.ArrayUtil.contains.object">object</ref>)
				return true;
		return false;
	}
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.Iterator">Iterator</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>

/**
 * @author VISTALL
 */
class ArrayIterator<E> : <ref class="MutableClassDescriptor" to="napile.collection.Iterator">Iterator</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayIterator.E">E</ref>>
{
	local var index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0
	local val array : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayIterator.E">E</ref>>

	this(<ref class="VariableDescriptorImpl" to="napile.lang.ArrayIterator.array">array</ref>)

	override meth next() : <ref class="TypeParameterDescriptorImpl" to="napile.lang.ArrayIterator.E">E</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.lang.ArrayIterator.array">array</ref>[<ref class="VariableDescriptorImpl" to="napile.lang.ArrayIterator.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>

	override meth hasNext() : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = <ref class="VariableDescriptorImpl" to="napile.lang.ArrayIterator.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> <ref class="VariableDescriptorImpl" to="napile.lang.ArrayIterator.array">array</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>

	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	override meth remove()
	{
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
}
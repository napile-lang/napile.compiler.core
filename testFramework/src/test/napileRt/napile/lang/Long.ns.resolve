package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.condition">condition</ref>.<ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>

/**
 * @author VISTALL
 */
@<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>(0.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toLong">toLong</ref>())
final class Long : <ref class="MutableClassDescriptor" to="napile.lang.Number">Number</ref>
{
	static val MIN_VALUE : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = 0x8000000000000000
	static val MAX_VALUE : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = 0x7FFFFFFFFFFFFFFF

	local this()

	/*meth rangeTo(val value : Long) : Array<Long>
	{
		var array = Array<Long>(value - this - 1)

		var index = 0
		var me = this
		while (index != array.length)
			array[index ++] = me ++

		return array
	}   */

	override native meth toByte() : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>

	override native meth toShort() : <ref class="MutableClassDescriptor" to="napile.lang.Short">Short</ref>

	override native meth toInt() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	override meth toLong() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = <ref class="MutableClassDescriptor" to="napile.lang.Long">this</ref>

	override native meth toFloat() : <ref class="MutableClassDescriptor" to="napile.lang.Float">Float</ref>

	override native meth toDouble() : <ref class="MutableClassDescriptor" to="napile.lang.Double">Double</ref>

	native meth plus() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth minus() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth inc() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth dec() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	// bit operators
	native meth bitNot() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitXor(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitOr(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitAnd(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitShiftLeft(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitShiftRight(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth bitShiftRightZ(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Short">Short</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth plus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth times(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth minus(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth mod(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth div(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Short">Short</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	native meth compareTo(val value : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.condition.CompareResult">CompareResult</ref>

	override native meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	override native meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
}
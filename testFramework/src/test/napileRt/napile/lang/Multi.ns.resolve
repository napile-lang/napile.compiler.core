package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

/**
 * @author VISTALL
 */
class Multi
{
	local val data : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>

	this(val length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		<ref class="VariableDescriptorImpl" to="napile.lang.Multi.data">data</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Multi.this.length">length</ref>)
	}

	meth set(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val value : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?)
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="VariableDescriptorImpl" to="napile.lang.Multi.data">data</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Multi.set.index">index</ref>]</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Multi.set.value">value</ref>
	}

	meth get(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>? = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.lang.Multi.data">data</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Multi.get.index">index</ref>]</ref>

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		var i = 0
		var b = <ref class="ConstructorDescriptor" to="napile.lang.StringBuilder.this">StringBuilder</ref>()
		<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '['

		for (c in <ref class="VariableDescriptorImpl" to="napile.lang.Multi.data">data</ref>)
		{
			if(<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
				<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ', '
			<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
			<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.c">c</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.toString">toString</ref>()
		}
		<ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ']'
		return <ref class="LocalVariableDescriptor" to="napile.lang.Multi.toString.b">b</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.toString">toString</ref>()
	}
}
package napile.lang

import napile.logging.Logger

/**
 * @author VISTALL
 */
class Exception
{
	final val message : String?

	final val stack : Array<StackTraceElement>

	this(message = null)
	{
		stack = generateStack();
	}

	local native meth generateStack() : Array<StackTraceElement>

	meth printStackTrace(val b : StringBuilder)
	{
		b += getClass().name
		if(message != null)
		{
			b += " : "
			b += message
		}

		b += "<VALID_STRING_ESCAPE>\n</VALID_STRING_ESCAPE>"
		for(i in stack)
		{
			b += "<VALID_STRING_ESCAPE>\t</VALID_STRING_ESCAPE>at "
			b += i
			b += "<VALID_STRING_ESCAPE>\n</VALID_STRING_ESCAPE>"
		}
	}

	meth printStackTrace()
	{
		Logger.System.error(exception = this)
	}
}
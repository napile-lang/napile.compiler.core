package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.lang">lang</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.Iterator">Iterator</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.Iterable">Iterable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="MutableClassDescriptor" to="napile.util.TypeUtil">TypeUtil</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>

/**
 * @author VISTALL
 */
final class Array<E> : <ref class="MutableClassDescriptor" to="napile.collection.Iterable">Iterable</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>> & <ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
{
	val length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	this(<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.init">init</ref>()

		// dont do anything if is empty array
		if(<ref class="CallParameterAsReferenceDescriptorImpl" to="napile.lang.Array.this.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
		{
			val defaultValue : <ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref> = <ref class="MutableClassDescriptor" to="napile.util.TypeUtil">TypeUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.util.TypeUtil.getDefaultValue">getDefaultValue</ref>(false);
			for(c in 0<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.rangeTo">..</ref><ref class="CallParameterAsReferenceDescriptorImpl" to="napile.lang.Array.this.length">length</ref>)
				<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set">set</ref>(<ref class="LocalVariableDescriptor" to="napile.lang.Array.this.c">c</ref>, <ref class="LocalVariableDescriptor" to="napile.lang.Array.this.defaultValue">defaultValue</ref>)
		}
	}

	override meth size() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>

	native meth init()

	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	meth set(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val value : <ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref>
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.set.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.set.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">>=</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.ArrayIndexOutOfBoundsException.this">ArrayIndexOutOfBoundsException</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.set.index">index</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toString">toString</ref>());

		return <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set0">set0</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.set.index">index</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.set.value">value</ref>)
	}

	local native meth set0(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val value : <ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref>

	meth get(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.get.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.get.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">>=</ref> <ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.ArrayIndexOutOfBoundsException.this">ArrayIndexOutOfBoundsException</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.get.index">index</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toString">toString</ref>());

		return <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get0">get0</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.get.index">index</ref>)
	}

	local native meth get0(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>

	override meth iterator() : @<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref> <ref class="MutableClassDescriptor" to="napile.collection.Iterator">Iterator</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>> = <ref class="ConstructorDescriptor" to="napile.lang.ArrayIterator.this">ArrayIterator</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>>(<ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref>)

	override meth clone() : <ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref> = <ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange">copyOfRange</ref>(<ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref>, 0, <ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)

	override meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.equals.o">o</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.lang.Array.E">E</ref>>)
		{
			if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.equals.o">o</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>() <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>())
			{
				return false
			}

			for(i in 0<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.rangeTo">..</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>())
			{
				if(<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.lang.Array.equals.o">o</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.Array.equals.i">i</ref>]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.equals">!=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="MutableClassDescriptor" to="napile.lang.Array">this</ref>[<ref class="LocalVariableDescriptor" to="napile.lang.Array.equals.i">i</ref>]</ref>)
				{
					return false
				}
			}

			return true
		}
		else
		{
			return false
		}
	}
}
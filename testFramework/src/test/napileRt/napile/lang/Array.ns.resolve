<null>package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.lang]>lang</PackageDescriptorImpl[napile.lang]></null>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.Iterator]>Iterator</MutableClassDescriptor[napile.collection.Iterator]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.Iterable]>Iterable</MutableClassDescriptor[napile.collection.Iterable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.Sizeable]>Sizeable</MutableClassDescriptor[napile.collection.Sizeable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.reflect]>reflect</PackageDescriptorImpl[napile.reflect]>.<MutableClassDescriptor[napile.reflect.Type]>Type</MutableClassDescriptor[napile.reflect.Type]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.InheritImmutable]>InheritImmutable</MutableClassDescriptor[napile.annotation.InheritImmutable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.ImmutableTarget]>ImmutableTarget</MutableClassDescriptor[napile.annotation.ImmutableTarget]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.util]>util</PackageDescriptorImpl[napile.util]>.<MutableClassDescriptor[napile.util.TypeUtil]>TypeUtil</MutableClassDescriptor[napile.util.TypeUtil]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<MutableClassDescriptor[napile.logging.Logger]>Logger</MutableClassDescriptor[napile.logging.Logger]>

/**
 * @author VISTALL
 */
final class Array<E> : <MutableClassDescriptor[napile.collection.Iterable]>Iterable</MutableClassDescriptor[napile.collection.Iterable]><<TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>> & <MutableClassDescriptor[napile.collection.Sizeable]>Sizeable</MutableClassDescriptor[napile.collection.Sizeable]>
{
	val length : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>

	this(<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>)
	{
		<SimpleMethodDescriptorImpl[napile.lang.Array.init]>init</SimpleMethodDescriptorImpl[napile.lang.Array.init]>()

		// dont do anything if is empty array
		if(<CallParameterAsReferenceDescriptorImpl[napile.lang.Array.this.length]>length</CallParameterAsReferenceDescriptorImpl[napile.lang.Array.this.length]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
		{
			val defaultValue : <TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]> = <MutableClassDescriptor[napile.util.TypeUtil]>TypeUtil</MutableClassDescriptor[napile.util.TypeUtil]>.<SimpleMethodDescriptorImpl[napile.util.TypeUtil.getDefaultValue]>getDefaultValue</SimpleMethodDescriptorImpl[napile.util.TypeUtil.getDefaultValue]>(false);
			for(c in 0<SimpleMethodDescriptorImpl[napile.lang.Int.rangeTo]>..</SimpleMethodDescriptorImpl[napile.lang.Int.rangeTo]><CallParameterAsReferenceDescriptorImpl[napile.lang.Array.this.length]>length</CallParameterAsReferenceDescriptorImpl[napile.lang.Array.this.length]>)
				<SimpleMethodDescriptorImpl[napile.lang.Array.set]>set</SimpleMethodDescriptorImpl[napile.lang.Array.set]>(<LocalVariableDescriptor[napile.lang.Array.this.c]>c</LocalVariableDescriptor[napile.lang.Array.this.c]>, <LocalVariableDescriptor[napile.lang.Array.this.defaultValue]>defaultValue</LocalVariableDescriptor[napile.lang.Array.this.defaultValue]>)
		}
	}

	override meth size() : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = <VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>

	native meth init()

	@<MutableClassDescriptor[napile.annotation.ImmutableTarget]>ImmutableTarget</MutableClassDescriptor[napile.annotation.ImmutableTarget]>
	meth set(val index : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, val value : <TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>) : <MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]>
	{
		if(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>)
			throw <ConstructorDescriptor[napile.lang.ArrayIndexOutOfBoundsException.this]>ArrayIndexOutOfBoundsException</ConstructorDescriptor[napile.lang.ArrayIndexOutOfBoundsException.this]>(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>.<SimpleMethodDescriptorImpl[napile.lang.Int.toString]>toString</SimpleMethodDescriptorImpl[napile.lang.Int.toString]>());

		return <SimpleMethodDescriptorImpl[napile.lang.Array.set0]>set0</SimpleMethodDescriptorImpl[napile.lang.Array.set0]>(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.index]>, <CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.value]>value</CallParameterAsVariableDescriptorImpl[napile.lang.Array.set.value]>)
	}

	local native meth set0(val index : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, val value : <TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>) : <MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]>

	meth get(val index : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>
	{
		if(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>)
			throw <ConstructorDescriptor[napile.lang.ArrayIndexOutOfBoundsException.this]>ArrayIndexOutOfBoundsException</ConstructorDescriptor[napile.lang.ArrayIndexOutOfBoundsException.this]>(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>.<SimpleMethodDescriptorImpl[napile.lang.Int.toString]>toString</SimpleMethodDescriptorImpl[napile.lang.Int.toString]>());

		return <SimpleMethodDescriptorImpl[napile.lang.Array.get0]>get0</SimpleMethodDescriptorImpl[napile.lang.Array.get0]>(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>index</CallParameterAsVariableDescriptorImpl[napile.lang.Array.get.index]>)
	}

	local native meth get0(val index : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>

	override meth iterator() : @<MutableClassDescriptor[napile.annotation.InheritImmutable]>InheritImmutable</MutableClassDescriptor[napile.annotation.InheritImmutable]> <MutableClassDescriptor[napile.collection.Iterator]>Iterator</MutableClassDescriptor[napile.collection.Iterator]><<TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>> = <ConstructorDescriptor[napile.lang.ArrayIterator.this]>ArrayIterator</ConstructorDescriptor[napile.lang.ArrayIterator.this]><<TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>>(<MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]>)

	override meth clone() : <MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]> = <MutableClassDescriptor[napile.lang.ArrayUtil]>ArrayUtil</MutableClassDescriptor[napile.lang.ArrayUtil]>.<SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copyOfRange]>copyOfRange</SimpleMethodDescriptorImpl[napile.lang.ArrayUtil.copyOfRange]>(<MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]>, 0, <VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>)

	override meth equals(val o : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>?) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>
	{
		if(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]> <null>is</null> <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<TypeParameterDescriptorImpl[napile.lang.Array.E]>E</TypeParameterDescriptorImpl[napile.lang.Array.E]>>)
		{
			if(<CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]>.<SimpleMethodDescriptorImpl[napile.lang.Array.size]>size</SimpleMethodDescriptorImpl[napile.lang.Array.size]>() <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> <SimpleMethodDescriptorImpl[napile.lang.Array.size]>size</SimpleMethodDescriptorImpl[napile.lang.Array.size]>())
			{
				return false
			}

			for(i in 0<SimpleMethodDescriptorImpl[napile.lang.Int.rangeTo]>..</SimpleMethodDescriptorImpl[napile.lang.Int.rangeTo]><SimpleMethodDescriptorImpl[napile.lang.Array.size]>size</SimpleMethodDescriptorImpl[napile.lang.Array.size]>())
			{
				if(<SimpleMethodDescriptorImpl[napile.lang.Array.get]><CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.lang.Array.equals.o]>[<LocalVariableDescriptor[napile.lang.Array.equals.i]>i</LocalVariableDescriptor[napile.lang.Array.equals.i]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Any.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Any.equals]> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><MutableClassDescriptor[napile.lang.Array]>this</MutableClassDescriptor[napile.lang.Array]>[<LocalVariableDescriptor[napile.lang.Array.equals.i]>i</LocalVariableDescriptor[napile.lang.Array.equals.i]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>)
				{
					return false
				}
			}

			return true
		}
		else
		{
			return false
		}
	}
}
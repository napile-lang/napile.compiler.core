/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl">impl</ref>.<ref class="MutableClassDescriptor" to="napile.logging.impl.LoggerImpl">LoggerImpl</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension">extension</ref>.<ref class="MutableClassDescriptor" to="napile.module.extension.ExtensionPointName">ExtensionPointName</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension">extension</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension.descriptors">descriptors</ref>.<ref class="MutableClassDescriptor" to="napile.module.extension.descriptors.SimpleFactoryExtensionWithId">SimpleFactoryExtensionWithId</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.IterableUtil">IterableUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.IterableUtil.select">select</ref>

/**
 * @author VISTALL
 */
abstract class Logger
{
	static val EP_NAME : <ref class="MutableClassDescriptor" to="napile.module.extension.ExtensionPointName">ExtensionPointName</ref><<ref class="MutableClassDescriptor" to="napile.module.extension.descriptors.SimpleFactoryExtensionWithId">SimpleFactoryExtensionWithId</ref><<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>>> = <ref class="ConstructorDescriptor" to="napile.module.extension.ExtensionPointName.this">ExtensionPointName</ref>('napile.lang', 'logger')

	static val System : <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref> = <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.getLogger">getLogger</ref>('System');

	static meth getLogger(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>
	{
		// select extension by name
		val extension = <ref class="VariableDescriptorImpl" to="napile.logging.Logger.EP_NAME">EP_NAME</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.module.extension.ExtensionPointName.getValues">getValues</ref>().<ref class="SimpleMethodDescriptorImpl" to="napile.collection.IterableUtil.select">select</ref>{<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.getLogger.@noname.value">value</ref>.<ref class="VariableDescriptorImpl" to="napile.module.extension.descriptors.SimpleFactoryExtensionWithId.id">id</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.getLogger.name">name</ref>}

		if(<ref class="LocalVariableDescriptor" to="napile.logging.Logger.getLogger.extension">extension</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.module.extension.descriptors.SimpleFactoryExtensionWithId.equals">!=</ref> null)
		{
			return <ref class="LocalVariableDescriptor" to="napile.logging.Logger.getLogger.extension">extension</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.module.extension.descriptors.SimpleFactoryExtensionWithId.create">create</ref>()
		}

		//TODO [VISTALL] if no extension get by '*'
		return <ref class="ConstructorDescriptor" to="napile.logging.impl.LoggerImpl.this">LoggerImpl</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.getLogger.name">name</ref>)
	}

	static meth getLogger(val clazz : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>) : <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.getLogger">getLogger</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.getLogger.clazz">clazz</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Class.name">name</ref>)

	this()

	meth info(val message : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>? = null, val exception : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>? = null) : <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.log">log</ref>(<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingLevel.INFO">INFO</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.info.message">message</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.info.exception">exception</ref>)

	meth warn(val message : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>? = null, val exception : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>? = null) : <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.log">log</ref>(<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingLevel.WARN">WARN</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.warn.message">message</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.warn.exception">exception</ref>)

	meth error(val message : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>? = null, val exception : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>? = null) : <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.logging.Logger.log">log</ref>(<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingLevel.ERROR">ERROR</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.error.message">message</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.Logger.error.exception">exception</ref>)

	meth log(val level : <ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>, val message : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>? = null, val exception : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>? = null)
}
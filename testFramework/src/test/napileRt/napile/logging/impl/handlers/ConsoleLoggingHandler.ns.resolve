/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

<null>package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<PackageDescriptorImpl[napile.logging.impl]>impl</PackageDescriptorImpl[napile.logging.impl]>.<PackageDescriptorImpl[napile.logging.impl.handlers]>handlers</PackageDescriptorImpl[napile.logging.impl.handlers]></null>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<MutableClassDescriptor[napile.logging.LoggingHandler]>LoggingHandler</MutableClassDescriptor[napile.logging.LoggingHandler]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<MutableClassDescriptor[napile.logging.LoggingMessage]>LoggingMessage</MutableClassDescriptor[napile.logging.LoggingMessage]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.io]>io</PackageDescriptorImpl[napile.io]>.<MutableClassDescriptor[napile.io.FileOutputStream]>FileOutputStream</MutableClassDescriptor[napile.io.FileOutputStream]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.io]>io</PackageDescriptorImpl[napile.io]>.<MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<MutableClassDescriptor[napile.logging.LoggingLevel]>LoggingLevel</MutableClassDescriptor[napile.logging.LoggingLevel]>

/**
 * @author VISTALL
 */
class ConsoleLoggingHandler : <MutableClassDescriptor[napile.logging.LoggingHandler]>LoggingHandler</MutableClassDescriptor[napile.logging.LoggingHandler]>
{
	local val info = <ConstructorDescriptor[napile.io.FileOutputStream.this]>FileOutputStream</ConstructorDescriptor[napile.io.FileOutputStream.this]>(<MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>.<VariableDescriptorImpl[napile.io.FileDescriptor.systemOut]>systemOut</VariableDescriptorImpl[napile.io.FileDescriptor.systemOut]>)
	local val error = <ConstructorDescriptor[napile.io.FileOutputStream.this]>FileOutputStream</ConstructorDescriptor[napile.io.FileOutputStream.this]>(<MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>.<VariableDescriptorImpl[napile.io.FileDescriptor.systemErr]>systemErr</VariableDescriptorImpl[napile.io.FileDescriptor.systemErr]>)

	this() : <MutableClassDescriptor[napile.logging.LoggingHandler]>LoggingHandler</MutableClassDescriptor[napile.logging.LoggingHandler]>()

	override meth log(val message: <MutableClassDescriptor[napile.logging.LoggingMessage]>LoggingMessage</MutableClassDescriptor[napile.logging.LoggingMessage]>)
	{
		val b = <ConstructorDescriptor[napile.lang.StringBuilder.this]>StringBuilder</ConstructorDescriptor[napile.lang.StringBuilder.this]>()

		<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>b</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> <CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>message</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>.<VariableDescriptorImpl[napile.logging.LoggingMessage.message]>message</VariableDescriptorImpl[napile.logging.LoggingMessage.message]>

		if(<CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>message</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>.<VariableDescriptorImpl[napile.logging.LoggingMessage.exception]>exception</VariableDescriptorImpl[napile.logging.LoggingMessage.exception]> <SimpleMethodDescriptorImpl[napile.lang.Exception.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Exception.equals]> null)
		{
			<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>b</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> " "
			<CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>message</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>.<VariableDescriptorImpl[napile.logging.LoggingMessage.exception]>exception</VariableDescriptorImpl[napile.logging.LoggingMessage.exception]><null>!!</null>.<SimpleMethodDescriptorImpl[napile.lang.Exception.printStackTrace]>printStackTrace</SimpleMethodDescriptorImpl[napile.lang.Exception.printStackTrace]>(<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>b</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>)
		}

		<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>b</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> "\n"

		<SimpleMethodDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes]>writeBytes</SimpleMethodDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes]>(<CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>message</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.log.message]>, <LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>b</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.log.b]>.<SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>toString</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>())
	}

	local meth writeBytes(val message : <MutableClassDescriptor[napile.logging.LoggingMessage]>LoggingMessage</MutableClassDescriptor[napile.logging.LoggingMessage]>, val s : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>)
	{
		val bytes = <CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.s]>s</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.s]>.<SimpleMethodDescriptorImpl[napile.lang.String.getBytes]>getBytes</SimpleMethodDescriptorImpl[napile.lang.String.getBytes]>()
		when(<CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.message]>message</CallParameterAsVariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.message]>.<VariableDescriptorImpl[napile.logging.LoggingMessage.level]>level</VariableDescriptorImpl[napile.logging.LoggingMessage.level]>)
		{
			<MutableClassDescriptor[napile.logging.LoggingLevel]>LoggingLevel</MutableClassDescriptor[napile.logging.LoggingLevel]>.<VariableDescriptorImpl[napile.logging.LoggingLevel.ERROR]>ERROR</VariableDescriptorImpl[napile.logging.LoggingLevel.ERROR]> -> <VariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.error]>error</VariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.error]>.<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.write]>write</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.write]>(<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes]>bytes</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes]>)
			else -> <VariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.info]>info</VariableDescriptorImpl[napile.logging.impl.handlers.ConsoleLoggingHandler.info]>.<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.write]>write</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.write]>(<LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes]>bytes</LocalVariableDescriptor[napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes]>)
		}
	}
}
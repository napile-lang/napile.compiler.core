/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl">impl</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl.handlers">handlers</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingMessage">LoggingMessage</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.FileOutputStream">FileOutputStream</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>

/**
 * @author VISTALL
 */
class ConsoleLoggingHandler : <ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>
{
	local val info = <ref class="ConstructorDescriptor" to="napile.io.FileOutputStream.this">FileOutputStream</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.systemOut">systemOut</ref>)
	local val error = <ref class="ConstructorDescriptor" to="napile.io.FileOutputStream.this">FileOutputStream</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.systemErr">systemErr</ref>)

	this() : <ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>()

	override meth log(val message: <ref class="MutableClassDescriptor" to="napile.logging.LoggingMessage">LoggingMessage</ref>)
	{
		val b = <ref class="ConstructorDescriptor" to="napile.lang.StringBuilder.this">StringBuilder</ref>()

		<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.message">message</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingMessage.message">message</ref>

		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.message">message</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingMessage.exception">exception</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Exception.equals">!=</ref> null)
		{
			<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ' '
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.message">message</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingMessage.exception">exception</ref><ref to="null">!!</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Exception.printStackTrace">printStackTrace</ref>(<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.b">b</ref>)
		}

		<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.b">b</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '\n'

		<ref class="SimpleMethodDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes">writeBytes</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.message">message</ref>, <ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.log.b">b</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.toString">toString</ref>())
	}

	local meth writeBytes(val message : <ref class="MutableClassDescriptor" to="napile.logging.LoggingMessage">LoggingMessage</ref>, val s : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>)
	{
		val bytes = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.s">s</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.getBytes">getBytes</ref>()
		when(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.message">message</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingMessage.level">level</ref>)
		{
			<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>.<ref class="VariableDescriptorImpl" to="napile.logging.LoggingLevel.ERROR">ERROR</ref> -> <ref class="VariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.error">error</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.write">write</ref>(<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes">bytes</ref>)
			else -> <ref class="VariableDescriptorImpl" to="napile.logging.impl.handlers.ConsoleLoggingHandler.info">info</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.write">write</ref>(<ref class="LocalVariableDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.writeBytes.bytes">bytes</ref>)
		}
	}
}
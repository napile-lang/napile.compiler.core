/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package napile.logging.impl.handlers

import napile.logging.LoggingHandler
import napile.logging.LoggingMessage
import napile.io.FileOutputStream
import napile.io.FileDescriptor
import napile.logging.LoggingLevel

/**
 * @author VISTALL
 */
class ConsoleLoggingHandler : LoggingHandler
{
	local val info = FileOutputStream(FileDescriptor.systemOut)
	local val error = FileOutputStream(FileDescriptor.systemErr)

	this() : LoggingHandler()

	override meth log(val message: LoggingMessage)
	{
		val b = StringBuilder()

		b += message.message

		if(message.exception != null)
		{
			b += " "
			message.exception!!.printStackTrace(b)
		}

		b += "\n"

		writeBytes(message, b.toString())
	}

	local meth writeBytes(val message : LoggingMessage, val s : String)
	{
		val bytes = s.getBytes()
		when(message.level)
		{
			LoggingLevel.ERROR -> error.write(bytes)
			else -> info.write(bytes)
		}
	}
}
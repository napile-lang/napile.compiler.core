/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl">impl</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.List">List</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.ArrayList">ArrayList</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.LoggingMessage">LoggingMessage</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl">impl</ref>.<ref class="PackageDescriptorImpl" to="napile.logging.impl.handlers">handlers</ref>.<ref class="MutableClassDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler">ConsoleLoggingHandler</ref>

/**
 * @author VISTALL
 */
class LoggerImpl : <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>
{
	local val handlers : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>> = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref><<ref class="MutableClassDescriptor" to="napile.logging.LoggingHandler">LoggingHandler</ref>>()

	this(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>()
	{
		<ref class="VariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.handlers">handlers</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.add">add</ref>(<ref class="ConstructorDescriptor" to="napile.logging.impl.handlers.ConsoleLoggingHandler.this">ConsoleLoggingHandler</ref>())
	}

	override meth log(val level : <ref class="MutableClassDescriptor" to="napile.logging.LoggingLevel">LoggingLevel</ref>, val message : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?, val exception : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>?)
	{
		val loggingMessage = <ref class="ConstructorDescriptor" to="napile.logging.LoggingMessage.this">LoggingMessage</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.log.level">level</ref>, if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.log.message">message</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.log.message">message</ref> else <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.log.message">message</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.toString">toString</ref>(), <ref class="CallParameterAsVariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.log.exception">exception</ref>)

		for(h in <ref class="VariableDescriptorImpl" to="napile.logging.impl.LoggerImpl.handlers">handlers</ref>)
			<ref class="LocalVariableDescriptor" to="napile.logging.impl.LoggerImpl.log.h">h</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.logging.LoggingHandler.log">log</ref>(<ref class="LocalVariableDescriptor" to="napile.logging.impl.LoggerImpl.log.loggingMessage">loggingMessage</ref>)
	}
}
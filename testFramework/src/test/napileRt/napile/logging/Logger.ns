/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package napile.logging

import napile.reflect.Class
import napile.logging.impl.LoggerImpl
import napile.module.extension.ExtensionPointName
import napile.module.extension.descriptors.SimpleFactoryExtensionWithId
import napile.collection.IterableUtil.select

/**
 * @author VISTALL
 */
abstract class Logger
{
	static val EP_NAME : ExtensionPointName<SimpleFactoryExtensionWithId<Logger>> = ExtensionPointName("napile.lang", "logger")

	static val System : Logger = Logger.getLogger("System");

	static meth getLogger(val name : String) : Logger
	{
		// select extension by name
		val extension = EP_NAME.getValues().select{value.id == name}

		if(extension != null)
		{
			return extension.create()
		}

		//TODO [VISTALL] if no extension get by '*'
		return LoggerImpl(name)
	}

	static meth getLogger(val clazz : Class<Any?>) : Logger = getLogger(clazz.name)

	this()

	meth info(val message : Any? = null, val exception : Exception? = null) : Null = log(LoggingLevel.INFO, message, exception)

	meth warn(val message : Any? = null, val exception : Exception? = null) : Null = log(LoggingLevel.WARN, message, exception)

	meth error(val message : Any? = null, val exception : Exception? = null) : Null = log(LoggingLevel.ERROR, message, exception)

	meth log(val level : LoggingLevel, val message : Any? = null, val exception : Exception? = null)
}
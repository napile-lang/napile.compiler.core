/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package napile.util

import napile.reflect.Type

/~
 ~ Authors
 ~ * VISTALL
 ~/
util class TypeUtil
{
	meth getDefaultValue<E>(val throwIfNotFound : Bool) : E
	{
		val type = typeOf(E)
		if(type.nullable)
			return getNullAsNotNull()
		else
		{
			val def = type.defaultValue
			if(def == null)
			{
				if(throwIfNotFound)
					throw IllegalArgumentException("cant find default value on type " + type)
				else
					return getInvalidNotNull()
			}
			else
				return def
		}
	}

	/~
	 ~ Return null as notNull type.
	 ~ This is a hack to use null - for return if type constructor is type parameter
	 ~/
	local native meth getNullAsNotNull<E>() : E

	local native meth getInvalidNotNull<E>() : E
}
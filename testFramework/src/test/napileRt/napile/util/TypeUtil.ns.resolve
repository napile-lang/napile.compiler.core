/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
util class TypeUtil
{
	meth getDefaultValue<E>(val throwIfNotFound : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.util.TypeUtil.getDefaultValue.E">E</ref>
	{
		val type = typeOf(<ref class="TypeParameterDescriptorImpl" to="napile.util.TypeUtil.getDefaultValue.E">E</ref>)
		if(<ref class="LocalVariableDescriptor" to="napile.util.TypeUtil.getDefaultValue.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.nullable">nullable</ref>)
			return <ref class="SimpleMethodDescriptorImpl" to="napile.util.TypeUtil.getNullAsNotNull">getNullAsNotNull</ref>()
		else
		{
			val def = <ref class="LocalVariableDescriptor" to="napile.util.TypeUtil.getDefaultValue.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.defaultValue">defaultValue</ref>
			if(<ref class="LocalVariableDescriptor" to="napile.util.TypeUtil.getDefaultValue.def">def</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.equals">==</ref> null)
			{
				if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.util.TypeUtil.getDefaultValue.throwIfNotFound">throwIfNotFound</ref>)
					throw <ref class="ConstructorDescriptor" to="napile.lang.IllegalArgumentException.this">IllegalArgumentException</ref>("cant find default value on type " <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.plus">+</ref> <ref class="LocalVariableDescriptor" to="napile.util.TypeUtil.getDefaultValue.type">type</ref>)
				else
					return <ref class="SimpleMethodDescriptorImpl" to="napile.util.TypeUtil.getInvalidNotNull">getInvalidNotNull</ref>()
			}
			else
				return <ref class="LocalVariableDescriptor" to="napile.util.TypeUtil.getDefaultValue.def">def</ref>
		}
	}

	/~
	 ~ Return null as notNull type.
	 ~ This is a hack to use null - for return if type constructor is type parameter
	 ~/
	local native meth getNullAsNotNull<E>() : <ref class="TypeParameterDescriptorImpl" to="napile.util.TypeUtil.getNullAsNotNull.E">E</ref>

	local native meth getInvalidNotNull<E>() : <ref class="TypeParameterDescriptorImpl" to="napile.util.TypeUtil.getInvalidNotNull.E">E</ref>
}
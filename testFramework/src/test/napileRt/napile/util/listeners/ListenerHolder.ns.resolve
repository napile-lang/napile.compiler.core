/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.util]>util</PackageDescriptorImpl[napile.util]>.<PackageDescriptorImpl[napile.util.listeners]>listeners</PackageDescriptorImpl[napile.util.listeners]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.List]>List</MutableClassDescriptor[napile.collection.List]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>.<MutableClassDescriptor[napile.collection.ArrayList]>ArrayList</MutableClassDescriptor[napile.collection.ArrayList]>

/~
 ~ Authors
 ~ * VISTALL
 ~/
final class ListenerHolder<E>
{
	local val listeners : <MutableClassDescriptor[napile.collection.List]>List</MutableClassDescriptor[napile.collection.List]><{(val e : <TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>E</TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>) -> <MutableClassDescriptor[napile.lang.Null]>Null</MutableClassDescriptor[napile.lang.Null]>}> = <ConstructorDescriptor[napile.collection.ArrayList.this]>ArrayList</ConstructorDescriptor[napile.collection.ArrayList.this]>()

	this()

	meth plus(val impl : {(val e : <TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>E</TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>) -> <MutableClassDescriptor[napile.lang.Null]>Null</MutableClassDescriptor[napile.lang.Null]>}) : <MutableClassDescriptor[napile.util.listeners.ListenerHolder]>this</MutableClassDescriptor[napile.util.listeners.ListenerHolder]>
	{
		<VariableDescriptorImpl[napile.util.listeners.ListenerHolder.listeners]>listeners</VariableDescriptorImpl[napile.util.listeners.ListenerHolder.listeners]>.<SimpleMethodDescriptorImpl[napile.collection.List.add]>add</SimpleMethodDescriptorImpl[napile.collection.List.add]>(<CallParameterAsVariableDescriptorImpl[napile.util.listeners.ListenerHolder.plus.impl]>impl</CallParameterAsVariableDescriptorImpl[napile.util.listeners.ListenerHolder.plus.impl]>)
		return <MutableClassDescriptor[napile.util.listeners.ListenerHolder]>this</MutableClassDescriptor[napile.util.listeners.ListenerHolder]>
	}

	meth fire(val event : <TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>E</TypeParameterDescriptorImpl[napile.util.listeners.ListenerHolder.E]>)
	{
		for(l in <VariableDescriptorImpl[napile.util.listeners.ListenerHolder.listeners]>listeners</VariableDescriptorImpl[napile.util.listeners.ListenerHolder.listeners]>)
		{
			<LocalVariableDescriptor[napile.util.listeners.ListenerHolder.fire.l]>l</LocalVariableDescriptor[napile.util.listeners.ListenerHolder.fire.l]>(<CallParameterAsVariableDescriptorImpl[napile.util.listeners.ListenerHolder.fire.event]>event</CallParameterAsVariableDescriptorImpl[napile.util.listeners.ListenerHolder.fire.event]>)
		}
	}
}
/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="PackageDescriptorImpl" to="napile.util.listeners">listeners</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.List">List</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.ArrayList">ArrayList</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
final class ListenerHolder<E>
{
	local val listeners : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><{(val e : <ref class="TypeParameterDescriptorImpl" to="napile.util.listeners.ListenerHolder.E">E</ref>) -> <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref>}> = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref>()

	this()

	meth plus(val impl : {(val e : <ref class="TypeParameterDescriptorImpl" to="napile.util.listeners.ListenerHolder.E">E</ref>) -> <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref>}) : <ref class="MutableClassDescriptor" to="napile.util.listeners.ListenerHolder">this</ref>
	{
		<ref class="VariableDescriptorImpl" to="napile.util.listeners.ListenerHolder.listeners">listeners</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.add">add</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.util.listeners.ListenerHolder.plus.impl">impl</ref>)
		return <ref class="MutableClassDescriptor" to="napile.util.listeners.ListenerHolder">this</ref>
	}

	meth fire(val event : <ref class="TypeParameterDescriptorImpl" to="napile.util.listeners.ListenerHolder.E">E</ref>)
	{
		for(l in <ref class="VariableDescriptorImpl" to="napile.util.listeners.ListenerHolder.listeners">listeners</ref>)
		{
			<ref class="LocalVariableDescriptor" to="napile.util.listeners.ListenerHolder.fire.l">l</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.util.listeners.ListenerHolder.fire.event">event</ref>)
		}
	}
}
package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.util]>util</PackageDescriptorImpl[napile.util]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.module]>module</PackageDescriptorImpl[napile.module]>.<MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.reflect]>reflect</PackageDescriptorImpl[napile.reflect]>.<MutableClassDescriptor[napile.reflect.Class]>Class</MutableClassDescriptor[napile.reflect.Class]>

/~
 ~ Authors
 ~ * VISTALL
 ~/
util class ModuleUtil
{
	meth findModuleByAny(val object : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>) : <MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]> = <SimpleMethodDescriptorImpl[napile.util.ModuleUtil.findModuleByClass]>findModuleByClass</SimpleMethodDescriptorImpl[napile.util.ModuleUtil.findModuleByClass]>(<CallParameterAsVariableDescriptorImpl[napile.util.ModuleUtil.findModuleByAny.object]>object</CallParameterAsVariableDescriptorImpl[napile.util.ModuleUtil.findModuleByAny.object]>.<SimpleMethodDescriptorImpl[napile.lang.Any.getClass]>getClass</SimpleMethodDescriptorImpl[napile.lang.Any.getClass]>())

	native meth findModuleByClass(val clazz : <MutableClassDescriptor[napile.reflect.Class]>Class</MutableClassDescriptor[napile.reflect.Class]><<MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>>) : <MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]>

	native meth getAllCurrentlyLoadedModules() : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]>>
}
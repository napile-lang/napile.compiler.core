package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
util class ModuleUtil
{
	meth findModuleByAny(val object : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>) : <ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.util.ModuleUtil.findModuleByClass">findModuleByClass</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.util.ModuleUtil.findModuleByAny.object">object</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.getClass">getClass</ref>())

	native meth findModuleByClass(val clazz : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>) : <ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>

	native meth getAllCurrentlyLoadedModules() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>>
}
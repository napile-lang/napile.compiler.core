/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.ui">ui</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.ui">ui</ref>.<ref class="PackageDescriptorImpl" to="napile.ui.render">render</ref>.<ref class="MutableClassDescriptor" to="napile.ui.render.UiRender">UiRender</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="PackageDescriptorImpl" to="napile.util.listeners">listeners</ref>.<ref class="MutableClassDescriptor" to="napile.util.listeners.VariableChangeEvent">VariableChangeEvent</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="PackageDescriptorImpl" to="napile.util.listeners">listeners</ref>.<ref class="MutableClassDescriptor" to="napile.util.listeners.ListenerHolder">ListenerHolder</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
abstract class Component
{
	var x : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	var y : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	var width : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	var height : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	var enabled : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = false

	var visible : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		set
		{
			val old = <ref class="LocalVariableDescriptor" to="napile.ui.Component.visible$set.value">value</ref>

			<ref class="LocalVariableDescriptor" to="napile.ui.Component.visible$set.value">value</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.ui.Component.visible$set.newValue">newValue</ref>

			<ref class="VariableDescriptorImpl" to="napile.ui.Component.variableChangeListener">variableChangeListener</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.util.listeners.ListenerHolder.fire">fire</ref>(<ref class="ConstructorDescriptor" to="napile.util.listeners.VariableChangeEvent.this">VariableChangeEvent</ref><<ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>>('visible', <ref class="LocalVariableDescriptor" to="napile.ui.Component.visible$set.old">old</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.ui.Component.visible$set.newValue">newValue</ref>))
		}
	} = false

	val variableChangeListener : <ref class="MutableClassDescriptor" to="napile.util.listeners.ListenerHolder">ListenerHolder</ref><<ref class="MutableClassDescriptor" to="napile.util.listeners.VariableChangeEvent">VariableChangeEvent</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>> = <ref class="ConstructorDescriptor" to="napile.util.listeners.ListenerHolder.this">ListenerHolder</ref>();

	this()

	meth add(val c : <ref class="MutableClassDescriptor" to="napile.ui.Component">Component</ref>)

	heritable meth render(val render : <ref class="MutableClassDescriptor" to="napile.ui.render.UiRender">UiRender</ref>)
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.NativeConsole">NativeConsole</ref>

/**
 * @author VISTALL
 */
class Type<E> : <ref class="MutableClassDescriptor" to="napile.reflect.AnnotationOwner">AnnotationOwner</ref>
{
	val constructorClass : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="TypeParameterDescriptorImpl" to="napile.reflect.Type.E">E</ref>>

	val nullable : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	val parameters : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>>

	lazy val defaultValue : <ref class="TypeParameterDescriptorImpl" to="napile.reflect.Type.E">E</ref>? = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Type.findDefaultValue">findDefaultValue</ref>()

	local this(<ref class="VariableDescriptorImpl" to="napile.reflect.Type.constructorClass">constructorClass</ref>, <ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>, <ref class="VariableDescriptorImpl" to="napile.reflect.Type.nullable">nullable</ref>, val annotations : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>) : <ref class="MutableClassDescriptor" to="napile.reflect.AnnotationOwner">AnnotationOwner</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Type.this.annotations">annotations</ref>)

	local meth findDefaultValue() : <ref class="TypeParameterDescriptorImpl" to="napile.reflect.Type.E">E</ref>?
	{
		if(<ref class="VariableDescriptorImpl" to="napile.reflect.Type.nullable">nullable</ref>)
			return null

		var annotation : <ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>? = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Type.findAnnotation">findAnnotation</ref>()
		if(<ref class="LocalVariableDescriptor" to="napile.reflect.Type.findDefaultValue.annotation">annotation</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.annotation.DefaultValue.equals">!=</ref> null)
			return <ref class="LocalVariableDescriptor" to="napile.reflect.Type.findDefaultValue.annotation">annotation</ref>.<ref class="VariableDescriptorImpl" to="napile.annotation.DefaultValue.value">value</ref> <ref to="null">as</ref> <ref class="TypeParameterDescriptorImpl" to="napile.reflect.Type.E">E</ref>

		<ref class="LocalVariableDescriptor" to="napile.reflect.Type.findDefaultValue.annotation">annotation</ref> <ref to="null">=</ref> <ref class="VariableDescriptorImpl" to="napile.reflect.Type.constructorClass">constructorClass</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.findAnnotation">findAnnotation</ref><<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>>()
		if(<ref class="LocalVariableDescriptor" to="napile.reflect.Type.findDefaultValue.annotation">annotation</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.annotation.DefaultValue.equals">!=</ref> null)
			return <ref class="LocalVariableDescriptor" to="napile.reflect.Type.findDefaultValue.annotation">annotation</ref>.<ref class="VariableDescriptorImpl" to="napile.annotation.DefaultValue.value">value</ref> <ref to="null">as</ref> <ref class="TypeParameterDescriptorImpl" to="napile.reflect.Type.E">E</ref>

		return null
	}

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		val builder = <ref class="ConstructorDescriptor" to="napile.lang.StringBuilder.this">StringBuilder</ref>()
		<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="VariableDescriptorImpl" to="napile.reflect.Type.constructorClass">constructorClass</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Class.name">name</ref>
		if(<ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> 0)
		{
			<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> "<"
			var i = 0
			while(<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			{
				if(<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
					<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ", "
				<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>[<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>
			}
			<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ">"
		}
		if(<ref class="VariableDescriptorImpl" to="napile.reflect.Type.nullable">nullable</ref>)
			<ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> "?"
		return <ref class="LocalVariableDescriptor" to="napile.reflect.Type.toString.builder">builder</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.toString">toString</ref>()
	}
}
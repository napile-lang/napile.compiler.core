package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>

/**
 * @author VISTALL
 */
final class Class<E> : <ref class="MutableClassDescriptor" to="napile.reflect.Member">Member</ref>
{
	/**
	 * @return immutable array variables of class
	 */
	lazy val variables : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Variable">Variable</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.getVariables">getVariables</ref>()

	/**
	 * @return immutable array constructors of class
	 */
	lazy val constructors : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Constructor">Constructor</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.getConstructors">getConstructors</ref>()

	/**
	 * @return immutable array methods of class
	 */
	lazy val methods : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Method">Method</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.getMethods">getMethods</ref>()

	/**
	 * @return immutable array macros of class
	 */
	lazy val macros : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Macro">Macro</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.getMacros">getMacros</ref>()

	/**
	 * @return super classes of this class
	 */
	lazy val superClasses : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.getSuperClasses">getSuperClasses</ref>()

	/**
	 * Main constructor of class. Access modifier is 'local'. Called only by VM
	 */
	local this(
			val owner : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>?,
			val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>,
			val modifiers : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref>>,
			val annotations : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>) : <ref class="MutableClassDescriptor" to="napile.reflect.Member">Member</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.this.owner">owner</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.this.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.this.modifiers">modifiers</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.this.annotations">annotations</ref>)

	local native meth getVariables() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Variable">Variable</ref>>

	local native meth getMacros() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Macro">Macro</ref>>

	local native meth getMethods() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Method">Method</ref>>

	local native meth getConstructors() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Constructor">Constructor</ref>>

	local native meth getSuperClasses() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>>

	native meth getXmlDoc() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	/**
	 * Searching method by name
	 */
	meth findMethod(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>, val parameters : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>>, val parent : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>) : <ref class="MutableClassDescriptor" to="napile.reflect.Method">Method</ref>?
	{
		for (m in <ref class="VariableDescriptorImpl" to="napile.reflect.Class.methods">methods</ref>)
			if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Bool.not">!</ref><ref class="LocalVariableDescriptor" to="napile.reflect.Class.findMethod.m">m</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.isStatic">isStatic</ref>() <ref to="null">&&</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.isValidMethodLike">isValidMethodLike</ref>(<ref class="LocalVariableDescriptor" to="napile.reflect.Class.findMethod.m">m</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findMethod.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findMethod.parameters">parameters</ref>))
				return <ref class="LocalVariableDescriptor" to="napile.reflect.Class.findMethod.m">m</ref>

		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findMethod.parent">parent</ref>)
			for(p in <ref class="VariableDescriptorImpl" to="napile.reflect.Class.superClasses">superClasses</ref>)
			{
				val m = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.findMethod">findMethod</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findMethod.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findMethod.parameters">parameters</ref>, true)
				if(<ref class="LocalVariableDescriptor" to="napile.reflect.Class.findMethod.m">m</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.equals">!=</ref> null)
					return <ref class="LocalVariableDescriptor" to="napile.reflect.Class.findMethod.m">m</ref>
			}
		return null;
	}

	/**
	 * Searching static method by name
	 */
	meth findStaticMethod(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>, val parameters : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>>) : <ref class="MutableClassDescriptor" to="napile.reflect.Method">Method</ref>?
	{
		for (m in <ref class="VariableDescriptorImpl" to="napile.reflect.Class.methods">methods</ref>)
			if (<ref class="LocalVariableDescriptor" to="napile.reflect.Class.findStaticMethod.m">m</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.isStatic">isStatic</ref>() <ref to="null">&&</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.isValidMethodLike">isValidMethodLike</ref>(<ref class="LocalVariableDescriptor" to="napile.reflect.Class.findStaticMethod.m">m</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findStaticMethod.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.findStaticMethod.parameters">parameters</ref>))
				return <ref class="LocalVariableDescriptor" to="napile.reflect.Class.findStaticMethod.m">m</ref>
		return null;
	}

	local meth isValidMethodLike(val methodLike : <ref class="MutableClassDescriptor" to="napile.reflect.MethodLike">MethodLike</ref>, val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>, val parameters : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.methodLike">methodLike</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.MethodLike.name">name</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.equals">!=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.name">name</ref>)
			return false

		val mParameters = <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.methodLike">methodLike</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.MethodLike.parameters">parameters</ref>

		if(<ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.mParameters">mParameters</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>() <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.parameters">parameters</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>())
			return false

		for(i in 0<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.rangeTo">..</ref><ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.parameters">parameters</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>())
		{
			val mParameter = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.mParameters">mParameters</ref>[<ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.i">i</ref>]</ref>
			val parameter = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Class.isValidMethodLike.parameters">parameters</ref>[<ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.i">i</ref>]</ref>

			if(<ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.mParameter">mParameter</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.CallParameter.type">type</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.asm.members.AsmType.equals">!=</ref> <ref class="LocalVariableDescriptor" to="napile.reflect.Class.isValidMethodLike.parameter">parameter</ref>)
				return false
		}
		return true
	}
}
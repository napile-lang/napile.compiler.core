package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>

/**
 * @author VISTALL
 */
class CallParameter : <ref class="MutableClassDescriptor" to="napile.reflect.Member">Member</ref>
{
	lazy val type : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.CallParameter.getReturnType">getReturnType</ref>()

	local this(
			val owner : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>?,
			val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>,
			val modifiers : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref>>,
			val annotations : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>) : <ref class="MutableClassDescriptor" to="napile.reflect.Member">Member</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.CallParameter.this.owner">owner</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.CallParameter.this.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.CallParameter.this.modifiers">modifiers</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.CallParameter.this.annotations">annotations</ref>)

	local native meth getReturnType() : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>
}
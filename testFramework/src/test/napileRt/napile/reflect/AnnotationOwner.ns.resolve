package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.ArrayList">ArrayList</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.List">List</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>

/**
 * @author VISTALL
 */
class AnnotationOwner
{
	final val annotations : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>

	covered this(<ref class="VariableDescriptorImpl" to="napile.reflect.AnnotationOwner.annotations">annotations</ref>)

	meth findAnnotation<A>() : <ref class="TypeParameterDescriptorImpl" to="napile.reflect.AnnotationOwner.findAnnotation.A">A</ref>?
	{
		for(a in <ref class="VariableDescriptorImpl" to="napile.reflect.AnnotationOwner.annotations">annotations</ref>)
			if (<ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotation.a">a</ref> <ref to="null">is</ref> <ref class="TypeParameterDescriptorImpl" to="napile.reflect.AnnotationOwner.findAnnotation.A">A</ref>)
				return <ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotation.a">a</ref>
		return null
	}

	meth findAnnotations<A>() : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="TypeParameterDescriptorImpl" to="napile.reflect.AnnotationOwner.findAnnotations.A">A</ref>>
	{
		val list = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref><<ref class="TypeParameterDescriptorImpl" to="napile.reflect.AnnotationOwner.findAnnotations.A">A</ref>>(2)
		for (a in <ref class="VariableDescriptorImpl" to="napile.reflect.AnnotationOwner.annotations">annotations</ref>)
			if(<ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotations.a">a</ref> <ref to="null">is</ref> <ref class="TypeParameterDescriptorImpl" to="napile.reflect.AnnotationOwner.findAnnotations.A">A</ref>)
				<ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotations.list">list</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.ArrayList.add">add</ref>(<ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotations.a">a</ref>)
		return <ref class="LocalVariableDescriptor" to="napile.reflect.AnnotationOwner.findAnnotations.list">list</ref>
	}
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

/**
 * @author VISTALL
 */
class Modifier
{
	/**
	 * access modifier
	*/
	static val LOCAL : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	/**
	 * access modifier
	*/
	static val HERITABLE : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	/**
	 * access modifier
	*/
	static val COVERED : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	/**
	 * variable modifier
	*/
	static val MUTABLE : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	static val STATIC : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	static val ABSTRACT : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	static val FINAL : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	static val NATIVE : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	static val UTIL : <ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref> = <ref class="ConstructorDescriptor" to="napile.reflect.Modifier.this">Modifier</ref>()

	local this()
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

/**
 * @author VISTALL
 */
util class ReflectUtil
{
	/**
	 * @throw ClassNotFoundException
	*/
	meth findClass(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>
	{
		//TODO [VISTALL] get class-loader and then get by name, when they ill implemented
		return <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.ReflectUtil.findClass0">findClass0</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.ReflectUtil.findClass.name">name</ref>)
	}

	native meth findClass0(val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>
}
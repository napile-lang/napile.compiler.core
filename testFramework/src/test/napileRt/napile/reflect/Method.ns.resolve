package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>

/**
 * @author VISTALL
 */
class Method : <ref class="MutableClassDescriptor" to="napile.reflect.MethodLike">MethodLike</ref>
{
	local this(
			val owner : <ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>?,
			val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>,
			val modifiers : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref>>,
			val annotations : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>>) : <ref class="MutableClassDescriptor" to="napile.reflect.MethodLike">MethodLike</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Method.this.owner">owner</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Method.this.name">name</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Method.this.modifiers">modifiers</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Method.this.annotations">annotations</ref>)

	meth invoke(val object : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>, val arguments : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>) : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?
	{
		return null //TODO [VISTALL]
	}

	/**
	 * @return returnValues, last value if return value, others if values to ref parameters
	 */
	meth invokeStatic(val arguments : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>
	{
		if (<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Bool.not">!</ref><ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.isStatic">isStatic</ref>())
			throw <ref class="ConstructorDescriptor" to="napile.lang.IllegalArgumentException.this">IllegalArgumentException</ref>('Use \'invoke\' for instance method call')

		return <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.invokeStatic0">invokeStatic0</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.reflect.Method.invokeStatic.arguments">arguments</ref>)
	}

	local native meth invokeStatic0(val arguments : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
/**
 * @author VISTALL
 */
util class IterableUtil
{
	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth select<E>(val iterable : <ref class="MutableClassDescriptor" to="napile.collection.Iterable">Iterable</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.select.E">E</ref>>, val filter : {(val arg : <ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.select.E">E</ref>) -> <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>}) : <ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.select.E">E</ref>?
	{
		for (c in <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.IterableUtil.select.iterable">iterable</ref>)
			if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.IterableUtil.select.filter">filter</ref>(<ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.select.c">c</ref>))
				return <ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.select.c">c</ref>
		return null
	}

	@<ref class="MutableClassDescriptor" to="napile.annotation.Extension">Extension</ref>
	meth filter<E>(val iterable : <ref class="MutableClassDescriptor" to="napile.collection.Iterable">Iterable</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.filter.E">E</ref>>, val filter : {(val arg : <ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.filter.E">E</ref>) -> <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>}) : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.filter.E">E</ref>>
	{
		val list = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.IterableUtil.filter.E">E</ref>>(5)
		for (c in <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.IterableUtil.filter.iterable">iterable</ref>)
			if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.IterableUtil.filter.filter">filter</ref>(<ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.filter.c">c</ref>))
				<ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.filter.list">list</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.ArrayList.add">add</ref>(<ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.filter.c">c</ref>)
		return <ref class="LocalVariableDescriptor" to="napile.collection.IterableUtil.filter.list">list</ref>
	}
}
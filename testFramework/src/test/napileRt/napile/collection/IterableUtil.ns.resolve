<null>package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]></null>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.Extension]>Extension</MutableClassDescriptor[napile.annotation.Extension]>
/**
 * @author VISTALL
 */
util class IterableUtil
{
	@<MutableClassDescriptor[napile.annotation.Extension]>Extension</MutableClassDescriptor[napile.annotation.Extension]>
	meth select<E>(val iterable : <MutableClassDescriptor[napile.collection.Iterable]>Iterable</MutableClassDescriptor[napile.collection.Iterable]><<TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>>, val filter : {(val arg : <TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>) -> <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>}) : <TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.select.E]>?
	{
		for (c in <CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.select.iterable]>iterable</CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.select.iterable]>)
			if(<CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.select.filter]>filter</CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.select.filter]>(<LocalVariableDescriptor[napile.collection.IterableUtil.select.c]>c</LocalVariableDescriptor[napile.collection.IterableUtil.select.c]>))
				return <LocalVariableDescriptor[napile.collection.IterableUtil.select.c]>c</LocalVariableDescriptor[napile.collection.IterableUtil.select.c]>
		return null
	}

	@<MutableClassDescriptor[napile.annotation.Extension]>Extension</MutableClassDescriptor[napile.annotation.Extension]>
	meth filter<E>(val iterable : <MutableClassDescriptor[napile.collection.Iterable]>Iterable</MutableClassDescriptor[napile.collection.Iterable]><<TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>>, val filter : {(val arg : <TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>) -> <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>}) : <MutableClassDescriptor[napile.collection.List]>List</MutableClassDescriptor[napile.collection.List]><<TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>>
	{
		val list = <ConstructorDescriptor[napile.collection.ArrayList.this]>ArrayList</ConstructorDescriptor[napile.collection.ArrayList.this]><<TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>E</TypeParameterDescriptorImpl[napile.collection.IterableUtil.filter.E]>>(5)
		for (c in <CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.filter.iterable]>iterable</CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.filter.iterable]>)
			if(<CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.filter.filter]>filter</CallParameterAsVariableDescriptorImpl[napile.collection.IterableUtil.filter.filter]>(<LocalVariableDescriptor[napile.collection.IterableUtil.filter.c]>c</LocalVariableDescriptor[napile.collection.IterableUtil.filter.c]>))
				<LocalVariableDescriptor[napile.collection.IterableUtil.filter.list]>list</LocalVariableDescriptor[napile.collection.IterableUtil.filter.list]>.<SimpleMethodDescriptorImpl[napile.collection.ArrayList.add]>add</SimpleMethodDescriptorImpl[napile.collection.ArrayList.add]>(<LocalVariableDescriptor[napile.collection.IterableUtil.filter.c]>c</LocalVariableDescriptor[napile.collection.IterableUtil.filter.c]>)
		return <LocalVariableDescriptor[napile.collection.IterableUtil.filter.list]>list</LocalVariableDescriptor[napile.collection.IterableUtil.filter.list]>
	}
}
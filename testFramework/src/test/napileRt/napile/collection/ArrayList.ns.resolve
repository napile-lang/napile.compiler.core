package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref>

/**
 * @author VISTALL
 */
class ArrayList<E> : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>>
{
	local var data : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>>
	local var size : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	this(val predefinedSize : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 10)
	{
		<ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.this.predefinedSize">predefinedSize</ref>)
	}

	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	override meth add(val e : <ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.collection.ArrayList.ensureCapacity">ensureCapacity</ref>(<ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.size">size</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> 1);
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref>[<ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.size">size</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.add.e">e</ref>;
		return true;
	}

	override meth set(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val e : <ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>)
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.set.index">index</ref>]</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.set.e">e</ref>
	}

	override meth get(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.get.index">index</ref>]</ref>

	local meth ensureCapacity(val minCapacity : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		var oldCapacity = <ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>;
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.ensureCapacity.minCapacity">minCapacity</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="LocalVariableDescriptor" to="napile.collection.ArrayList.ensureCapacity.oldCapacity">oldCapacity</ref>)
		{
			var newCapacity = (<ref class="LocalVariableDescriptor" to="napile.collection.ArrayList.ensureCapacity.oldCapacity">oldCapacity</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.times">*</ref> 3) <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.div">/</ref> 2 <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> 1;
			if (<ref class="LocalVariableDescriptor" to="napile.collection.ArrayList.ensureCapacity.newCapacity">newCapacity</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.ensureCapacity.minCapacity">minCapacity</ref>)
				<ref class="LocalVariableDescriptor" to="napile.collection.ArrayList.ensureCapacity.newCapacity">newCapacity</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.ArrayList.ensureCapacity.minCapacity">minCapacity</ref>;

			<ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copyOf">copyOf</ref>(<ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.data">data</ref>, <ref class="LocalVariableDescriptor" to="napile.collection.ArrayList.ensureCapacity.newCapacity">newCapacity</ref>);
		}
	}

	override meth iterator() : @<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref> <ref class="MutableClassDescriptor" to="napile.collection.Iterator">Iterator</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>> = <ref class="ConstructorDescriptor" to="napile.collection.ListIterator.this">ListIterator</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.ArrayList.E">E</ref>>(<ref class="MutableClassDescriptor" to="napile.collection.ArrayList">this</ref>)

	override meth size() = <ref class="VariableDescriptorImpl" to="napile.collection.ArrayList.size">size</ref>
}
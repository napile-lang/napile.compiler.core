package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
/**
 * @author VISTALL
 */
abstract class List<E> : <ref class="MutableClassDescriptor" to="napile.collection.Collection">Collection</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.List.E">E</ref>>
{
	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	meth add(val e : <ref class="TypeParameterDescriptorImpl" to="napile.collection.List.E">E</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	meth set(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, val e : <ref class="TypeParameterDescriptorImpl" to="napile.collection.List.E">E</ref>)

	meth get(val index : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.collection.List.E">E</ref>
}
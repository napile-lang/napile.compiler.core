/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.collection]>collection</PackageDescriptorImpl[napile.collection]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.reflect]>reflect</PackageDescriptorImpl[napile.reflect]>.<MutableClassDescriptor[napile.reflect.Class]>Class</MutableClassDescriptor[napile.reflect.Class]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.DefaultValue]>DefaultValue</MutableClassDescriptor[napile.annotation.DefaultValue]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.InheritImmutable]>InheritImmutable</MutableClassDescriptor[napile.annotation.InheritImmutable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.util]>util</PackageDescriptorImpl[napile.util]>.<MutableClassDescriptor[napile.util.TypeUtil]>TypeUtil</MutableClassDescriptor[napile.util.TypeUtil]>

/**
 * @author VISTALL
 */
class HashMap<K, V> : <MutableClassDescriptor[napile.collection.Map]>Map</MutableClassDescriptor[napile.collection.Map]><<TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>, <TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>>
{
	local val keys : <MutableClassDescriptor[napile.collection.List]>List</MutableClassDescriptor[napile.collection.List]><<TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>> = <ConstructorDescriptor[napile.collection.ArrayList.this]>ArrayList</ConstructorDescriptor[napile.collection.ArrayList.this]><<TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>>()
	local val values : <MutableClassDescriptor[napile.collection.List]>List</MutableClassDescriptor[napile.collection.List]><<TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>> = <ConstructorDescriptor[napile.collection.ArrayList.this]>ArrayList</ConstructorDescriptor[napile.collection.ArrayList.this]><<TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>>()

	local var size : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = 0

	this()

	override meth entrySet(): @<MutableClassDescriptor[napile.annotation.InheritImmutable]>InheritImmutable</MutableClassDescriptor[napile.annotation.InheritImmutable]> <MutableClassDescriptor[napile.collection.Set]>Set</MutableClassDescriptor[napile.collection.Set]><[val key: <TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>, val value: <TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>]>
	{
		throw <ConstructorDescriptor[napile.lang.UnsupportedOperationException.this]>UnsupportedOperationException</ConstructorDescriptor[napile.lang.UnsupportedOperationException.this]>()
	}

	override meth put(val key : <TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>, val value : <TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>)
	{
		val index = 0
		while(<LocalVariableDescriptor[napile.collection.HashMap.put.index]>index</LocalVariableDescriptor[napile.collection.HashMap.put.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.collection.HashMap.keys]>keys</VariableDescriptorImpl[napile.collection.HashMap.keys]>.<SimpleMethodDescriptorImpl[napile.collection.List.size]>size</SimpleMethodDescriptorImpl[napile.collection.List.size]>())
		{
			var k = <SimpleMethodDescriptorImpl[napile.collection.List.get]><VariableDescriptorImpl[napile.collection.HashMap.keys]>keys</VariableDescriptorImpl[napile.collection.HashMap.keys]>[<LocalVariableDescriptor[napile.collection.HashMap.put.index]>index</LocalVariableDescriptor[napile.collection.HashMap.put.index]>]</SimpleMethodDescriptorImpl[napile.collection.List.get]>
			if(<LocalVariableDescriptor[napile.collection.HashMap.put.k]>k</LocalVariableDescriptor[napile.collection.HashMap.put.k]> <SimpleMethodDescriptorImpl[napile.lang.Any.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Any.equals]> <CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.key]>key</CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.key]>)
			{
				<SimpleMethodDescriptorImpl[napile.collection.List.set]><VariableDescriptorImpl[napile.collection.HashMap.values]>values</VariableDescriptorImpl[napile.collection.HashMap.values]>[<LocalVariableDescriptor[napile.collection.HashMap.put.index]>index</LocalVariableDescriptor[napile.collection.HashMap.put.index]>]</SimpleMethodDescriptorImpl[napile.collection.List.set]> <null>=</null> <CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.value]>value</CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.value]>
				return
			}

			<LocalVariableDescriptor[napile.collection.HashMap.put.index]>index</LocalVariableDescriptor[napile.collection.HashMap.put.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
		}

		<VariableDescriptorImpl[napile.collection.HashMap.keys]>keys</VariableDescriptorImpl[napile.collection.HashMap.keys]>.<SimpleMethodDescriptorImpl[napile.collection.List.add]>add</SimpleMethodDescriptorImpl[napile.collection.List.add]>(<CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.key]>key</CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.key]>)
		<VariableDescriptorImpl[napile.collection.HashMap.values]>values</VariableDescriptorImpl[napile.collection.HashMap.values]>.<SimpleMethodDescriptorImpl[napile.collection.List.add]>add</SimpleMethodDescriptorImpl[napile.collection.List.add]>(<CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.value]>value</CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.put.value]>)
		<VariableDescriptorImpl[napile.collection.HashMap.size]>size</VariableDescriptorImpl[napile.collection.HashMap.size]> <SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
	}

	override meth get(val key : <TypeParameterDescriptorImpl[napile.collection.HashMap.K]>K</TypeParameterDescriptorImpl[napile.collection.HashMap.K]>) : <TypeParameterDescriptorImpl[napile.collection.HashMap.V]>V</TypeParameterDescriptorImpl[napile.collection.HashMap.V]>
	{
		val index = 0
		while(<LocalVariableDescriptor[napile.collection.HashMap.get.index]>index</LocalVariableDescriptor[napile.collection.HashMap.get.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.collection.HashMap.keys]>keys</VariableDescriptorImpl[napile.collection.HashMap.keys]>.<SimpleMethodDescriptorImpl[napile.collection.List.size]>size</SimpleMethodDescriptorImpl[napile.collection.List.size]>())
		{
			var k = <SimpleMethodDescriptorImpl[napile.collection.List.get]><VariableDescriptorImpl[napile.collection.HashMap.keys]>keys</VariableDescriptorImpl[napile.collection.HashMap.keys]>[<LocalVariableDescriptor[napile.collection.HashMap.get.index]>index</LocalVariableDescriptor[napile.collection.HashMap.get.index]>]</SimpleMethodDescriptorImpl[napile.collection.List.get]>
			if(<LocalVariableDescriptor[napile.collection.HashMap.get.k]>k</LocalVariableDescriptor[napile.collection.HashMap.get.k]> <SimpleMethodDescriptorImpl[napile.lang.Any.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Any.equals]> <CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.get.key]>key</CallParameterAsVariableDescriptorImpl[napile.collection.HashMap.get.key]>)
				return <SimpleMethodDescriptorImpl[napile.collection.List.get]><VariableDescriptorImpl[napile.collection.HashMap.values]>values</VariableDescriptorImpl[napile.collection.HashMap.values]>[<LocalVariableDescriptor[napile.collection.HashMap.get.index]>index</LocalVariableDescriptor[napile.collection.HashMap.get.index]>]</SimpleMethodDescriptorImpl[napile.collection.List.get]>

			<LocalVariableDescriptor[napile.collection.HashMap.get.index]>index</LocalVariableDescriptor[napile.collection.HashMap.get.index]> <SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>
		}

		return <MutableClassDescriptor[napile.util.TypeUtil]>TypeUtil</MutableClassDescriptor[napile.util.TypeUtil]>.<SimpleMethodDescriptorImpl[napile.util.TypeUtil.getDefaultValue]>getDefaultValue</SimpleMethodDescriptorImpl[napile.util.TypeUtil.getDefaultValue]>(true)
	}

	override meth size() : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]> = <VariableDescriptorImpl[napile.collection.HashMap.size]>size</VariableDescriptorImpl[napile.collection.HashMap.size]>
}
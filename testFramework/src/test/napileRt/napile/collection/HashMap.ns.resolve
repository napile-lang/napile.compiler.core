/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Class">Class</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.DefaultValue">DefaultValue</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.util">util</ref>.<ref class="MutableClassDescriptor" to="napile.util.TypeUtil">TypeUtil</ref>

/**
 * @author VISTALL
 */
class HashMap<K, V> : <ref class="MutableClassDescriptor" to="napile.collection.Map">Map</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>, <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>>
{
	local val keys : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>> = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>>()
	local val values : <ref class="MutableClassDescriptor" to="napile.collection.List">List</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>> = <ref class="ConstructorDescriptor" to="napile.collection.ArrayList.this">ArrayList</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>>()

	local var size : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	this()

	override meth entrySet(): @<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref> <ref class="MutableClassDescriptor" to="napile.collection.Set">Set</ref><[val key: <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>, val value: <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>]>
	{
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}

	override meth put(val key : <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>, val value : <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>)
	{
		val index = 0
		while(<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.put.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="VariableDescriptorImpl" to="napile.collection.HashMap.keys">keys</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.size">size</ref>())
		{
			var k = <ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.get"><ref class="VariableDescriptorImpl" to="napile.collection.HashMap.keys">keys</ref>[<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.put.index">index</ref>]</ref>
			if(<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.put.k">k</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.HashMap.put.key">key</ref>)
			{
				<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.set"><ref class="VariableDescriptorImpl" to="napile.collection.HashMap.values">values</ref>[<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.put.index">index</ref>]</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.HashMap.put.value">value</ref>
				return
			}

			<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.put.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
		}

		<ref class="VariableDescriptorImpl" to="napile.collection.HashMap.keys">keys</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.add">add</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.HashMap.put.key">key</ref>)
		<ref class="VariableDescriptorImpl" to="napile.collection.HashMap.values">values</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.add">add</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.HashMap.put.value">value</ref>)
		<ref class="VariableDescriptorImpl" to="napile.collection.HashMap.size">size</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
	}

	override meth get(val key : <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.K">K</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.collection.HashMap.V">V</ref>
	{
		val index = 0
		while(<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.get.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="VariableDescriptorImpl" to="napile.collection.HashMap.keys">keys</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.size">size</ref>())
		{
			var k = <ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.get"><ref class="VariableDescriptorImpl" to="napile.collection.HashMap.keys">keys</ref>[<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.get.index">index</ref>]</ref>
			if(<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.get.k">k</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Any.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.collection.HashMap.get.key">key</ref>)
				return <ref class="SimpleMethodDescriptorImpl" to="napile.collection.List.get"><ref class="VariableDescriptorImpl" to="napile.collection.HashMap.values">values</ref>[<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.get.index">index</ref>]</ref>

			<ref class="LocalVariableDescriptor" to="napile.collection.HashMap.get.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
		}

		return <ref class="MutableClassDescriptor" to="napile.util.TypeUtil">TypeUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.util.TypeUtil.getDefaultValue">getDefaultValue</ref>(true)
	}

	override meth size() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="VariableDescriptorImpl" to="napile.collection.HashMap.size">size</ref>
}
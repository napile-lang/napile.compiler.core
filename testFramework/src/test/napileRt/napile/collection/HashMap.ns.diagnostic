/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package napile.collection

import napile.reflect.Class
import napile.annotation.DefaultValue
import napile.annotation.InheritImmutable
import napile.util.TypeUtil

/**
 * @author VISTALL
 */
class HashMap<K, V> : Map<K, V>
{
	local val keys : List<K> = ArrayList<K>()
	local val values : List<V> = ArrayList<V>()

	local var size : Int = 0

	this()

	override meth entrySet(): @InheritImmutable Set<[val key: K, val value: V]>
	{
		throw UnsupportedOperationException()
	}

	override meth put(val key : K, val value : V)
	{
		val index = 0
		while(index < keys.size())
		{
			var k = keys[index]
			if(k == key)
			{
				values[index] = value
				return
			}

			index ++
		}

		keys.add(key)
		values.add(value)
		size ++
	}

	override meth get(val key : K) : V
	{
		val index = 0
		while(index < keys.size())
		{
			var k = keys[index]
			if(k == key)
				return values[index]

			index ++
		}

		return TypeUtil.getDefaultValue(true)
	}

	override meth size() : Int = size
}
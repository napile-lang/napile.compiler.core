package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

/**
 * @author VISTALL
 */
abstract class Collection<E> : <ref class="MutableClassDescriptor" to="napile.collection.Iterable">Iterable</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.Collection.E">E</ref>> & <ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
{
	local val emptyArray = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.Collection.E">E</ref>>(0)

	meth toArray() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.Collection.E">E</ref>>
	{
		if (<ref class="SimpleMethodDescriptorImpl" to="napile.collection.Collection.isEmpty">isEmpty</ref>())
			return <ref class="VariableDescriptorImpl" to="napile.collection.Collection.emptyArray">emptyArray</ref>
		else
		{
			var array = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.collection.Collection.E">E</ref>>(<ref class="SimpleMethodDescriptorImpl" to="napile.collection.Collection.size">size</ref>())
			var index = 0
			for(e in <ref class="MutableClassDescriptor" to="napile.collection.Collection">this</ref>)
				<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="LocalVariableDescriptor" to="napile.collection.Collection.toArray.array">array</ref>[<ref class="LocalVariableDescriptor" to="napile.collection.Collection.toArray.index">index</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref to="null">=</ref> <ref class="LocalVariableDescriptor" to="napile.collection.Collection.toArray.e">e</ref>
			return <ref class="LocalVariableDescriptor" to="napile.collection.Collection.toArray.array">array</ref>
		}
	}
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref>

/**
 * @author VISTALL
 */
abstract class Map<K, V> : <ref class="MutableClassDescriptor" to="napile.collection.Sizeable">Sizeable</ref>
{
	@<ref class="MutableClassDescriptor" to="napile.annotation.ImmutableTarget">ImmutableTarget</ref>
	meth put(val key : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.K">K</ref>, val value : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.V">V</ref>)

	meth get(val key : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.K">K</ref>) : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.V">V</ref>

	meth entrySet() : @<ref class="MutableClassDescriptor" to="napile.annotation.InheritImmutable">InheritImmutable</ref> <ref class="MutableClassDescriptor" to="napile.collection.Set">Set</ref><[val key : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.K">K</ref>, val value : <ref class="TypeParameterDescriptorImpl" to="napile.collection.Map.V">V</ref>]>
}
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension">extension</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
class Extensions
{
	val forId : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	val extensions : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.module.extension.Extension">Extension</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.module.extension.Extensions.getExtensions">getExtensions</ref>()

	this(<ref class="VariableDescriptorImpl" to="napile.module.extension.Extensions.forId">forId</ref>)

	local native meth getExtensions() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.module.extension.Extension">Extension</ref>>
}
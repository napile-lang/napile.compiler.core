/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension">extension</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>

/**
 * @author VISTALL
 */
class ExtensionPointName<T>
{
	val id : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	this(<ref class="VariableDescriptorImpl" to="napile.module.extension.ExtensionPointName.id">id</ref>, <ref class="VariableDescriptorImpl" to="napile.module.extension.ExtensionPointName.name">name</ref>)

	meth getValues() : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.module.extension.ExtensionPointName.T">T</ref>>
	{
		return <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="TypeParameterDescriptorImpl" to="napile.module.extension.ExtensionPointName.T">T</ref>>(0) //TODO [VISTALL]
	}
}
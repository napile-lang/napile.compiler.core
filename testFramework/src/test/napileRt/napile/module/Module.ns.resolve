package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.resource">resource</ref>.<ref class="MutableClassDescriptor" to="napile.resource.ResourceBundle">ResourceBundle</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="PackageDescriptorImpl" to="napile.module.extension">extension</ref>.<ref class="MutableClassDescriptor" to="napile.module.extension.ExtensionPoint">ExtensionPoint</ref>

/**
 * @author VISTALL
 */
class Module
{
	val id : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	val extensionPoints : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.module.extension.ExtensionPoint">ExtensionPoint</ref>> = <ref class="SimpleMethodDescriptorImpl" to="napile.module.Module.getExtensionPoints">getExtensionPoints</ref>()

	this(<ref class="VariableDescriptorImpl" to="napile.module.Module.id">id</ref>, <ref class="VariableDescriptorImpl" to="napile.module.Module.name">name</ref>)

	local native meth getExtensionPoints() : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.module.extension.ExtensionPoint">ExtensionPoint</ref>>

	static meth getBundle() : <ref class="MutableClassDescriptor" to="napile.resource.ResourceBundle">ResourceBundle</ref>
	{
		throw <ref class="ConstructorDescriptor" to="napile.lang.IllegalArgumentException.this">IllegalArgumentException</ref>() // TODO [VISTALL]
	}
}
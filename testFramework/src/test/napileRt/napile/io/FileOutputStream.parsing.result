NapileFileImpl: FileOutputStream.ns
  PsiComment(BLOCK_COMMENT)('/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the "License"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */')
  PsiWhiteSpace('\n')
  NapilePackageImpl(PACKAGE)
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('napile')
    PsiElement(DOT)('.')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('io')
  PsiWhiteSpace('\n\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('napile')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('module')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('Module')
  PsiWhiteSpace('\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('napile')
          PsiElement(DOT)('.')
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('nio')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('channels')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('FileChannel')
  PsiWhiteSpace('\n\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('org')
              PsiElement(DOT)('.')
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('apache')
            PsiElement(DOT)('.')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('harmony')
          PsiElement(DOT)('.')
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('luni')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('platform')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('Platform')
  PsiWhiteSpace('\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('org')
            PsiElement(DOT)('.')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('apache')
          PsiElement(DOT)('.')
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('harmony')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('nio')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('FileChannelFactory')
  PsiWhiteSpace('\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('org')
              PsiElement(DOT)('.')
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('apache')
            PsiElement(DOT)('.')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('harmony')
          PsiElement(DOT)('.')
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('luni')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('platform')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('IFileSystem')
  PsiWhiteSpace('\n\n')
  PsiComment(BLOCK_COMMENT)('/**\n * A specialized {@link OutputStream} that writes to a file in the file system.\n * All write requests made by calling methods in this class are directly\n * forwarded to the equivalent function of the underlying operating system.\n * Since this may induce some performance penalty, in particular if many small\n * write requests are made, a FileOutputStream is often wrapped by a\n * BufferedOutputStream.\n *\n * @see BufferedOutputStream\n * @see FileInputStream\n */')
  PsiWhiteSpace('\n')
  CLASS
    MODIFIER_LIST('')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('FileOutputStream')
    PsiWhiteSpace(' ')
    TYPE_PARAMETER_LIST('')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    NapileTypeListImpl(EXTEND_TYPE_LIST)
      NapileTypeReferenceImpl(TYPE_REFERENCE)
        NapileUserTypeImpl(USER_TYPE)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('OutputStream')
    PsiWhiteSpace('\n')
    NapileClassBody(CLASS_BODY)
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n\t')
      VARIABLE
        MODIFIER_LIST
          PsiElement(static)('static')
          PsiWhiteSpace(' ')
          PsiElement(local)('local')
        PsiWhiteSpace(' ')
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        TYPE_PARAMETER_LIST('')
        PsiElement(IDENTIFIER)('fileSystem')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('Platform')
          PsiElement(DOT)('.')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('getFileSystem')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n\t')
      VARIABLE
        MODIFIER_LIST
          PsiElement(final)('final')
        PsiWhiteSpace(' ')
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        TYPE_PARAMETER_LIST('')
        PsiElement(IDENTIFIER)('channel')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('FileChannel')
      PsiWhiteSpace('\n\n\t')
      VARIABLE
        MODIFIER_LIST
          PsiElement(final)('final')
        PsiWhiteSpace(' ')
        PsiElement(val)('val')
        PsiWhiteSpace(' ')
        TYPE_PARAMETER_LIST('')
        PsiElement(IDENTIFIER)('fd')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('FileDescriptor')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Constructs a new FileOutputStream on the File {@code file}. The\n\t * parameter {@code append} determines whether or not the file is opened and\n\t * appended to or just opened and overwritten.\n\t *\n\t * @param file\n\t *            the file to which this stream writes.\n\t * @param append\n\t *            indicates whether or not to append to an existing file.\n\t * @throws FileNotFoundException\n\t *             if the {@code file} cannot be opened for writing.\n\t * @throws SecurityException\n\t *             if a {@code SecurityManager} is installed and it denies the\n\t *             write request.\n\t * @see java.lang.SecurityManager#checkWrite(FileDescriptor)\n\t * @see java.lang.SecurityManager#checkWrite(String)\n\t */')
      PsiWhiteSpace('\n\t')
      CONSTRUCTOR
        MODIFIER_LIST('')
        PsiElement(this)('this')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('file')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('File')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('append')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Bool')
            PsiWhiteSpace(' ')
            NapileContainerNode(DEFAULT_VALUE_NODE)
              PsiElement(EQ)('=')
              PsiWhiteSpace(' ')
              NapileConstantExpressionImpl(BOOLEAN_CONSTANT)
                PsiElement(false)('false')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileSafeQualifiedExpressionImpl(SAFE_ACCESS_EXPRESSION)
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('SecurityManager')
              PsiElement(DOT)('.')
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('INSTANCE')
            PsiElement(SAFE_ACCESS)('?.')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('checkWrite')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('file')
                    PsiElement(DOT)('.')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('path')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileBinaryExpression(BINARY_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('fd')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
              PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('FileDescriptor')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileBinaryExpression(BINARY_EXPRESSION)
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('fd')
              PsiElement(DOT)('.')
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('descriptor')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
              PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('fileSystem')
              PsiElement(DOT)('.')
              NapileCallExpression(CALL_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('open')
                NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                  PsiElement(LPAR)('(')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('file')
                      PsiElement(DOT)('.')
                      NapileCallExpression(CALL_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('properPath')
                        NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                          PsiElement(LPAR)('(')
                          NapileValueArgument(VALUE_ARGUMENT)
                            NapileConstantExpressionImpl(BOOLEAN_CONSTANT)
                              PsiElement(true)('true')
                          PsiElement(RPAR)(')')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileIfExpression(IF)
                      PsiElement(if)('if')
                      PsiElement(LPAR)('(')
                      NapileContainerNode(CONDITION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('append')
                      PsiElement(RPAR)(')')
                      PsiWhiteSpace(' ')
                      NapileContainerNode(THEN)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('IFileSystem')
                          PsiElement(DOT)('.')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('O_APPEND')
                      PsiWhiteSpace(' ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      NapileContainerNode(ELSE)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('IFileSystem')
                          PsiElement(DOT)('.')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('O_WRONLY')
                  PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileBinaryExpression(BINARY_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('channel')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
              PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('FileChannelFactory')
              PsiElement(DOT)('.')
              NapileCallExpression(CALL_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('getFileChannel')
                NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                  PsiElement(LPAR)('(')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileThisExpression(THIS_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(this)('this')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('fd')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('descriptor')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileIfExpression(IF)
                      PsiElement(if)('if')
                      PsiElement(LPAR)('(')
                      NapileContainerNode(CONDITION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('append')
                      PsiElement(RPAR)(')')
                      PsiWhiteSpace(' ')
                      NapileContainerNode(THEN)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('IFileSystem')
                          PsiElement(DOT)('.')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('O_APPEND')
                      PsiWhiteSpace(' ')
                      PsiElement(else)('else')
                      PsiWhiteSpace(' ')
                      NapileContainerNode(ELSE)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('IFileSystem')
                          PsiElement(DOT)('.')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('O_WRONLY')
                  PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Constructs a new FileOutputStream on the FileDescriptor {@code fd}. The\n\t * file must already be open, therefore no {@code FileNotFoundException}\n\t * will be thrown.\n\t *\n\t * @param fd\n\t *            the FileDescriptor to which this stream writes.\n\t * @throws NullPointerException\n\t *             if {@code fd} is {@code null}.\n\t * @throws SecurityException\n\t *             if a {@code SecurityManager} is installed and it denies the\n\t *             write request.\n\t * @see java.lang.SecurityManager#checkWrite(FileDescriptor)\n\t */')
      PsiWhiteSpace('\n\t')
      CONSTRUCTOR
        MODIFIER_LIST('')
        PsiElement(this)('this')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          NapileCallParameterAsReferenceImpl(CALL_PARAMETER_AS_REFERENCE)
            MODIFIER_LIST('')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('fd')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileSafeQualifiedExpressionImpl(SAFE_ACCESS_EXPRESSION)
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('SecurityManager')
              PsiElement(DOT)('.')
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('INSTANCE')
            PsiElement(SAFE_ACCESS)('?.')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('checkWrite')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('fd')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileBinaryExpression(BINARY_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('channel')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
              PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('FileChannelFactory')
              PsiElement(DOT)('.')
              NapileCallExpression(CALL_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('getFileChannel')
                NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                  PsiElement(LPAR)('(')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileThisExpression(THIS_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(this)('this')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('fd')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('descriptor')
                  PsiElement(COMMA)(',')
                  PsiWhiteSpace(' ')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('IFileSystem')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('O_WRONLY')
                  PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Writes {@code count} bytes from the byte array {@code buffer} starting at\n\t * {@code offset} to this stream.\n\t *\n\t * @param buffer\n\t *            the buffer to write to this stream.\n\t * @param offset\n\t *            the index of the first byte in {@code buffer} to write.\n\t * @param count\n\t *            the number of bytes from {@code buffer} to write.\n\t * @throws IndexOutOfBoundsException\n\t *             if {@code count < 0} or {@code offset < 0}, or if\n\t *             {@code count + offset} is greater than the length of\n\t *             {@code buffer}.\n\t * @throws IOException\n\t *             if this stream is closed or an error occurs attempting to\n\t *             write to this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('write')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('buffer')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Array')
                NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                  PsiElement(LT)('<')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Byte')
                  PsiElement(GT)('>')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('offset')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          PsiComment(EOL_COMMENT)('// avoid int overflow, check null buffer')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('offset')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(GT)('>')
                      PsiWhiteSpace(' ')
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('buffer')
                        PsiElement(DOT)('.')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('length')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(OROR)('||')
                    PsiWhiteSpace(' ')
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('offset')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(LT)('<')
                      PsiWhiteSpace(' ')
                      NapileConstantExpressionImpl(INTEGER_CONSTANT)
                        PsiElement(INTEGER_LITERAL)('0')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(OROR)('||')
                  PsiWhiteSpace(' ')
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('count')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(LT)('<')
                    PsiWhiteSpace(' ')
                    NapileConstantExpressionImpl(INTEGER_CONSTANT)
                      PsiElement(INTEGER_LITERAL)('0')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(OROR)('||')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(GT)('>')
                  PsiWhiteSpace(' ')
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('buffer')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('length')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(MINUS)('-')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('offset')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileThrowExpression(THROW)
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('IndexOutOfBoundsException')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    NapileValueArgument(VALUE_ARGUMENT)
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('Module')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('getBundle')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              PsiElement(RPAR)(')')
                        PsiElement(DOT)('.')
                        NapileCallExpression(CALL_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('getString')
                          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                            PsiElement(LPAR)('(')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileConstantExpressionImpl(STRING_CONSTANT)
                                PsiElement(STRING_LITERAL)('"luni.13"')
                            PsiElement(RPAR)(')')
                    PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('count')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(EQEQ)('==')
                PsiWhiteSpace(' ')
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('0')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileReturnExpression(RETURN)
                PsiElement(return)('return')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('openCheck')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('fileSystem')
            PsiElement(DOT)('.')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('write')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('fd')
                    PsiElement(DOT)('.')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('descriptor')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('buffer')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('offset')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
                PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Writes the specified byte {@code oneByte} to this stream. Only the low\n\t * order byte of the integer {@code oneByte} is written.\n\t *\n\t * @param oneByte\n\t *            the byte to be written.\n\t * @throws IOException\n\t *             if this stream is closed an error occurs attempting to write\n\t *             to this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('write')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('oneByte')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Byte')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('openCheck')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('array')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('Array')
              NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                PsiElement(LT)('<')
                NapileTypeReferenceImpl(TYPE_REFERENCE)
                  NapileUserTypeImpl(USER_TYPE)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('Byte')
                PsiElement(GT)('>')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileBinaryExpression(BINARY_EXPRESSION)
            NapileArrayAccessExpressionImpl(ARRAY_ACCESS_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('array')
              NapileContainerNode(INDICES)
                PsiElement(LBRACKET)('[')
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('0')
                PsiElement(RBRACKET)(']')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
              PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('oneByte')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('fileSystem')
            PsiElement(DOT)('.')
            NapileCallExpression(CALL_EXPRESSION)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('write')
              NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                PsiElement(LPAR)('(')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('fd')
                    PsiElement(DOT)('.')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('descriptor')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('array')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
                PsiElement(COMMA)(',')
                PsiWhiteSpace(' ')
                NapileValueArgument(VALUE_ARGUMENT)
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('1')
                PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Closes this stream. This implementation closes the underlying operating\n\t * system resources allocated to represent this stream.\n\t *\n\t * @throws IOException\n\t *             if an error occurs attempting to close this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('close')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('synchronized')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              NapileValueArgument(VALUE_ARGUMENT)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('channel')
              PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileAnonymMethodExpressionImpl(ANONYM_METHOD_EXPRESSION)
              NapileAnonymMethodImpl(ANONYM_METHOD)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                NapileBlockExpressionImpl(BLOCK)
                  MODIFIER_LIST('')
                  NapileIfExpression(IF)
                    PsiElement(if)('if')
                    PsiElement(LPAR)('(')
                    NapileContainerNode(CONDITION)
                      NapileBinaryExpression(BINARY_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('channel')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('isOpened')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              PsiElement(RPAR)(')')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(ANDAND)('&&')
                        PsiWhiteSpace(' ')
                        NapileBinaryExpression(BINARY_EXPRESSION)
                          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('fd')
                            PsiElement(DOT)('.')
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('descriptor')
                          PsiWhiteSpace(' ')
                          NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                            PsiElement(GTEQ)('>=')
                          PsiWhiteSpace(' ')
                          NapileConstantExpressionImpl(INTEGER_CONSTANT)
                            PsiElement(INTEGER_LITERAL)('0')
                    PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t\t')
                    NapileContainerNode(THEN)
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('channel')
                        PsiElement(DOT)('.')
                        NapileCallExpression(CALL_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('close')
                          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                            PsiElement(LPAR)('(')
                            PsiElement(RPAR)(')')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('synchronized')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              NapileValueArgument(VALUE_ARGUMENT)
                NapileThisExpression(THIS_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(this)('this')
              PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileAnonymMethodExpressionImpl(ANONYM_METHOD_EXPRESSION)
              NapileAnonymMethodImpl(ANONYM_METHOD)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                NapileBlockExpressionImpl(BLOCK)
                  MODIFIER_LIST('')
                  NapileIfExpression(IF)
                    PsiElement(if)('if')
                    PsiElement(LPAR)('(')
                    NapileContainerNode(CONDITION)
                      NapileBinaryExpression(BINARY_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('fd')
                          PsiElement(DOT)('.')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('descriptor')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(GTEQ)('>=')
                        PsiWhiteSpace(' ')
                        NapileConstantExpressionImpl(INTEGER_CONSTANT)
                          PsiElement(INTEGER_LITERAL)('0')
                    PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t')
                    NapileContainerNode(THEN)
                      NapileBlockExpressionImpl(BLOCK)
                        PsiElement(LBRACE)('{')
                        PsiWhiteSpace('\n\t\t\t\t')
                        MODIFIER_LIST('')
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('fileSystem')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('close')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              NapileValueArgument(VALUE_ARGUMENT)
                                NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                    PsiElement(IDENTIFIER)('fd')
                                  PsiElement(DOT)('.')
                                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                    PsiElement(IDENTIFIER)('descriptor')
                              PsiElement(RPAR)(')')
                        PsiWhiteSpace('\n\t\t\t\t')
                        MODIFIER_LIST('')
                        NapileBinaryExpression(BINARY_EXPRESSION)
                          NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('fd')
                            PsiElement(DOT)('.')
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('descriptor')
                          PsiWhiteSpace(' ')
                          NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                            PsiElement(EQ)('=')
                          PsiWhiteSpace(' ')
                          NapilePrefixExpression(PREFIX_EXPRESSION)
                            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                              PsiElement(MINUS)('-')
                            NapileConstantExpressionImpl(INTEGER_CONSTANT)
                              PsiElement(INTEGER_LITERAL)('1')
                        PsiWhiteSpace('\n\t\t\t')
                        PsiElement(RBRACE)('}')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(local)('local')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('openCheck')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('fd')
                  PsiElement(DOT)('.')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('descriptor')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(LT)('<')
                PsiWhiteSpace(' ')
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('0')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileThrowExpression(THROW)
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('IOException')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')

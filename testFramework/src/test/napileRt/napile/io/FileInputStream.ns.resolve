<null>package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.io]>io</PackageDescriptorImpl[napile.io]></null>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.nio]>nio</PackageDescriptorImpl[napile.nio]>.<PackageDescriptorImpl[napile.nio.channels]>channels</PackageDescriptorImpl[napile.nio.channels]>.<MutableClassDescriptor[napile.nio.channels.FileChannel]>FileChannel</MutableClassDescriptor[napile.nio.channels.FileChannel]>
import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.luni]>luni</PackageDescriptorImpl[org.apache.harmony.luni]>.<PackageDescriptorImpl[org.apache.harmony.luni.platform]>platform</PackageDescriptorImpl[org.apache.harmony.luni.platform]>.<MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>
import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.luni]>luni</PackageDescriptorImpl[org.apache.harmony.luni]>.<PackageDescriptorImpl[org.apache.harmony.luni.platform]>platform</PackageDescriptorImpl[org.apache.harmony.luni.platform]>.<MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>Platform</MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>
import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.nio]>nio</PackageDescriptorImpl[org.apache.harmony.nio]>.<MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>FileChannelFactory</MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>

/**
 * @author VISTALL
 */
class FileInputStream : <MutableClassDescriptor[napile.io.InputStream]>InputStream</MutableClassDescriptor[napile.io.InputStream]>
{
	static local val fileSystem = <MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>Platform</MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>getFileSystem</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>()

	//local val repositioningLock = anonym : Any
	local val fd : <MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>
	local val channel : <MutableClassDescriptor[napile.nio.channels.FileChannel]>FileChannel</MutableClassDescriptor[napile.nio.channels.FileChannel]>

	this(val file : <MutableClassDescriptor[napile.io.File]>File</MutableClassDescriptor[napile.io.File]>)
	{
		<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]> <null>=</null> <ConstructorDescriptor[napile.io.FileDescriptor.this]>FileDescriptor</ConstructorDescriptor[napile.io.FileDescriptor.this]>()
		<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.readOnly]>readOnly</VariableDescriptorImpl[napile.io.FileDescriptor.readOnly]> <null>=</null> true;
		<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <null>=</null> <MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>Platform</MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>getFileSystem</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>().<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.open]>open</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.open]>(<CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.this.file]>file</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.this.file]>.<SimpleMethodDescriptorImpl[napile.io.File.properPath]>properPath</SimpleMethodDescriptorImpl[napile.io.File.properPath]>(true), <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_RDONLY]>O_RDONLY</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_RDONLY]>);
		<VariableDescriptorImpl[napile.io.FileInputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileInputStream.channel]> <null>=</null> <MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>FileChannelFactory</MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>.<SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>getFileChannel</SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>(<MutableClassDescriptor[napile.io.FileInputStream]>this</MutableClassDescriptor[napile.io.FileInputStream]>, <VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_RDONLY]>O_RDONLY</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_RDONLY]>);
	}

	override meth read() : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>
	{
		val readed = <ConstructorDescriptor[napile.lang.Array.this]>Array</ConstructorDescriptor[napile.lang.Array.this]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>(0)
		val result = <SimpleMethodDescriptorImpl[napile.io.FileInputStream.read]>read</SimpleMethodDescriptorImpl[napile.io.FileInputStream.read]>(<LocalVariableDescriptor[napile.io.FileInputStream.read.readed]>readed</LocalVariableDescriptor[napile.io.FileInputStream.read.readed]>, 0, 1);
		return if (<LocalVariableDescriptor[napile.io.FileInputStream.read.result]>result</LocalVariableDescriptor[napile.io.FileInputStream.read.result]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1) <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1 else <SimpleMethodDescriptorImpl[napile.lang.Array.get]><LocalVariableDescriptor[napile.io.FileInputStream.read.readed]>readed</LocalVariableDescriptor[napile.io.FileInputStream.read.readed]>[0]</SimpleMethodDescriptorImpl[napile.lang.Array.get]> <SimpleMethodDescriptorImpl[napile.lang.Byte.bitAnd]>&</SimpleMethodDescriptorImpl[napile.lang.Byte.bitAnd]> 0xff;
	}

	override meth read(var buffer : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>, var offset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, var count : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>) : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>
	{
		if (<CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]> <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0)
			throw <ConstructorDescriptor[napile.lang.IndexOutOfBoundsException.this]>IndexOutOfBoundsException</ConstructorDescriptor[napile.lang.IndexOutOfBoundsException.this]>();

		if (<CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
			return 0;

		<SimpleMethodDescriptorImpl[napile.io.FileInputStream.openCheck]>openCheck</SimpleMethodDescriptorImpl[napile.io.FileInputStream.openCheck]>()

		//synchronized (repositioningLock)
		//{
			// stdin requires special handling
			if (<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]> <SimpleMethodDescriptorImpl[napile.io.FileDescriptor.equals]>==</SimpleMethodDescriptorImpl[napile.io.FileDescriptor.equals]> <MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>.<VariableDescriptorImpl[napile.io.FileDescriptor.systemIn]>systemIn</VariableDescriptorImpl[napile.io.FileDescriptor.systemIn]>)
				return <VariableDescriptorImpl[napile.io.FileInputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileInputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.ttyRead]>ttyRead</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.ttyRead]>(<CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>).<SimpleMethodDescriptorImpl[napile.lang.Long.toInt]>toInt</SimpleMethodDescriptorImpl[napile.lang.Long.toInt]>();
			return <VariableDescriptorImpl[napile.io.FileInputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileInputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.read]>read</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.read]>(<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.buffer]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.offset]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileInputStream.read.count]>).<SimpleMethodDescriptorImpl[napile.lang.Long.toInt]>toInt</SimpleMethodDescriptorImpl[napile.lang.Long.toInt]>();
		//}
	}

	local meth openCheck()
	{
		if (<VariableDescriptorImpl[napile.io.FileInputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileInputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]> 0)
			throw <ConstructorDescriptor[napile.io.IOException.this]>IOException</ConstructorDescriptor[napile.io.IOException.this]>()
	}
}

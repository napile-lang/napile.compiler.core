package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.nio">nio</ref>.<ref class="PackageDescriptorImpl" to="napile.nio.channels">channels</ref>.<ref class="MutableClassDescriptor" to="napile.nio.channels.FileChannel">FileChannel</ref>
import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>
import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.Platform">Platform</ref>
import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.nio">nio</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.nio.FileChannelFactory">FileChannelFactory</ref>

/**
 * @author VISTALL
 */
class FileInputStream : <ref class="MutableClassDescriptor" to="napile.io.InputStream">InputStream</ref>
{
	static local val fileSystem = <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.Platform">Platform</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.Platform.getFileSystem">getFileSystem</ref>()

	//local val repositioningLock = anonym : Any
	local val fd : <ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>
	local val channel : <ref class="MutableClassDescriptor" to="napile.nio.channels.FileChannel">FileChannel</ref>

	this(val file : <ref class="MutableClassDescriptor" to="napile.io.File">File</ref>)
	{
		<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.io.FileDescriptor.this">FileDescriptor</ref>()
		<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.readOnly">readOnly</ref> <ref to="null">=</ref> true;
		<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.Platform">Platform</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.Platform.getFileSystem">getFileSystem</ref>().<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.open">open</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.this.file">file</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.io.File.properPath">properPath</ref>(true), <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_RDONLY">O_RDONLY</ref>);
		<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.channel">channel</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="org.apache.harmony.nio.FileChannelFactory">FileChannelFactory</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.nio.FileChannelFactory.getFileChannel">getFileChannel</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileInputStream">this</ref>, <ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_RDONLY">O_RDONLY</ref>);
	}

	override meth read() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
	{
		val readed = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>(0)
		val result = <ref class="SimpleMethodDescriptorImpl" to="napile.io.FileInputStream.read">read</ref>(<ref class="LocalVariableDescriptor" to="napile.io.FileInputStream.read.readed">readed</ref>, 0, 1);
		return if (<ref class="LocalVariableDescriptor" to="napile.io.FileInputStream.read.result">result</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1) <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1 else <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="LocalVariableDescriptor" to="napile.io.FileInputStream.read.readed">readed</ref>[0]</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Byte.bitAnd">&</ref> 0xff;
	}

	override meth read(var buffer : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var count : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
	{
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.buffer">buffer</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.offset">offset</ref> <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.lang.IndexOutOfBoundsException.this">IndexOutOfBoundsException</ref>();

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			return 0;

		<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileInputStream.openCheck">openCheck</ref>()

		//synchronized (repositioningLock)
		//{
			// stdin requires special handling
			if (<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.io.FileDescriptor.equals">==</ref> <ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.systemIn">systemIn</ref>)
				return <ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.ttyRead">ttyRead</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.buffer">buffer</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.offset">offset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.count">count</ref>).<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.toInt">toInt</ref>();
			return <ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.read">read</ref>(<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.buffer">buffer</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.offset">offset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileInputStream.read.count">count</ref>).<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.toInt">toInt</ref>();
		//}
	}

	local meth openCheck()
	{
		if (<ref class="VariableDescriptorImpl" to="napile.io.FileInputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.io.IOException.this">IOException</ref>()
	}
}

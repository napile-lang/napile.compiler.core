/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.nio">nio</ref>.<ref class="PackageDescriptorImpl" to="napile.nio.channels">channels</ref>.<ref class="MutableClassDescriptor" to="napile.nio.channels.FileChannel">FileChannel</ref>

import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.Platform">Platform</ref>
import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.nio">nio</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.nio.FileChannelFactory">FileChannelFactory</ref>
import <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>.<ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>

/**
 * A specialized {@link OutputStream} that writes to a file in the file system.
 * All write requests made by calling methods in this class are directly
 * forwarded to the equivalent function of the underlying operating system.
 * Since this may induce some performance penalty, in particular if many small
 * write requests are made, a FileOutputStream is often wrapped by a
 * BufferedOutputStream.
 *
 * @see BufferedOutputStream
 * @see FileInputStream
 */
class FileOutputStream : <ref class="MutableClassDescriptor" to="napile.io.OutputStream">OutputStream</ref>
{
	static local val fileSystem = <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.Platform">Platform</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.Platform.getFileSystem">getFileSystem</ref>()

	final val channel : <ref class="MutableClassDescriptor" to="napile.nio.channels.FileChannel">FileChannel</ref>

	final val fd : <ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>

	/**
	 * Constructs a new FileOutputStream on the File {@code file}. The
	 * parameter {@code append} determines whether or not the file is opened and
	 * appended to or just opened and overwritten.
	 *
	 * @param file
	 *            the file to which this stream writes.
	 * @param append
	 *            indicates whether or not to append to an existing file.
	 * @throws FileNotFoundException
	 *             if the {@code file} cannot be opened for writing.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 * @see java.lang.SecurityManager#checkWrite(String)
	 */
	this(val file : <ref class="MutableClassDescriptor" to="napile.io.File">File</ref>, val append : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = false)
	{
		<ref class="MutableClassDescriptor" to="napile.io.SecurityManager">SecurityManager</ref>.<ref class="VariableDescriptorImpl" to="napile.io.SecurityManager.INSTANCE">INSTANCE</ref>?.<ref class="SimpleMethodDescriptorImpl" to="napile.io.SecurityManager.checkWrite">checkWrite</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.this.file">file</ref>.<ref class="VariableDescriptorImpl" to="napile.io.File.path">path</ref>)

		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.io.FileDescriptor.this">FileDescriptor</ref>();
		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref to="null">=</ref> <ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.open">open</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.this.file">file</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.io.File.properPath">properPath</ref>(true), if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.this.append">append</ref>) <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_APPEND">O_APPEND</ref> else <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_WRONLY">O_WRONLY</ref>);
		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.channel">channel</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="org.apache.harmony.nio.FileChannelFactory">FileChannelFactory</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.nio.FileChannelFactory.getFileChannel">getFileChannel</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileOutputStream">this</ref>, <ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.this.append">append</ref>) <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_APPEND">O_APPEND</ref> else <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_WRONLY">O_WRONLY</ref>);
	}

	/**
	 * Constructs a new FileOutputStream on the FileDescriptor {@code fd}. The
	 * file must already be open, therefore no {@code FileNotFoundException}
	 * will be thrown.
	 *
	 * @param fd
	 *            the FileDescriptor to which this stream writes.
	 * @throws NullPointerException
	 *             if {@code fd} is {@code null}.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 */
	this(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>)
	{
		<ref class="MutableClassDescriptor" to="napile.io.SecurityManager">SecurityManager</ref>.<ref class="VariableDescriptorImpl" to="napile.io.SecurityManager.INSTANCE">INSTANCE</ref>?.<ref class="SimpleMethodDescriptorImpl" to="napile.io.SecurityManager.checkWrite">checkWrite</ref>(<ref class="CallParameterAsReferenceDescriptorImpl" to="napile.io.FileOutputStream.this.fd">fd</ref>)
		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.channel">channel</ref> <ref to="null">=</ref> <ref class="MutableClassDescriptor" to="org.apache.harmony.nio.FileChannelFactory">FileChannelFactory</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.nio.FileChannelFactory.getFileChannel">getFileChannel</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileOutputStream">this</ref>, <ref class="CallParameterAsReferenceDescriptorImpl" to="napile.io.FileOutputStream.this.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>.<ref class="VariableDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.O_WRONLY">O_WRONLY</ref>)
	}

	/**
	 * Writes {@code count} bytes from the byte array {@code buffer} starting at
	 * {@code offset} to this stream.
	 *
	 * @param buffer
	 *            the buffer to write to this stream.
	 * @param offset
	 *            the index of the first byte in {@code buffer} to write.
	 * @param count
	 *            the number of bytes from {@code buffer} to write.
	 * @throws IndexOutOfBoundsException
	 *             if {@code count < 0} or {@code offset < 0}, or if
	 *             {@code count + offset} is greater than the length of
	 *             {@code buffer}.
	 * @throws IOException
	 *             if this stream is closed or an error occurs attempting to
	 *             write to this stream.
	 */
	override meth write(var buffer : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var count : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
		// avoid int overflow, check null buffer
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.buffer">buffer</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.buffer">buffer</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.offset">offset</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.IndexOutOfBoundsException.this">IndexOutOfBoundsException</ref>(<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.module.Module.getBundle">getBundle</ref>().<ref class="SimpleMethodDescriptorImpl" to="napile.resource.ResourceBundle.getString">getString</ref>('luni.13'));

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			return;

		<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.openCheck">openCheck</ref>();
		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.write">write</ref>(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.buffer">buffer</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.offset">offset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.count">count</ref>);
	}

	/**
	 * Writes the specified byte {@code oneByte} to this stream. Only the low
	 * order byte of the integer {@code oneByte} is written.
	 *
	 * @param oneByte
	 *            the byte to be written.
	 * @throws IOException
	 *             if this stream is closed an error occurs attempting to write
	 *             to this stream.
	 */
	override meth write(val oneByte : <ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>)
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.openCheck">openCheck</ref>()
		val array = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>(0)
		<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="LocalVariableDescriptor" to="napile.io.FileOutputStream.write.array">array</ref>[0]</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.FileOutputStream.write.oneByte">oneByte</ref>
		<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.write">write</ref>(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>, <ref class="LocalVariableDescriptor" to="napile.io.FileOutputStream.write.array">array</ref>, 0, 1)
	}

	/**
	 * Closes this stream. This implementation closes the underlying operating
	 * system resources allocated to represent this stream.
	 *
	 * @throws IOException
	 *             if an error occurs attempting to close this stream.
	 */
	override meth close()
	{
		<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.synchronized">synchronized</ref>(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.channel">channel</ref>)
		{
			if(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.channel">channel</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.nio.channels.FileChannel.isOpened">isOpened</ref>() <ref to="null">&&</ref> <ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo">>=</ref> 0)
				<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.channel">channel</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.nio.channels.FileChannel.close">close</ref>()
		}

		<ref class="SimpleMethodDescriptorImpl" to="napile.io.FileOutputStream.synchronized">synchronized</ref>(<ref class="MutableClassDescriptor" to="napile.io.FileOutputStream">this</ref>)
		{
			if(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo">>=</ref> 0)
			{
				<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fileSystem">fileSystem</ref>.<ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.IFileSystem.close">close</ref>(<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref>)
				<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1
			}
		}
	}

	local meth openCheck()
	{
		if (<ref class="VariableDescriptorImpl" to="napile.io.FileOutputStream.fd">fd</ref>.<ref class="VariableDescriptorImpl" to="napile.io.FileDescriptor.descriptor">descriptor</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.io.IOException.this">IOException</ref>()
	}
}
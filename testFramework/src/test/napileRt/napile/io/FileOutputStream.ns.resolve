/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.io]>io</PackageDescriptorImpl[napile.io]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.module]>module</PackageDescriptorImpl[napile.module]>.<MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.nio]>nio</PackageDescriptorImpl[napile.nio]>.<PackageDescriptorImpl[napile.nio.channels]>channels</PackageDescriptorImpl[napile.nio.channels]>.<MutableClassDescriptor[napile.nio.channels.FileChannel]>FileChannel</MutableClassDescriptor[napile.nio.channels.FileChannel]>

import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.luni]>luni</PackageDescriptorImpl[org.apache.harmony.luni]>.<PackageDescriptorImpl[org.apache.harmony.luni.platform]>platform</PackageDescriptorImpl[org.apache.harmony.luni.platform]>.<MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>Platform</MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>
import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.nio]>nio</PackageDescriptorImpl[org.apache.harmony.nio]>.<MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>FileChannelFactory</MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>
import <PackageDescriptorImpl[org]>org</PackageDescriptorImpl[org]>.<PackageDescriptorImpl[org.apache]>apache</PackageDescriptorImpl[org.apache]>.<PackageDescriptorImpl[org.apache.harmony]>harmony</PackageDescriptorImpl[org.apache.harmony]>.<PackageDescriptorImpl[org.apache.harmony.luni]>luni</PackageDescriptorImpl[org.apache.harmony.luni]>.<PackageDescriptorImpl[org.apache.harmony.luni.platform]>platform</PackageDescriptorImpl[org.apache.harmony.luni.platform]>.<MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>

/**
 * A specialized {@link OutputStream} that writes to a file in the file system.
 * All write requests made by calling methods in this class are directly
 * forwarded to the equivalent function of the underlying operating system.
 * Since this may induce some performance penalty, in particular if many small
 * write requests are made, a FileOutputStream is often wrapped by a
 * BufferedOutputStream.
 *
 * @see BufferedOutputStream
 * @see FileInputStream
 */
class FileOutputStream : <MutableClassDescriptor[napile.io.OutputStream]>OutputStream</MutableClassDescriptor[napile.io.OutputStream]>
{
	static local val fileSystem = <MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>Platform</MutableClassDescriptor[org.apache.harmony.luni.platform.Platform]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>getFileSystem</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.Platform.getFileSystem]>()

	final val channel : <MutableClassDescriptor[napile.nio.channels.FileChannel]>FileChannel</MutableClassDescriptor[napile.nio.channels.FileChannel]>

	final val fd : <MutableClassDescriptor[napile.io.FileDescriptor]>FileDescriptor</MutableClassDescriptor[napile.io.FileDescriptor]>

	/**
	 * Constructs a new FileOutputStream on the File {@code file}. The
	 * parameter {@code append} determines whether or not the file is opened and
	 * appended to or just opened and overwritten.
	 *
	 * @param file
	 *            the file to which this stream writes.
	 * @param append
	 *            indicates whether or not to append to an existing file.
	 * @throws FileNotFoundException
	 *             if the {@code file} cannot be opened for writing.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 * @see java.lang.SecurityManager#checkWrite(String)
	 */
	this(val file : <MutableClassDescriptor[napile.io.File]>File</MutableClassDescriptor[napile.io.File]>, val append : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]> = false)
	{
		<MutableClassDescriptor[napile.io.SecurityManager]>SecurityManager</MutableClassDescriptor[napile.io.SecurityManager]>.<VariableDescriptorImpl[napile.io.SecurityManager.INSTANCE]>INSTANCE</VariableDescriptorImpl[napile.io.SecurityManager.INSTANCE]>?.<SimpleMethodDescriptorImpl[napile.io.SecurityManager.checkWrite]>checkWrite</SimpleMethodDescriptorImpl[napile.io.SecurityManager.checkWrite]>(<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.file]>file</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.file]>.<VariableDescriptorImpl[napile.io.File.path]>path</VariableDescriptorImpl[napile.io.File.path]>)

		<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]> <null>=</null> <ConstructorDescriptor[napile.io.FileDescriptor.this]>FileDescriptor</ConstructorDescriptor[napile.io.FileDescriptor.this]>();
		<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <null>=</null> <VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.open]>open</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.open]>(<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.file]>file</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.file]>.<SimpleMethodDescriptorImpl[napile.io.File.properPath]>properPath</SimpleMethodDescriptorImpl[napile.io.File.properPath]>(true), if(<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.append]>append</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.append]>) <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_APPEND]>O_APPEND</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_APPEND]> else <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>O_WRONLY</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>);
		<VariableDescriptorImpl[napile.io.FileOutputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileOutputStream.channel]> <null>=</null> <MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>FileChannelFactory</MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>.<SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>getFileChannel</SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>(<MutableClassDescriptor[napile.io.FileOutputStream]>this</MutableClassDescriptor[napile.io.FileOutputStream]>, <VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, if(<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.append]>append</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.this.append]>) <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_APPEND]>O_APPEND</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_APPEND]> else <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>O_WRONLY</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>);
	}

	/**
	 * Constructs a new FileOutputStream on the FileDescriptor {@code fd}. The
	 * file must already be open, therefore no {@code FileNotFoundException}
	 * will be thrown.
	 *
	 * @param fd
	 *            the FileDescriptor to which this stream writes.
	 * @throws NullPointerException
	 *             if {@code fd} is {@code null}.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 */
	this(<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>)
	{
		<MutableClassDescriptor[napile.io.SecurityManager]>SecurityManager</MutableClassDescriptor[napile.io.SecurityManager]>.<VariableDescriptorImpl[napile.io.SecurityManager.INSTANCE]>INSTANCE</VariableDescriptorImpl[napile.io.SecurityManager.INSTANCE]>?.<SimpleMethodDescriptorImpl[napile.io.SecurityManager.checkWrite]>checkWrite</SimpleMethodDescriptorImpl[napile.io.SecurityManager.checkWrite]>(<CallParameterAsReferenceDescriptorImpl[napile.io.FileOutputStream.this.fd]>fd</CallParameterAsReferenceDescriptorImpl[napile.io.FileOutputStream.this.fd]>)
		<VariableDescriptorImpl[napile.io.FileOutputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileOutputStream.channel]> <null>=</null> <MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>FileChannelFactory</MutableClassDescriptor[org.apache.harmony.nio.FileChannelFactory]>.<SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>getFileChannel</SimpleMethodDescriptorImpl[org.apache.harmony.nio.FileChannelFactory.getFileChannel]>(<MutableClassDescriptor[napile.io.FileOutputStream]>this</MutableClassDescriptor[napile.io.FileOutputStream]>, <CallParameterAsReferenceDescriptorImpl[napile.io.FileOutputStream.this.fd]>fd</CallParameterAsReferenceDescriptorImpl[napile.io.FileOutputStream.this.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, <MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>IFileSystem</MutableClassDescriptor[org.apache.harmony.luni.platform.IFileSystem]>.<VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>O_WRONLY</VariableDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.O_WRONLY]>)
	}

	/**
	 * Writes {@code count} bytes from the byte array {@code buffer} starting at
	 * {@code offset} to this stream.
	 *
	 * @param buffer
	 *            the buffer to write to this stream.
	 * @param offset
	 *            the index of the first byte in {@code buffer} to write.
	 * @param count
	 *            the number of bytes from {@code buffer} to write.
	 * @throws IndexOutOfBoundsException
	 *             if {@code count < 0} or {@code offset < 0}, or if
	 *             {@code count + offset} is greater than the length of
	 *             {@code buffer}.
	 * @throws IOException
	 *             if this stream is closed or an error occurs attempting to
	 *             write to this stream.
	 */
	override meth write(var buffer : <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>, var offset : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>, var count : <MutableClassDescriptor[napile.lang.Int]>Int</MutableClassDescriptor[napile.lang.Int]>)
	{
		// avoid int overflow, check null buffer
		if (<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]> <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0 <null>||</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>)
			throw <ConstructorDescriptor[napile.lang.IndexOutOfBoundsException.this]>IndexOutOfBoundsException</ConstructorDescriptor[napile.lang.IndexOutOfBoundsException.this]>(<MutableClassDescriptor[napile.module.Module]>Module</MutableClassDescriptor[napile.module.Module]>.<SimpleMethodDescriptorImpl[napile.module.Module.getBundle]>getBundle</SimpleMethodDescriptorImpl[napile.module.Module.getBundle]>().<SimpleMethodDescriptorImpl[napile.resource.ResourceBundle.getString]>getString</SimpleMethodDescriptorImpl[napile.resource.ResourceBundle.getString]>("luni.13"));

		if (<CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>==</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
			return;

		<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.openCheck]>openCheck</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.openCheck]>();
		<VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.write]>write</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.write]>(<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>buffer</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.buffer]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>offset</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.offset]>, <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]>count</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.count]>);
	}

	/**
	 * Writes the specified byte {@code oneByte} to this stream. Only the low
	 * order byte of the integer {@code oneByte} is written.
	 *
	 * @param oneByte
	 *            the byte to be written.
	 * @throws IOException
	 *             if this stream is closed an error occurs attempting to write
	 *             to this stream.
	 */
	override meth write(val oneByte : <MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>)
	{
		<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.openCheck]>openCheck</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.openCheck]>()
		val array = <ConstructorDescriptor[napile.lang.Array.this]>Array</ConstructorDescriptor[napile.lang.Array.this]><<MutableClassDescriptor[napile.lang.Byte]>Byte</MutableClassDescriptor[napile.lang.Byte]>>(0)
		<SimpleMethodDescriptorImpl[napile.lang.Array.set]><LocalVariableDescriptor[napile.io.FileOutputStream.write.array]>array</LocalVariableDescriptor[napile.io.FileOutputStream.write.array]>[0]</SimpleMethodDescriptorImpl[napile.lang.Array.set]> <null>=</null> <CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.oneByte]>oneByte</CallParameterAsVariableDescriptorImpl[napile.io.FileOutputStream.write.oneByte]>
		<VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.write]>write</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.write]>(<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>, <LocalVariableDescriptor[napile.io.FileOutputStream.write.array]>array</LocalVariableDescriptor[napile.io.FileOutputStream.write.array]>, 0, 1)
	}

	/**
	 * Closes this stream. This implementation closes the underlying operating
	 * system resources allocated to represent this stream.
	 *
	 * @throws IOException
	 *             if an error occurs attempting to close this stream.
	 */
	override meth close()
	{
		<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.synchronized]>synchronized</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.synchronized]>(<VariableDescriptorImpl[napile.io.FileOutputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileOutputStream.channel]>)
		{
			if(<VariableDescriptorImpl[napile.io.FileOutputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileOutputStream.channel]>.<SimpleMethodDescriptorImpl[napile.nio.channels.FileChannel.isOpened]>isOpened</SimpleMethodDescriptorImpl[napile.nio.channels.FileChannel.isOpened]>() <null>&&</null> <VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]> 0)
				<VariableDescriptorImpl[napile.io.FileOutputStream.channel]>channel</VariableDescriptorImpl[napile.io.FileOutputStream.channel]>.<SimpleMethodDescriptorImpl[napile.nio.channels.FileChannel.close]>close</SimpleMethodDescriptorImpl[napile.nio.channels.FileChannel.close]>()
		}

		<SimpleMethodDescriptorImpl[napile.io.FileOutputStream.synchronized]>synchronized</SimpleMethodDescriptorImpl[napile.io.FileOutputStream.synchronized]>(<MutableClassDescriptor[napile.io.FileOutputStream]>this</MutableClassDescriptor[napile.io.FileOutputStream]>)
		{
			if(<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]>>=</SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]> 0)
			{
				<VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>fileSystem</VariableDescriptorImpl[napile.io.FileOutputStream.fileSystem]>.<SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.close]>close</SimpleMethodDescriptorImpl[org.apache.harmony.luni.platform.IFileSystem.close]>(<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>)
				<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <null>=</null> <SimpleMethodDescriptorImpl[napile.lang.Int.minus]>-</SimpleMethodDescriptorImpl[napile.lang.Int.minus]>1
			}
		}
	}

	local meth openCheck()
	{
		if (<VariableDescriptorImpl[napile.io.FileOutputStream.fd]>fd</VariableDescriptorImpl[napile.io.FileOutputStream.fd]>.<VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]>descriptor</VariableDescriptorImpl[napile.io.FileDescriptor.descriptor]> <SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Long.compareTo]> 0)
			throw <ConstructorDescriptor[napile.io.IOException.this]>IOException</ConstructorDescriptor[napile.io.IOException.this]>()
	}
}
NapileFileImpl: OutputStream.ns
  PsiComment(BLOCK_COMMENT)('/* Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the "License"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */')
  PsiWhiteSpace('\n\n')
  NapilePackageImpl(PACKAGE)
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('napile')
    PsiElement(DOT)('.')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('io')
  PsiWhiteSpace('\n\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('napile')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('module')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('Module')
  PsiWhiteSpace('\n\n')
  PsiComment(BLOCK_COMMENT)('/**\n * The base class for all output streams. An output stream is a means of writing\n * data to a target in a byte-wise manner. Most output streams expect the\n * {@link #flush()} method to be called before closing the stream, to ensure all\n * data is actually written through.\n * <p>\n * This abstract class does not provide a fully working implementation, so it\n * needs to be subclassed, and at least the {@link #write(int)} method needs to\n * be overridden. Overriding some of the non-abstract methods is also often\n * advised, since it might result in higher efficiency.\n * <p>\n * Many specialized output streams for purposes like writing to a file already\n * exist in this package.\n *\n * @see InputStream\n */')
  PsiWhiteSpace('\n')
  CLASS
    MODIFIER_LIST
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('OutputStream')
    PsiWhiteSpace(' ')
    TYPE_PARAMETER_LIST('')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    NapileTypeListImpl(EXTEND_TYPE_LIST)
      NapileTypeReferenceImpl(TYPE_REFERENCE)
        NapileUserTypeImpl(USER_TYPE)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('Closeable')
      PsiWhiteSpace(' ')
      PsiElement(AND)('&')
      PsiWhiteSpace(' ')
      NapileTypeReferenceImpl(TYPE_REFERENCE)
        NapileUserTypeImpl(USER_TYPE)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('Flushable')
    PsiWhiteSpace('\n')
    NapileClassBody(CLASS_BODY)
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Closes this stream. Implementations of this method should free any\n\t * resources used by the stream. This implementation does nothing.\n\t *\n\t * @throws IOException\n\t *             if an error occurs while closing this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('close')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Flushes this stream. Implementations of this method should ensure that\n\t * any buffered data is written out. This implementation does nothing.\n\t *\n\t * @throws IOException\n\t *             if an error occurs while flushing this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('flush')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Writes the entire contents of the byte array {@code buffer} to this\n\t * stream.\n\t *\n\t * @param buffer\n\t *            the buffer to be written.\n\t * @throws IOException\n\t *             if an error occurs while writing to this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('write')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('buffer')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Array')
                NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                  PsiElement(LT)('<')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Byte')
                  PsiElement(GT)('>')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileCallExpression(CALL_EXPRESSION)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('write')
            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
              PsiElement(LPAR)('(')
              NapileValueArgument(VALUE_ARGUMENT)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('buffer')
              PsiElement(COMMA)(',')
              PsiWhiteSpace(' ')
              NapileValueArgument(VALUE_ARGUMENT)
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('0')
              PsiElement(COMMA)(',')
              PsiWhiteSpace(' ')
              NapileValueArgument(VALUE_ARGUMENT)
                NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('buffer')
                  PsiElement(DOT)('.')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('length')
              PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Writes {@code count} bytes from the byte array {@code buffer} starting at\n\t * position {@code offset} to this stream.\n\t *\n\t * @param buffer\n\t *            the buffer to be written.\n\t * @param offset\n\t *            the start position in {@code buffer} from where to get bytes.\n\t * @param count\n\t *            the number of bytes from {@code buffer} to write to this\n\t *            stream.\n\t * @throws IOException\n\t *             if an error occurs while writing to this stream.\n\t * @throws IndexOutOfBoundsException\n\t *             if {@code offset < 0} or {@code count < 0}, or if\n\t *             {@code offset + count} is bigger than the length of\n\t *             {@code buffer}.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('write')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('buffer')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Array')
                NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                  PsiElement(LT)('<')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Byte')
                  PsiElement(GT)('>')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('offset')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          PsiComment(EOL_COMMENT)('// avoid int overflow, check null buffer')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('offset')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(GT)('>')
                      PsiWhiteSpace(' ')
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('buffer')
                        PsiElement(DOT)('.')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('length')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(OROR)('||')
                    PsiWhiteSpace(' ')
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('offset')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(LT)('<')
                      PsiWhiteSpace(' ')
                      NapileConstantExpressionImpl(INTEGER_CONSTANT)
                        PsiElement(INTEGER_LITERAL)('0')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(OROR)('||')
                  PsiWhiteSpace(' ')
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('count')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(LT)('<')
                    PsiWhiteSpace(' ')
                    NapileConstantExpressionImpl(INTEGER_CONSTANT)
                      PsiElement(INTEGER_LITERAL)('0')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(OROR)('||')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(GT)('>')
                  PsiWhiteSpace(' ')
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('buffer')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('length')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(MINUS)('-')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('offset')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileThrowExpression(THROW)
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('IndexOutOfBoundsException')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    NapileValueArgument(VALUE_ARGUMENT)
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('Module')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('getBundle')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              PsiElement(RPAR)(')')
                        PsiElement(DOT)('.')
                        NapileCallExpression(CALL_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('getString')
                          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                            PsiElement(LPAR)('(')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileConstantExpressionImpl(STRING_CONSTANT)
                                PsiElement(STRING_LITERAL)(''luni.13'')
                            PsiElement(RPAR)(')')
                    PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('i')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('offset')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileWhileExpression(WHILE)
            PsiElement(while)('while')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('i')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(LT)('<')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('offset')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(PLUS)('+')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileContainerNode(BODY)
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('write')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    NapileValueArgument(VALUE_ARGUMENT)
                      NapileArrayAccessExpressionImpl(ARRAY_ACCESS_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('buffer')
                        NapileContainerNode(INDICES)
                          PsiElement(LBRACKET)('[')
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('i')
                          PsiElement(RBRACKET)(']')
                    PsiElement(RPAR)(')')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapilePostfixExpression(POSTFIX_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('i')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(PLUSPLUS)('++')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Writes a single byte to this stream. Only the least significant byte of\n\t * the integer {@code oneByte} is written to the stream.\n\t *\n\t * @param oneByte\n\t *            the byte to be written.\n\t * @throws IOException\n\t *             if an error occurs while writing to this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('write')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('oneByte')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Byte')
          PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Returns true if this writer has encountered and suppressed an error. Used\n\t * by PrintStreams as an alternative to checked exceptions.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('checkError')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Bool')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        NapileConstantExpressionImpl(BOOLEAN_CONSTANT)
          PsiElement(false)('false')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n')

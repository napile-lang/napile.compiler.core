/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package napile.io

import napile.module.Module
import napile.nio.channels.FileChannel

import org.apache.harmony.luni.platform.Platform
import org.apache.harmony.nio.FileChannelFactory
import org.apache.harmony.luni.platform.IFileSystem

/**
 * A specialized {@link OutputStream} that writes to a file in the file system.
 * All write requests made by calling methods in this class are directly
 * forwarded to the equivalent function of the underlying operating system.
 * Since this may induce some performance penalty, in particular if many small
 * write requests are made, a FileOutputStream is often wrapped by a
 * BufferedOutputStream.
 *
 * @see BufferedOutputStream
 * @see FileInputStream
 */
class FileOutputStream : OutputStream
{
	static local val fileSystem = Platform.getFileSystem()

	final val channel : FileChannel

	final val fd : FileDescriptor

	/**
	 * Constructs a new FileOutputStream on the File {@code file}. The
	 * parameter {@code append} determines whether or not the file is opened and
	 * appended to or just opened and overwritten.
	 *
	 * @param file
	 *            the file to which this stream writes.
	 * @param append
	 *            indicates whether or not to append to an existing file.
	 * @throws FileNotFoundException
	 *             if the {@code file} cannot be opened for writing.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 * @see java.lang.SecurityManager#checkWrite(String)
	 */
	this(val file : File, val append : Bool = false)
	{
		SecurityManager.INSTANCE?.checkWrite(file.path)

		fd = FileDescriptor();
		fd.descriptor = fileSystem.open(file.properPath(true), if(append) IFileSystem.O_APPEND else IFileSystem.O_WRONLY);
		channel = FileChannelFactory.getFileChannel(this, fd.descriptor, if(append) IFileSystem.O_APPEND else IFileSystem.O_WRONLY);
	}

	/**
	 * Constructs a new FileOutputStream on the FileDescriptor {@code fd}. The
	 * file must already be open, therefore no {@code FileNotFoundException}
	 * will be thrown.
	 *
	 * @param fd
	 *            the FileDescriptor to which this stream writes.
	 * @throws NullPointerException
	 *             if {@code fd} is {@code null}.
	 * @throws SecurityException
	 *             if a {@code SecurityManager} is installed and it denies the
	 *             write request.
	 * @see java.lang.SecurityManager#checkWrite(FileDescriptor)
	 */
	this(fd)
	{
		SecurityManager.INSTANCE?.checkWrite(fd)
		channel = FileChannelFactory.getFileChannel(this, fd.descriptor, IFileSystem.O_WRONLY)
	}

	/**
	 * Writes {@code count} bytes from the byte array {@code buffer} starting at
	 * {@code offset} to this stream.
	 *
	 * @param buffer
	 *            the buffer to write to this stream.
	 * @param offset
	 *            the index of the first byte in {@code buffer} to write.
	 * @param count
	 *            the number of bytes from {@code buffer} to write.
	 * @throws IndexOutOfBoundsException
	 *             if {@code count < 0} or {@code offset < 0}, or if
	 *             {@code count + offset} is greater than the length of
	 *             {@code buffer}.
	 * @throws IOException
	 *             if this stream is closed or an error occurs attempting to
	 *             write to this stream.
	 */
	override meth write(var buffer : Array<Byte>, var offset : Int, var count : Int)
	{
		// avoid int overflow, check null buffer
		if (offset > buffer.length || offset < 0 || count < 0 || count > buffer.length - offset)
			throw IndexOutOfBoundsException(Module.getBundle().getString("luni.13"));

		if (count == 0)
			return;

		openCheck();
		fileSystem.write(fd.descriptor, buffer, offset, count);
	}

	/**
	 * Writes the specified byte {@code oneByte} to this stream. Only the low
	 * order byte of the integer {@code oneByte} is written.
	 *
	 * @param oneByte
	 *            the byte to be written.
	 * @throws IOException
	 *             if this stream is closed an error occurs attempting to write
	 *             to this stream.
	 */
	override meth write(val oneByte : Byte)
	{
		openCheck()
		val array = Array<Byte>(0)
		array[0] = oneByte
		fileSystem.write(fd.descriptor, array, 0, 1)
	}

	/**
	 * Closes this stream. This implementation closes the underlying operating
	 * system resources allocated to represent this stream.
	 *
	 * @throws IOException
	 *             if an error occurs attempting to close this stream.
	 */
	override meth close()
	{
		synchronized(channel)
		{
			if(channel.isOpened() && fd.descriptor >= 0)
				channel.close()
		}

		synchronized(this)
		{
			if(fd.descriptor >= 0)
			{
				fileSystem.close(fd.descriptor)
				fd.descriptor = -1
			}
		}
	}

	local meth openCheck()
	{
		if (fd.descriptor < 0)
			throw IOException()
	}
}
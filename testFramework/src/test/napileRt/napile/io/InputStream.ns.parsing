NapileFileImpl: InputStream.ns
  PsiComment(BLOCK_COMMENT)('/*\n *  Licensed to the Apache Software Foundation (ASF) under one or more\n *  contributor license agreements.  See the NOTICE file distributed with\n *  this work for additional information regarding copyright ownership.\n *  The ASF licenses this file to You under the Apache License, Version 2.0\n *  (the "License"); you may not use this file except in compliance with\n *  the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */')
  PsiWhiteSpace('\n\n')
  NapilePackageImpl(PACKAGE)
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('napile')
    PsiElement(DOT)('.')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('io')
  PsiWhiteSpace('\n\n')
  NapileImportDirective(IMPORT_DIRECTIVE)
    PsiElement(import)('import')
    PsiWhiteSpace(' ')
    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('napile')
        PsiElement(DOT)('.')
        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(IDENTIFIER)('module')
      PsiElement(DOT)('.')
      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
        PsiElement(IDENTIFIER)('Module')
  PsiWhiteSpace('\n\n\n')
  PsiComment(BLOCK_COMMENT)('/**\n * The base class for all input streams. An input stream is a means of reading\n * data from a source in a byte-wise manner.\n * <p>\n * Some input streams also support marking a position in the input stream and\n * returning to this position later. This abstract class does not provide a\n * fully working implementation, so it needs to be subclassed, and at least the\n * {@link #read()} method needs to be overridden. Overriding some of the\n * non-abstract methods is also often advised, since it might result in higher\n * efficiency.\n * <p>\n * Many specialized input streams for purposes like reading from a file already\n * exist in this package.\n *\n * @see OutputStream\n */')
  PsiWhiteSpace('\n')
  CLASS
    MODIFIER_LIST
      PsiElement(abstract)('abstract')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('InputStream')
    PsiWhiteSpace(' ')
    TYPE_PARAMETER_LIST('')
    PsiElement(COLON)(':')
    PsiWhiteSpace(' ')
    NapileTypeListImpl(EXTEND_TYPE_LIST)
      NapileTypeReferenceImpl(TYPE_REFERENCE)
        NapileUserTypeImpl(USER_TYPE)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('Closeable')
    PsiWhiteSpace('\n')
    NapileClassBody(CLASS_BODY)
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n\t')
      VARIABLE
        MODIFIER_LIST
          PsiElement(static)('static')
          PsiWhiteSpace(' ')
          PsiElement(local)('local')
        PsiWhiteSpace(' ')
        PsiElement(var)('var')
        PsiWhiteSpace(' ')
        TYPE_PARAMETER_LIST('')
        PsiElement(IDENTIFIER)('skipBuf')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileNullableTypeImpl(NULLABLE_TYPE)
            NapileUserTypeImpl(USER_TYPE)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('Array')
              NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                PsiElement(LT)('<')
                NapileTypeReferenceImpl(TYPE_REFERENCE)
                  NapileUserTypeImpl(USER_TYPE)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('Byte')
                PsiElement(GT)('>')
            PsiElement(QUEST)('?')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Returns the number of bytes that are available before this stream will\n\t * block. This implementation always returns 0. Subclasses should override\n\t * and indicate the correct number of bytes available.\n\t *\n\t * @return the number of bytes available before blocking.\n\t * @throws IOException\n\t *             if an error occurs in this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('available')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Int')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        NapileConstantExpressionImpl(INTEGER_CONSTANT)
          PsiElement(INTEGER_LITERAL)('0')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Closes this stream. Concrete implementations of this class should free\n\t * any resources during close. This implementation does nothing.\n\t *\n\t * @throws IOException\n\t *             if an error occurs while closing this stream.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST
          PsiElement(override)('override')
        PsiWhiteSpace(' ')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('close')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Sets a mark position in this InputStream. The parameter {@code readlimit}\n\t * indicates how many bytes can be read before the mark is invalidated.\n\t * Sending {@code reset()} will reposition the stream back to the marked\n\t * position provided {@code readLimit} has not been surpassed.\n\t * <p>\n\t * This default implementation does nothing and concrete subclasses must\n\t * provide their own implementation.\n\t *\n\t * @param readlimit\n\t *            the number of bytes that can be read from this stream before\n\t *            the mark is invalidated.\n\t * @see #markSupported()\n\t * @see #reset()\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('mark')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('readlimit')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Indicates whether this stream supports the {@code mark()} and\n\t * {@code reset()} methods. The default implementation returns {@code false}.\n\t *\n\t * @return always {@code false}.\n\t * @see #mark(int)\n\t * @see #reset()\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('markSupported')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Bool')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        NapileConstantExpressionImpl(BOOLEAN_CONSTANT)
          PsiElement(false)('false')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Reads a single byte from this stream and returns it as an integer in the\n\t * range from 0 to 255. Returns -1 if the end of the stream has been\n\t * reached. Blocks until one byte has been read, the end of the source\n\t * stream is detected or an exception is thrown.\n\t *\n\t * @return the byte read or -1 if the end of stream has been reached.\n\t * @throws IOException\n\t *             if the stream is closed or another IOException occurs.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('read')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Int')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Reads bytes from this stream and stores them in the byte array {@code b}.\n\t *\n\t * @param b\n\t *            the byte array in which to store the bytes read.\n\t * @return the number of bytes actually read or -1 if the end of the stream\n\t *         has been reached.\n\t * @throws IOException\n\t *             if this stream is closed or another IOException occurs.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('read')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('b')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Array')
                NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                  PsiElement(LT)('<')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Byte')
                  PsiElement(GT)('>')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Int')
        PsiWhiteSpace(' ')
        PsiElement(EQ)('=')
        PsiWhiteSpace(' ')
        NapileCallExpression(CALL_EXPRESSION)
          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(IDENTIFIER)('read')
          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
            PsiElement(LPAR)('(')
            NapileValueArgument(VALUE_ARGUMENT)
              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(IDENTIFIER)('b')
            PsiElement(COMMA)(',')
            PsiWhiteSpace(' ')
            NapileValueArgument(VALUE_ARGUMENT)
              NapileConstantExpressionImpl(INTEGER_CONSTANT)
                PsiElement(INTEGER_LITERAL)('0')
            PsiElement(COMMA)(',')
            PsiWhiteSpace(' ')
            NapileValueArgument(VALUE_ARGUMENT)
              NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('b')
                PsiElement(DOT)('.')
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('length')
            PsiElement(RPAR)(')')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Reads at most {@code length} bytes from this stream and stores them in\n\t * the byte array {@code b} starting at {@code offset}.\n\t *\n\t * @param b\n\t *            the byte array in which to store the bytes read.\n\t * @param offset\n\t *            the initial position in {@code buffer} to store the bytes read\n\t *            from this stream.\n\t * @param length\n\t *            the maximum number of bytes to store in {@code b}.\n\t * @return the number of bytes actually read or -1 if the end of the stream\n\t *         has been reached.\n\t * @throws IndexOutOfBoundsException\n\t *             if {@code offset < 0} or {@code length < 0}, or if\n\t *             {@code offset + length} is greater than the length of\n\t *             {@code b}.\n\t * @throws IOException\n\t *             if the stream is closed or another IOException occurs.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('read')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('buffer')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Array')
                NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                  PsiElement(LT)('<')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Byte')
                  PsiElement(GT)('>')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('offset')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('count')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Int')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          PsiComment(EOL_COMMENT)('// Force null check for b first!')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('offset')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(GT)('>')
                  PsiWhiteSpace(' ')
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('buffer')
                    PsiElement(DOT)('.')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('length')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(OROR)('||')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('offset')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(LT)('<')
                  PsiWhiteSpace(' ')
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileThrowExpression(THROW)
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('ArrayIndexOutOfBoundsException')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    NapileValueArgument(VALUE_ARGUMENT)
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('Module')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('getBundle')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              PsiElement(RPAR)(')')
                        PsiElement(DOT)('.')
                        NapileCallExpression(CALL_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('getString')
                          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                            PsiElement(LPAR)('(')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileConstantExpressionImpl(STRING_CONSTANT)
                                PsiElement(STRING_LITERAL)(''luni.12'')
                            PsiElement(COMMA)(',')
                            PsiWhiteSpace(' ')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileArrayOfExpressionImpl(ARRAY)
                                PsiElement(arrayOf)('arrayOf')
                                PsiElement(LPAR)('(')
                                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                  PsiElement(IDENTIFIER)('offset')
                                PsiElement(RPAR)(')')
                            PsiElement(RPAR)(')')
                    PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(LT)('<')
                  PsiWhiteSpace(' ')
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(OROR)('||')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('count')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(GT)('>')
                  PsiWhiteSpace(' ')
                  NapileBinaryExpression(BINARY_EXPRESSION)
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('buffer')
                      PsiElement(DOT)('.')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('length')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                      PsiElement(MINUS)('-')
                    PsiWhiteSpace(' ')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('offset')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileThrowExpression(THROW)
                PsiElement(throw)('throw')
                PsiWhiteSpace(' ')
                NapileCallExpression(CALL_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('ArrayIndexOutOfBoundsException')
                  NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                    PsiElement(LPAR)('(')
                    NapileValueArgument(VALUE_ARGUMENT)
                      NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                        NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('Module')
                          PsiElement(DOT)('.')
                          NapileCallExpression(CALL_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('getBundle')
                            NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                              PsiElement(LPAR)('(')
                              PsiElement(RPAR)(')')
                        PsiElement(DOT)('.')
                        NapileCallExpression(CALL_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('getString')
                          NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                            PsiElement(LPAR)('(')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileConstantExpressionImpl(STRING_CONSTANT)
                                PsiElement(STRING_LITERAL)(''luni.18'')
                            PsiElement(COMMA)(',')
                            PsiWhiteSpace(' ')
                            NapileValueArgument(VALUE_ARGUMENT)
                              NapileArrayOfExpressionImpl(ARRAY)
                                PsiElement(arrayOf)('arrayOf')
                                PsiElement(LPAR)('(')
                                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                  PsiElement(IDENTIFIER)('count')
                                PsiElement(RPAR)(')')
                            PsiElement(RPAR)(')')
                    PsiElement(RPAR)(')')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\n\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('i')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileConstantExpressionImpl(INTEGER_CONSTANT)
              PsiElement(INTEGER_LITERAL)('0')
            PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileWhileExpression(WHILE)
            PsiElement(while)('while')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('i')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(LT)('<')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('count')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileContainerNode(BODY)
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\n\t\t\t')
                VARIABLE
                  MODIFIER_LIST('')
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  TYPE_PARAMETER_LIST('')
                  PsiElement(IDENTIFIER)('c')
                  PsiWhiteSpace(' ')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Int')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileTryExpression(TRY)
                  PsiElement(try)('try')
                  PsiWhiteSpace('\n\t\t\t')
                  NapileBlockExpressionImpl(BLOCK)
                    PsiElement(LBRACE)('{')
                    PsiWhiteSpace('\n\t\t\t\t')
                    MODIFIER_LIST('')
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('c')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(EQ)('=')
                      PsiWhiteSpace(' ')
                      NapileCallExpression(CALL_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('read')
                        NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                          PsiElement(LPAR)('(')
                          PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t\t')
                    MODIFIER_LIST('')
                    NapileIfExpression(IF)
                      PsiElement(if)('if')
                      PsiWhiteSpace(' ')
                      PsiElement(LPAR)('(')
                      NapileContainerNode(CONDITION)
                        NapileBinaryExpression(BINARY_EXPRESSION)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('c')
                          PsiWhiteSpace(' ')
                          NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                            PsiElement(EQEQ)('==')
                          PsiWhiteSpace(' ')
                          NapilePrefixExpression(PREFIX_EXPRESSION)
                            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                              PsiElement(MINUS)('-')
                            NapileConstantExpressionImpl(INTEGER_CONSTANT)
                              PsiElement(INTEGER_LITERAL)('1')
                      PsiElement(RPAR)(')')
                      PsiWhiteSpace('\n\t\t\t\t\t')
                      NapileContainerNode(THEN)
                        NapileReturnExpression(RETURN)
                          PsiElement(return)('return')
                          PsiWhiteSpace(' ')
                          NapileIfExpression(IF)
                            PsiElement(if)('if')
                            PsiElement(LPAR)('(')
                            NapileContainerNode(CONDITION)
                              NapileBinaryExpression(BINARY_EXPRESSION)
                                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                  PsiElement(IDENTIFIER)('i')
                                PsiWhiteSpace(' ')
                                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                                  PsiElement(EQEQ)('==')
                                PsiWhiteSpace(' ')
                                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                                  PsiElement(INTEGER_LITERAL)('0')
                            PsiElement(RPAR)(')')
                            PsiWhiteSpace(' ')
                            NapileContainerNode(THEN)
                              NapilePrefixExpression(PREFIX_EXPRESSION)
                                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                                  PsiElement(MINUS)('-')
                                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                                  PsiElement(INTEGER_LITERAL)('1')
                            PsiWhiteSpace(' ')
                            PsiElement(else)('else')
                            PsiWhiteSpace(' ')
                            NapileContainerNode(ELSE)
                              NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                                PsiElement(IDENTIFIER)('i')
                    PsiElement(SEMICOLON)(';')
                    PsiWhiteSpace('\n\n\t\t\t')
                    PsiElement(RBRACE)('}')
                  PsiWhiteSpace('\n\t\t\t')
                  NapileCatchClause(CATCH)
                    PsiElement(catch)('catch')
                    PsiWhiteSpace(' ')
                    CALL_PARAMETER_LIST
                      PsiElement(LPAR)('(')
                      CALL_PARAMETER_AS_VARIABLE
                        MODIFIER_LIST('')
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        PsiElement(IDENTIFIER)('e')
                        PsiWhiteSpace(' ')
                        PsiElement(COLON)(':')
                        PsiWhiteSpace(' ')
                        NapileTypeReferenceImpl(TYPE_REFERENCE)
                          NapileUserTypeImpl(USER_TYPE)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('IOException')
                      PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t')
                    NapileBlockExpressionImpl(BLOCK)
                      PsiElement(LBRACE)('{')
                      PsiWhiteSpace('\n\t\t\t\t')
                      MODIFIER_LIST('')
                      NapileIfExpression(IF)
                        PsiElement(if)('if')
                        PsiWhiteSpace(' ')
                        PsiElement(LPAR)('(')
                        NapileContainerNode(CONDITION)
                          NapileBinaryExpression(BINARY_EXPRESSION)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('i')
                            PsiWhiteSpace(' ')
                            NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                              PsiElement(EXCLEQ)('!=')
                            PsiWhiteSpace(' ')
                            NapileConstantExpressionImpl(INTEGER_CONSTANT)
                              PsiElement(INTEGER_LITERAL)('0')
                        PsiElement(RPAR)(')')
                        PsiWhiteSpace('\n\t\t\t\t\t')
                        NapileContainerNode(THEN)
                          NapileReturnExpression(RETURN)
                            PsiElement(return)('return')
                            PsiWhiteSpace(' ')
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('i')
                      PsiElement(SEMICOLON)(';')
                      PsiWhiteSpace('\n\n\t\t\t\t')
                      MODIFIER_LIST('')
                      NapileThrowExpression(THROW)
                        PsiElement(throw)('throw')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('e')
                      PsiElement(SEMICOLON)(';')
                      PsiWhiteSpace('\n\t\t\t')
                      PsiElement(RBRACE)('}')
                PsiWhiteSpace('\n\n\t\t\t')
                MODIFIER_LIST('')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileArrayAccessExpressionImpl(ARRAY_ACCESS_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('buffer')
                    NapileContainerNode(INDICES)
                      PsiElement(LBRACKET)('[')
                      NapileBinaryExpression(BINARY_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('offset')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(PLUS)('+')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('i')
                      PsiElement(RBRACKET)(']')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('c')
                    PsiElement(DOT)('.')
                    NapileCallExpression(CALL_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('toByte')
                      NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                        PsiElement(LPAR)('(')
                        PsiElement(RPAR)(')')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapilePostfixExpression(POSTFIX_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('i')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(PLUSPLUS)('++')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileReturnExpression(RETURN)
            PsiElement(return)('return')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('count')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Resets this stream to the last marked location. Throws an\n\t * {@code IOException} if the number of bytes read since the mark has been\n\t * set is greater than the limit provided to {@code mark}, or if no mark\n\t * has been set.\n\t * <p>\n\t * This implementation always throws an {@code IOException} and concrete\n\t * subclasses should provide the proper implementation.\n\t *\n\t * @throws IOException\n\t *             if this stream is closed or another IOException occurs.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('reset')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n\n\t')
      PsiComment(BLOCK_COMMENT)('/**\n\t * Skips at most {@code n} bytes in this stream. It does nothing and returns\n\t * 0 if {@code n} is negative. Less than {@code n} characters are skipped if\n\t * the end of this stream is reached before the operation completes.\n\t * <p>\n\t * This default implementation reads {@code n} bytes into a temporary\n\t * buffer. Concrete subclasses should provide their own implementation.\n\t *\n\t * @param n\n\t *            the number of bytes to skip.\n\t * @return the number of bytes actually skipped.\n\t * @throws IOException\n\t *             if this stream is closed or another IOException occurs.\n\t */')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('skip')
        TYPE_PARAMETER_LIST('')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('n')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Long')
          PsiElement(RPAR)(')')
        PsiWhiteSpace(' ')
        PsiElement(COLON)(':')
        PsiWhiteSpace(' ')
        NapileTypeReferenceImpl(TYPE_REFERENCE)
          NapileUserTypeImpl(USER_TYPE)
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('Long')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('n')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(LTEQ)('<=')
                PsiWhiteSpace(' ')
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('0')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t\t')
            NapileContainerNode(THEN)
              NapileReturnExpression(RETURN)
                PsiElement(return)('return')
                PsiWhiteSpace(' ')
                NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
                  PsiElement(DOT)('.')
                  NapileCallExpression(CALL_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('toLong')
                    NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                      PsiElement(LPAR)('(')
                      PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('skipped')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Long')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
              NapileConstantExpressionImpl(INTEGER_CONSTANT)
                PsiElement(INTEGER_LITERAL)('0')
              PsiElement(DOT)('.')
              NapileCallExpression(CALL_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('toLong')
                NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                  PsiElement(LPAR)('(')
                  PsiElement(RPAR)(')')
          PsiWhiteSpace('\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('toRead')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Int')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileIfExpression(IF)
              PsiElement(if)('if')
              PsiElement(LPAR)('(')
              NapileContainerNode(CONDITION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('n')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(LT)('<')
                  PsiWhiteSpace(' ')
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('4096')
              PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              NapileContainerNode(THEN)
                NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('n')
                  PsiElement(DOT)('.')
                  NapileCallExpression(CALL_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('toInt')
                    NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                      PsiElement(LPAR)('(')
                      PsiElement(RPAR)(')')
              PsiWhiteSpace(' ')
              PsiElement(else)('else')
              PsiWhiteSpace(' ')
              NapileContainerNode(ELSE)
                NapileConstantExpressionImpl(INTEGER_CONSTANT)
                  PsiElement(INTEGER_LITERAL)('4096')
            PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          PsiComment(EOL_COMMENT)('// We are unsynchronized, so take a local copy of the skipBuf at some')
          PsiWhiteSpace('\n\t\t')
          PsiComment(EOL_COMMENT)('// point in time.')
          PsiWhiteSpace('\n\t\t')
          VARIABLE
            MODIFIER_LIST('')
            PsiElement(var)('var')
            PsiWhiteSpace(' ')
            TYPE_PARAMETER_LIST('')
            PsiElement(IDENTIFIER)('localBuf')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileNullableTypeImpl(NULLABLE_TYPE)
                NapileUserTypeImpl(USER_TYPE)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('Array')
                  NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                    PsiElement(LT)('<')
                    NapileTypeReferenceImpl(TYPE_REFERENCE)
                      NapileUserTypeImpl(USER_TYPE)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('Byte')
                    PsiElement(GT)('>')
                PsiElement(QUEST)('?')
            PsiWhiteSpace(' ')
            PsiElement(EQ)('=')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('skipBuf')
            PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileIfExpression(IF)
            PsiElement(if)('if')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('localBuf')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(EQEQ)('==')
                  PsiWhiteSpace(' ')
                  NapileConstantExpressionImpl(NULL)
                    PsiElement(null)('null')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(OROR)('||')
                PsiWhiteSpace(' ')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('localBuf')
                    PsiElement(DOT)('.')
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('length')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(LT)('<')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('toRead')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileContainerNode(THEN)
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                PsiComment(EOL_COMMENT)('// May be lazily written back to the static. No matter if it')
                PsiWhiteSpace('\n\t\t\t')
                PsiComment(EOL_COMMENT)('// overwrites somebody else's store.')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('localBuf')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  NapileCallExpression(CALL_EXPRESSION)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('Array')
                    NapileTypeArgumentListImpl(TYPE_ARGUMENT_LIST)
                      PsiElement(LT)('<')
                      NapileTypeReferenceImpl(TYPE_REFERENCE)
                        NapileUserTypeImpl(USER_TYPE)
                          NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                            PsiElement(IDENTIFIER)('Byte')
                      PsiElement(GT)('>')
                    NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                      PsiElement(LPAR)('(')
                      NapileValueArgument(VALUE_ARGUMENT)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('toRead')
                      PsiElement(RPAR)(')')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('skipBuf')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('localBuf')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\n\t\t')
          MODIFIER_LIST('')
          NapileWhileExpression(WHILE)
            PsiElement(while)('while')
            PsiWhiteSpace(' ')
            PsiElement(LPAR)('(')
            NapileContainerNode(CONDITION)
              NapileBinaryExpression(BINARY_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('skipped')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                  PsiElement(LT)('<')
                PsiWhiteSpace(' ')
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('n')
            PsiElement(RPAR)(')')
            PsiWhiteSpace('\n\t\t')
            NapileContainerNode(BODY)
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                VARIABLE
                  MODIFIER_LIST('')
                  PsiElement(var)('var')
                  PsiWhiteSpace(' ')
                  TYPE_PARAMETER_LIST('')
                  PsiElement(IDENTIFIER)('read')
                  PsiWhiteSpace(' ')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Int')
                  PsiWhiteSpace(' ')
                  PsiElement(EQ)('=')
                  PsiWhiteSpace(' ')
                  NapileConstantExpressionImpl(INTEGER_CONSTANT)
                    PsiElement(INTEGER_LITERAL)('0')
                PsiComment(EOL_COMMENT)('// read(localBuf, 0, toRead);')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileIfExpression(IF)
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(LPAR)('(')
                  NapileContainerNode(CONDITION)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('read')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(EQEQ)('==')
                      PsiWhiteSpace(' ')
                      NapilePrefixExpression(PREFIX_EXPRESSION)
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(MINUS)('-')
                        NapileConstantExpressionImpl(INTEGER_CONSTANT)
                          PsiElement(INTEGER_LITERAL)('1')
                  PsiElement(RPAR)(')')
                  PsiWhiteSpace('\n\t\t\t\t')
                  NapileContainerNode(THEN)
                    NapileReturnExpression(RETURN)
                      PsiElement(return)('return')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('skipped')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\n\t\t\t')
                MODIFIER_LIST('')
                NapileBinaryExpression(BINARY_EXPRESSION)
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('skipped')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                    PsiElement(PLUSEQ)('+=')
                  PsiWhiteSpace(' ')
                  NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(IDENTIFIER)('read')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileIfExpression(IF)
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(LPAR)('(')
                  NapileContainerNode(CONDITION)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('read')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(LT)('<')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('toRead')
                  PsiElement(RPAR)(')')
                  PsiWhiteSpace('\n\t\t\t\t')
                  NapileContainerNode(THEN)
                    NapileReturnExpression(RETURN)
                      PsiElement(return)('return')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('skipped')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileIfExpression(IF)
                  PsiElement(if)('if')
                  PsiWhiteSpace(' ')
                  PsiElement(LPAR)('(')
                  NapileContainerNode(CONDITION)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileBinaryExpression(BINARY_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('n')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(MINUS)('-')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('skipped')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(LT)('<')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('toRead')
                  PsiElement(RPAR)(')')
                  PsiWhiteSpace('\n\t\t\t\t')
                  NapileContainerNode(THEN)
                    NapileBinaryExpression(BINARY_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('toRead')
                      PsiWhiteSpace(' ')
                      NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                        PsiElement(EQ)('=')
                      PsiWhiteSpace(' ')
                      NapileBinaryExpression(BINARY_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('n')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(OPERATION_REFERENCE)
                          PsiElement(MINUS)('-')
                        PsiWhiteSpace(' ')
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('skipped')
                PsiElement(SEMICOLON)(';')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileReturnExpression(RETURN)
            PsiElement(return)('return')
            PsiWhiteSpace(' ')
            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(IDENTIFIER)('skipped')
          PsiElement(SEMICOLON)(';')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')
  PsiWhiteSpace('\n')

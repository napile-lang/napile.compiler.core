NapileFileImpl: IoUtil.ns
  PsiComment(BLOCK_COMMENT)('/*\n * Copyright 2010-2013 napile.org\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */')
  PsiWhiteSpace('\n\n')
  NapilePackageImpl(PACKAGE)
    PsiElement(package)('package')
    PsiWhiteSpace(' ')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('napile')
    PsiElement(DOT)('.')
    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
      PsiElement(IDENTIFIER)('io')
  PsiWhiteSpace('\n\n')
  PsiComment(BLOCK_COMMENT)('/**\n * @author VISTALL\n */')
  PsiWhiteSpace('\n')
  CLASS
    MODIFIER_LIST
      PsiElement(util)('util')
    PsiWhiteSpace(' ')
    PsiElement(class)('class')
    PsiWhiteSpace(' ')
    PsiElement(IDENTIFIER)('IoUtil')
    PsiWhiteSpace('\n')
    TYPE_PARAMETER_LIST('')
    NapileClassBody(CLASS_BODY)
      PsiElement(LBRACE)('{')
      PsiWhiteSpace('\n\t')
      METHOD
        MODIFIER_LIST('')
        PsiElement(meth)('meth')
        PsiWhiteSpace(' ')
        PsiElement(IDENTIFIER)('use')
        TYPE_PARAMETER_LIST
          PsiElement(LT)('<')
          TYPE_PARAMETER
            MODIFIER_LIST('')
            PsiElement(IDENTIFIER)('T')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('Closeable')
          PsiElement(GT)('>')
        CALL_PARAMETER_LIST
          PsiElement(LPAR)('(')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('stream')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileUserTypeImpl(USER_TYPE)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('T')
          PsiElement(COMMA)(',')
          PsiWhiteSpace(' ')
          CALL_PARAMETER_AS_VARIABLE
            MODIFIER_LIST('')
            PsiElement(val)('val')
            PsiWhiteSpace(' ')
            PsiElement(IDENTIFIER)('block')
            PsiWhiteSpace(' ')
            PsiElement(COLON)(':')
            PsiWhiteSpace(' ')
            NapileTypeReferenceImpl(TYPE_REFERENCE)
              NapileMethodTypeImpl(METHOD_TYPE)
                PsiElement(LBRACE)('{')
                CALL_PARAMETER_LIST
                  PsiElement(LPAR)('(')
                  CALL_PARAMETER_AS_VARIABLE
                    MODIFIER_LIST('')
                    PsiElement(val)('val')
                    PsiWhiteSpace(' ')
                    PsiElement(IDENTIFIER)('it')
                    PsiWhiteSpace(' ')
                    PsiElement(COLON)(':')
                    PsiWhiteSpace(' ')
                    NapileTypeReferenceImpl(TYPE_REFERENCE)
                      NapileUserTypeImpl(USER_TYPE)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('T')
                  PsiElement(RPAR)(')')
                PsiWhiteSpace(' ')
                PsiElement(ARROW)('->')
                PsiWhiteSpace(' ')
                NapileTypeReferenceImpl(TYPE_REFERENCE)
                  NapileUserTypeImpl(USER_TYPE)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('Null')
                PsiElement(RBRACE)('}')
          PsiElement(RPAR)(')')
        PsiWhiteSpace('\n\t')
        NapileBlockExpressionImpl(BLOCK)
          PsiElement(LBRACE)('{')
          PsiWhiteSpace('\n\t\t')
          MODIFIER_LIST('')
          NapileTryExpression(TRY)
            PsiElement(try)('try')
            PsiWhiteSpace('\n\t\t')
            NapileBlockExpressionImpl(BLOCK)
              PsiElement(LBRACE)('{')
              PsiWhiteSpace('\n\t\t\t')
              MODIFIER_LIST('')
              NapileCallExpression(CALL_EXPRESSION)
                NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(IDENTIFIER)('block')
                NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                  PsiElement(LPAR)('(')
                  NapileValueArgument(VALUE_ARGUMENT)
                    NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(IDENTIFIER)('stream')
                  PsiElement(RPAR)(')')
              PsiWhiteSpace('\n\t\t')
              PsiElement(RBRACE)('}')
            PsiWhiteSpace('\n\t\t')
            NapileCatchClause(CATCH)
              PsiElement(catch)('catch')
              CALL_PARAMETER_LIST
                PsiElement(LPAR)('(')
                CALL_PARAMETER_AS_VARIABLE
                  MODIFIER_LIST('')
                  PsiElement(val)('val')
                  PsiWhiteSpace(' ')
                  PsiElement(IDENTIFIER)('e')
                  PsiWhiteSpace(' ')
                  PsiElement(COLON)(':')
                  PsiWhiteSpace(' ')
                  NapileTypeReferenceImpl(TYPE_REFERENCE)
                    NapileUserTypeImpl(USER_TYPE)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('Exception')
                PsiElement(RPAR)(')')
              PsiWhiteSpace('\n\t\t')
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                PsiComment(EOL_COMMENT)('// ignore')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
            PsiWhiteSpace('\n\t\t')
            NapileFinallySection(FINALLY)
              PsiElement(finally)('finally')
              PsiWhiteSpace('\n\t\t')
              NapileBlockExpressionImpl(BLOCK)
                PsiElement(LBRACE)('{')
                PsiWhiteSpace('\n\t\t\t')
                MODIFIER_LIST('')
                NapileTryExpression(TRY)
                  PsiElement(try)('try')
                  PsiWhiteSpace('\n\t\t\t')
                  NapileBlockExpressionImpl(BLOCK)
                    PsiElement(LBRACE)('{')
                    PsiWhiteSpace('\n\t\t\t\t')
                    MODIFIER_LIST('')
                    NapileDotQualifiedExpressionImpl(DOT_QUALIFIED_EXPRESSION)
                      NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                        PsiElement(IDENTIFIER)('stream')
                      PsiElement(DOT)('.')
                      NapileCallExpression(CALL_EXPRESSION)
                        NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                          PsiElement(IDENTIFIER)('close')
                        NapileValueArgumentListImpl(VALUE_ARGUMENT_LIST)
                          PsiElement(LPAR)('(')
                          PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t')
                    PsiElement(RBRACE)('}')
                  PsiWhiteSpace('\n\t\t\t')
                  NapileCatchClause(CATCH)
                    PsiElement(catch)('catch')
                    CALL_PARAMETER_LIST
                      PsiElement(LPAR)('(')
                      CALL_PARAMETER_AS_VARIABLE
                        MODIFIER_LIST('')
                        PsiElement(val)('val')
                        PsiWhiteSpace(' ')
                        PsiElement(IDENTIFIER)('e')
                        PsiWhiteSpace(' ')
                        PsiElement(COLON)(':')
                        PsiWhiteSpace(' ')
                        NapileTypeReferenceImpl(TYPE_REFERENCE)
                          NapileUserTypeImpl(USER_TYPE)
                            NapileSimpleNameExpressionImpl(REFERENCE_EXPRESSION)
                              PsiElement(IDENTIFIER)('Exception')
                      PsiElement(RPAR)(')')
                    PsiWhiteSpace('\n\t\t\t')
                    NapileBlockExpressionImpl(BLOCK)
                      PsiElement(LBRACE)('{')
                      PsiWhiteSpace('\n\t\t\t\t')
                      PsiComment(EOL_COMMENT)('// ignore')
                      PsiWhiteSpace('\n\t\t\t')
                      PsiElement(RBRACE)('}')
                PsiWhiteSpace('\n\t\t')
                PsiElement(RBRACE)('}')
          PsiWhiteSpace('\n\t')
          PsiElement(RBRACE)('}')
      PsiWhiteSpace('\n')
      PsiElement(RBRACE)('}')

/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.module">module</ref>.<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>


/**
 * The base class for all input streams. An input stream is a means of reading
 * data from a source in a byte-wise manner.
 * <p>
 * Some input streams also support marking a position in the input stream and
 * returning to this position later. This abstract class does not provide a
 * fully working implementation, so it needs to be subclassed, and at least the
 * {@link #read()} method needs to be overridden. Overriding some of the
 * non-abstract methods is also often advised, since it might result in higher
 * efficiency.
 * <p>
 * Many specialized input streams for purposes like reading from a file already
 * exist in this package.
 *
 * @see OutputStream
 */
abstract class InputStream : <ref class="MutableClassDescriptor" to="napile.io.Closeable">Closeable</ref>
{
	static local var skipBuf : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>?

	/**
	 * Returns the number of bytes that are available before this stream will
	 * block. This implementation always returns 0. Subclasses should override
	 * and indicate the correct number of bytes available.
	 *
	 * @return the number of bytes available before blocking.
	 * @throws IOException
	 *             if an error occurs in this stream.
	 */
	meth available() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0

	/**
	 * Closes this stream. Concrete implementations of this class should free
	 * any resources during close. This implementation does nothing.
	 *
	 * @throws IOException
	 *             if an error occurs while closing this stream.
	 */
	override meth close()
	{
	}

	/**
	 * Sets a mark position in this InputStream. The parameter {@code readlimit}
	 * indicates how many bytes can be read before the mark is invalidated.
	 * Sending {@code reset()} will reposition the stream back to the marked
	 * position provided {@code readLimit} has not been surpassed.
	 * <p>
	 * This default implementation does nothing and concrete subclasses must
	 * provide their own implementation.
	 *
	 * @param readlimit
	 *            the number of bytes that can be read from this stream before
	 *            the mark is invalidated.
	 * @see #markSupported()
	 * @see #reset()
	 */
	meth mark(var readlimit : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>)
	{
	}

	/**
	 * Indicates whether this stream supports the {@code mark()} and
	 * {@code reset()} methods. The default implementation returns {@code false}.
	 *
	 * @return always {@code false}.
	 * @see #mark(int)
	 * @see #reset()
	 */
	meth markSupported() : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> = false

	/**
	 * Reads a single byte from this stream and returns it as an integer in the
	 * range from 0 to 255. Returns -1 if the end of the stream has been
	 * reached. Blocks until one byte has been read, the end of the source
	 * stream is detected or an exception is thrown.
	 *
	 * @return the byte read or -1 if the end of stream has been reached.
	 * @throws IOException
	 *             if the stream is closed or another IOException occurs.
	 */
	meth read() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	/**
	 * Reads bytes from this stream and stores them in the byte array {@code b}.
	 *
	 * @param b
	 *            the byte array in which to store the bytes read.
	 * @return the number of bytes actually read or -1 if the end of the stream
	 *         has been reached.
	 * @throws IOException
	 *             if this stream is closed or another IOException occurs.
	 */
	meth read(var b : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.io.InputStream.read">read</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.b">b</ref>, 0, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.b">b</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)

	/**
	 * Reads at most {@code length} bytes from this stream and stores them in
	 * the byte array {@code b} starting at {@code offset}.
	 *
	 * @param b
	 *            the byte array in which to store the bytes read.
	 * @param offset
	 *            the initial position in {@code buffer} to store the bytes read
	 *            from this stream.
	 * @param length
	 *            the maximum number of bytes to store in {@code b}.
	 * @return the number of bytes actually read or -1 if the end of the stream
	 *         has been reached.
	 * @throws IndexOutOfBoundsException
	 *             if {@code offset < 0} or {@code length < 0}, or if
	 *             {@code offset + length} is greater than the length of
	 *             {@code b}.
	 * @throws IOException
	 *             if the stream is closed or another IOException occurs.
	 */
	meth read(var buffer : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var count : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
	{
		// Force null check for b first!
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.buffer">buffer</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.lang.ArrayIndexOutOfBoundsException.this">ArrayIndexOutOfBoundsException</ref>(<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.module.Module.getBundle">getBundle</ref>().<ref class="SimpleMethodDescriptorImpl" to="napile.resource.ResourceBundle.getString">getString</ref>('luni.12', arrayOf(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.offset">offset</ref>)));

		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> 0 <ref to="null">||</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.buffer">buffer</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.offset">offset</ref>)
			throw <ref class="ConstructorDescriptor" to="napile.lang.ArrayIndexOutOfBoundsException.this">ArrayIndexOutOfBoundsException</ref>(<ref class="MutableClassDescriptor" to="napile.module.Module">Module</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.module.Module.getBundle">getBundle</ref>().<ref class="SimpleMethodDescriptorImpl" to="napile.resource.ResourceBundle.getString">getString</ref>('luni.18', arrayOf(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.count">count</ref>)));


		var i = 0;
		while(<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.count">count</ref>)
		{

			var c : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>
			try
			{
				<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.c">c</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.io.InputStream.read">read</ref>()
				if (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.c">c</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1)
					return if(<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0) <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1 else <ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref>;

			}
			catch (val e : <ref class="MutableClassDescriptor" to="napile.io.IOException">IOException</ref>)
			{
				if (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
					return <ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref>;

				throw <ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.e">e</ref>;
			}

			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.buffer">buffer</ref>[<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.offset">offset</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.plus">+</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref>]</ref> <ref to="null">=</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.c">c</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toByte">toByte</ref>();
			<ref class="LocalVariableDescriptor" to="napile.io.InputStream.read.i">i</ref><ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>
		}
		return <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.read.count">count</ref>;
	}

	/**
	 * Resets this stream to the last marked location. Throws an
	 * {@code IOException} if the number of bytes read since the mark has been
	 * set is greater than the limit provided to {@code mark}, or if no mark
	 * has been set.
	 * <p>
	 * This implementation always throws an {@code IOException} and concrete
	 * subclasses should provide the proper implementation.
	 *
	 * @throws IOException
	 *             if this stream is closed or another IOException occurs.
	 */
	meth reset()
	{
		
	}

	/**
	 * Skips at most {@code n} bytes in this stream. It does nothing and returns
	 * 0 if {@code n} is negative. Less than {@code n} characters are skipped if
	 * the end of this stream is reached before the operation completes.
	 * <p>
	 * This default implementation reads {@code n} bytes into a temporary
	 * buffer. Concrete subclasses should provide their own implementation.
	 *
	 * @param n
	 *            the number of bytes to skip.
	 * @return the number of bytes actually skipped.
	 * @throws IOException
	 *             if this stream is closed or another IOException occurs.
	 */
	meth skip(var n : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>
	{
		if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><=</ref> 0)
			return 0.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toLong">toLong</ref>()

		var skipped : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> = 0.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.toLong">toLong</ref>()
		var toRead : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> 4096) <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.toInt">toInt</ref>() else 4096;
		// We are unsynchronized, so take a local copy of the skipBuf at some
		// point in time.
		var localBuf : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>? = <ref class="VariableDescriptorImpl" to="napile.io.InputStream.skipBuf">skipBuf</ref>;
		if (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.localBuf">localBuf</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.equals">==</ref> null <ref to="null">||</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.localBuf">localBuf</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.toRead">toRead</ref>)
		{
			// May be lazily written back to the static. No matter if it
			// overwrites somebody else's store.
			<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.localBuf">localBuf</ref> <ref to="null">=</ref> <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>(<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.toRead">toRead</ref>)
			<ref class="VariableDescriptorImpl" to="napile.io.InputStream.skipBuf">skipBuf</ref> <ref to="null">=</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.localBuf">localBuf</ref>
		}

		while (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref>)
		{
			var read : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0// read(localBuf, 0, toRead);
			if (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.read">read</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.minus">-</ref>1)
				return <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref>;

			<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.plus">+=</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.read">read</ref>;
			if (<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.read">read</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.toRead">toRead</ref>)
				return <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref>;
			if (<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.minus">-</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.toRead">toRead</ref>)
				<ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.toRead">toRead</ref> <ref to="null">=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.InputStream.skip.n">n</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.minus">-</ref> <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref>;
		}
		return <ref class="LocalVariableDescriptor" to="napile.io.InputStream.skip.skipped">skipped</ref>;
	}
}

/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>

/**
 * @author VISTALL
 */
util class IoUtil
{
	meth use<T : <ref class="MutableClassDescriptor" to="napile.io.Closeable">Closeable</ref>>(val stream : <ref class="TypeParameterDescriptorImpl" to="napile.io.IoUtil.use.T">T</ref>, val block : {(val it : <ref class="TypeParameterDescriptorImpl" to="napile.io.IoUtil.use.T">T</ref>) -> <ref class="MutableClassDescriptor" to="napile.lang.Null">Null</ref>})
	{
		try
		{
			<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.IoUtil.use.block">block</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.IoUtil.use.stream">stream</ref>)
		}
		catch(val e : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>)
		{
			// ignore
		}
		finally
		{
			try
			{
				<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.IoUtil.use.stream">stream</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.io.Closeable.close">close</ref>()
			}
			catch(val e : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>)
			{
				// ignore
			}
		}
	}
}
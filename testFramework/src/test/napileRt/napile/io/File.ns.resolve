/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>

/**
 * @author VISTALL
 */
class File
{
	val path : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		local set
	}

	local var properPath : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>? = null

	this(val cName : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>)
	{
		<ref class="VariableDescriptorImpl" to="napile.io.File.path">path</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.io.File.fixSlashes">fixSlashes</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.File.this.cName">cName</ref>)
	}

	meth exists() : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		if(<ref class="VariableDescriptorImpl" to="napile.io.File.path">path</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.String.count">count</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			return false

		<ref class="MutableClassDescriptor" to="napile.io.SecurityManager">SecurityManager</ref>.<ref class="VariableDescriptorImpl" to="napile.io.SecurityManager.INSTANCE">INSTANCE</ref>?.<ref class="SimpleMethodDescriptorImpl" to="napile.io.SecurityManager.checkRead">checkRead</ref>(<ref class="VariableDescriptorImpl" to="napile.io.File.path">path</ref>)

		return <ref class="SimpleMethodDescriptorImpl" to="napile.io.File.existsImpl">existsImpl</ref>(<ref class="SimpleMethodDescriptorImpl" to="napile.io.File.properPath">properPath</ref>(true))
	}

	local native meth existsImpl(val array : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	local meth fixSlashes(val cName : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		//TODO [VISTALL]
		return <ref class="CallParameterAsVariableDescriptorImpl" to="napile.io.File.fixSlashes.cName">cName</ref>
	}

	covered meth properPath(val internal : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>
	{
		if (<ref class="VariableDescriptorImpl" to="napile.io.File.properPath">properPath</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.equals">!=</ref> null)
			return <ref class="VariableDescriptorImpl" to="napile.io.File.properPath">properPath</ref><ref to="null">!!</ref>

		//TODO [VISTALL]
		<ref class="VariableDescriptorImpl" to="napile.io.File.properPath">properPath</ref> <ref to="null">=</ref> <ref class="VariableDescriptorImpl" to="napile.io.File.path">path</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.getBytes">getBytes</ref>()
		return <ref class="VariableDescriptorImpl" to="napile.io.File.properPath">properPath</ref><ref to="null">!!</ref>
	}
}
/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.asm]>asm</PackageDescriptorImpl[napile.asm]>.<PackageDescriptorImpl[napile.asm.members]>members</PackageDescriptorImpl[napile.asm.members]>.<PackageDescriptorImpl[napile.asm.members.typeConstructor]>typeConstructor</PackageDescriptorImpl[napile.asm.members.typeConstructor]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.asm]>asm</PackageDescriptorImpl[napile.asm]>.<PackageDescriptorImpl[napile.asm.members]>members</PackageDescriptorImpl[napile.asm.members]>.<MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>AsmTypeConstructor</MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.Equality]>Equality</MutableClassDescriptor[napile.annotation.Equality]>

/**
 * @author VISTALL
 * @date 10:58/17.01.13
 */
class AsmClassType : <MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>AsmTypeConstructor</MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>
{
	@<MutableClassDescriptor[napile.annotation.Equality]>Equality</MutableClassDescriptor[napile.annotation.Equality]>
	val qualifiedName : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>

	this(<VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>qualifiedName</VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>)

	override meth equals(val o : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>?) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>
	{
		if(<CallParameterAsVariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.equals.o]> <null>is</null> <MutableClassDescriptor[napile.asm.members.typeConstructor.AsmClassType]>AsmClassType</MutableClassDescriptor[napile.asm.members.typeConstructor.AsmClassType]>)
			return <VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>qualifiedName</VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]> <SimpleMethodDescriptorImpl[napile.lang.String.equals]>==</SimpleMethodDescriptorImpl[napile.lang.String.equals]> <CallParameterAsVariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.equals.o]>.<VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>qualifiedName</VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>
		else
			return false
	}

	override meth toString() : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]> = <VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>qualifiedName</VariableDescriptorImpl[napile.asm.members.typeConstructor.AsmClassType.qualifiedName]>
}
/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members.typeConstructor">typeConstructor</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.AsmTypeConstructor">AsmTypeConstructor</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Equality">Equality</ref>

/**
 * @author VISTALL
 */
class AsmTypeParameterType : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmTypeConstructor">AsmTypeConstructor</ref>
{
	@<ref class="MutableClassDescriptor" to="napile.annotation.Equality">Equality</ref>
	val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>

	this(<ref class="VariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.name">name</ref>)

	//FIXME [VISTALL] remove it
	override meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		return if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.equals.o">o</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.asm.members.typeConstructor.AsmTypeParameterType">AsmTypeParameterType</ref>) <ref class="VariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.name">name</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.name">name</ref> else false
	}

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref> = <ref class="VariableDescriptorImpl" to="napile.asm.members.typeConstructor.AsmTypeParameterType.name">name</ref>
}
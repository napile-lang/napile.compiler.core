package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>

import <ref class="PackageDescriptorImpl" to="xml">xml</ref>.<ref class="PackageDescriptorImpl" to="xml.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="xml.annotation.DomElement">DomElement</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Modifier">Modifier</ref>
import <ref class="PackageDescriptorImpl" to="xml">xml</ref>.<ref class="PackageDescriptorImpl" to="xml.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="xml.annotation.DomAttribute">DomAttribute</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.LazyType">LazyType</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Lazy">Lazy</ref>

/**
 * @author VISTALL
 */
@<ref class="MutableClassDescriptor" to="xml.annotation.DomElement">DomElement</ref>("class")
class AsmClass
{
	@<ref class="MutableClassDescriptor" to="xml.annotation.DomAttribute">DomAttribute</ref>("name")
	@<ref class="MutableClassDescriptor" to="napile.annotation.Lazy">Lazy</ref>(<ref class="MutableClassDescriptor" to="napile.annotation.LazyType">LazyType</ref>.<ref class="VariableDescriptorImpl" to="napile.annotation.LazyType.INJECTION">INJECTION</ref>)
	lazy val name : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref> = "this is need rework"

	this()

	this(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmClass.name">name</ref>)
}
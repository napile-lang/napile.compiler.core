/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.asm]>asm</PackageDescriptorImpl[napile.asm]>.<PackageDescriptorImpl[napile.asm.members]>members</PackageDescriptorImpl[napile.asm.members]>

import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.annotation]>annotation</PackageDescriptorImpl[napile.annotation]>.<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]>
import <PackageDescriptorImpl[napile]>napile</PackageDescriptorImpl[napile]>.<PackageDescriptorImpl[napile.logging]>logging</PackageDescriptorImpl[napile.logging]>.<MutableClassDescriptor[napile.logging.Logger]>Logger</MutableClassDescriptor[napile.logging.Logger]>

/**
 * @author VISTALL
 * @date 10:46/17.01.13
 */
class AsmType
{
	val annotations : @<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]> <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.asm.members.AsmAnnotation]>AsmAnnotation</MutableClassDescriptor[napile.asm.members.AsmAnnotation]>>

	val constructor : <MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>AsmTypeConstructor</MutableClassDescriptor[napile.asm.members.AsmTypeConstructor]>

	val parameters : @<MutableClassDescriptor[napile.annotation.Immutable]>Immutable</MutableClassDescriptor[napile.annotation.Immutable]> <MutableClassDescriptor[napile.lang.Array]>Array</MutableClassDescriptor[napile.lang.Array]><<MutableClassDescriptor[napile.asm.members.AsmType]>AsmType</MutableClassDescriptor[napile.asm.members.AsmType]>>

	val nullable : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>

	this(<VariableDescriptorImpl[napile.asm.members.AsmType.annotations]>annotations</VariableDescriptorImpl[napile.asm.members.AsmType.annotations]>, <VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>constructor</VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>, <VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>, <VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>nullable</VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>)

	override meth equals(val o : <MutableClassDescriptor[napile.lang.Any]>Any</MutableClassDescriptor[napile.lang.Any]>?) : <MutableClassDescriptor[napile.lang.Bool]>Bool</MutableClassDescriptor[napile.lang.Bool]>
	{
		if(<CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]> <null>is</null> <MutableClassDescriptor[napile.asm.members.AsmType]>AsmType</MutableClassDescriptor[napile.asm.members.AsmType]>)
		{
			if(<VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>nullable</VariableDescriptorImpl[napile.asm.members.AsmType.nullable]> <SimpleMethodDescriptorImpl[napile.lang.Bool.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Bool.equals]> <CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>.<VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>nullable</VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>)
				return false

			if(<VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]> <SimpleMethodDescriptorImpl[napile.lang.Array.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Array.equals]> <CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>.<VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>)
				return false;

			return <VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>constructor</VariableDescriptorImpl[napile.asm.members.AsmType.constructor]> <SimpleMethodDescriptorImpl[napile.asm.members.AsmTypeConstructor.equals]>==</SimpleMethodDescriptorImpl[napile.asm.members.AsmTypeConstructor.equals]> <CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>o</CallParameterAsVariableDescriptorImpl[napile.asm.members.AsmType.equals.o]>.<VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>constructor</VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>
		}
		else
			return false
	}

	override meth toString() : <MutableClassDescriptor[napile.lang.String]>String</MutableClassDescriptor[napile.lang.String]>
	{
		val builder = <ConstructorDescriptor[napile.lang.StringBuilder.this]>StringBuilder</ConstructorDescriptor[napile.lang.StringBuilder.this]>()
		<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> <VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>constructor</VariableDescriptorImpl[napile.asm.members.AsmType.constructor]>
		if(<VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]>></SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> 0)
		{
			<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> "<"
			var i = 0
			while(<LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]>i</LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]><</SimpleMethodDescriptorImpl[napile.lang.Int.compareTo]> <VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>.<VariableDescriptorImpl[napile.lang.Array.length]>length</VariableDescriptorImpl[napile.lang.Array.length]>)
			{
				if(<LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]>i</LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.equals]>!=</SimpleMethodDescriptorImpl[napile.lang.Int.equals]> 0)
					<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> ", "
				<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> <SimpleMethodDescriptorImpl[napile.lang.Array.get]><VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>parameters</VariableDescriptorImpl[napile.asm.members.AsmType.parameters]>[<LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]>i</LocalVariableDescriptor[napile.asm.members.AsmType.toString.i]> <SimpleMethodDescriptorImpl[napile.lang.Int.inc]>++</SimpleMethodDescriptorImpl[napile.lang.Int.inc]>]</SimpleMethodDescriptorImpl[napile.lang.Array.get]>
			}
			<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> ">"
		}
		if(<VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>nullable</VariableDescriptorImpl[napile.asm.members.AsmType.nullable]>)
			<LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]> <SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]>+=</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.plus]> "?"
		return <LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>builder</LocalVariableDescriptor[napile.asm.members.AsmType.toString.builder]>.<SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>toString</SimpleMethodDescriptorImpl[napile.lang.StringBuilder.toString]>()
	}
}
/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.annotation">annotation</ref>.<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>

/**
 * @author VISTALL
 * @date 10:46/17.01.13
 */
class AsmType
{
	val annotations : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmAnnotation">AsmAnnotation</ref>>

	val constructor : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmTypeConstructor">AsmTypeConstructor</ref>

	val parameters : @<ref class="MutableClassDescriptor" to="napile.annotation.Immutable">Immutable</ref> <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>>

	val nullable : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	this(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.annotations">annotations</ref>, <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.constructor">constructor</ref>, <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref>, <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.nullable">nullable</ref>)

	override meth equals(val o : <ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.AsmType.equals.o">o</ref> <ref to="null">is</ref> <ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>)
		{
			if(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.nullable">nullable</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Bool.equals">!=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.AsmType.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.nullable">nullable</ref>)
				return false

			if(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.equals">!=</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.AsmType.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref>)
				return false;

			return <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.constructor">constructor</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.asm.members.AsmTypeConstructor.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.members.AsmType.equals.o">o</ref>.<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.constructor">constructor</ref>
		}
		else
			return false
	}

	override meth toString() : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>
	{
		val builder = <ref class="ConstructorDescriptor" to="napile.lang.StringBuilder.this">StringBuilder</ref>()
		<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.constructor">constructor</ref>
		if(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo">></ref> 0)
		{
			<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '<'
			var i = 0
			while(<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.compareTo"><</ref> <ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>)
			{
				if(<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">!=</ref> 0)
					<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> ', '
				<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.parameters">parameters</ref>[<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref>
			}
			<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '>'
		}
		if(<ref class="VariableDescriptorImpl" to="napile.asm.members.AsmType.nullable">nullable</ref>)
			<ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.plus">+=</ref> '?'
		return <ref class="LocalVariableDescriptor" to="napile.asm.members.AsmType.toString.builder">builder</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.StringBuilder.toString">toString</ref>()
	}
}
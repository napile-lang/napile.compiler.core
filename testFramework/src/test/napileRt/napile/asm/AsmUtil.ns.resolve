/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.AsmAnnotation">AsmAnnotation</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members">members</ref>.<ref class="PackageDescriptorImpl" to="napile.asm.members.typeConstructor">typeConstructor</ref>.<ref class="MutableClassDescriptor" to="napile.asm.members.typeConstructor.AsmClassType">AsmClassType</ref>

/~
 ~ Authors
 ~ * VISTALL
 ~/
util class AsmUtil
{
	/~
	 ~ Return : asm type equivalent of `T` type
	 ~/
	meth toAsmType<T>() : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref> = <ref class="SimpleMethodDescriptorImpl" to="napile.asm.AsmUtil.toAsmType">toAsmType</ref>(typeOf(<ref class="TypeParameterDescriptorImpl" to="napile.asm.AsmUtil.toAsmType.T">T</ref>))

	/~
	 ~ Return : asm type equivalent of `type`
	 ~/
	meth toAsmType(val type : <ref class="MutableClassDescriptor" to="napile.reflect.Type">Type</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>) : <ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>
	{
		val parameters = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmType">AsmType</ref>>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.AsmUtil.toAsmType.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.size">size</ref>())

		var i = 0
		for(c in <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.AsmUtil.toAsmType.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.parameters">parameters</ref>)
			<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.set"><ref class="LocalVariableDescriptor" to="napile.asm.AsmUtil.toAsmType.parameters">parameters</ref>[<ref class="LocalVariableDescriptor" to="napile.asm.AsmUtil.toAsmType.i">i</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.inc">++</ref>]</ref> <ref to="null">=</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.asm.AsmUtil.toAsmType">toAsmType</ref>(<ref class="LocalVariableDescriptor" to="napile.asm.AsmUtil.toAsmType.c">c</ref>)

		val annotations = <ref class="ConstructorDescriptor" to="napile.lang.Array.this">Array</ref><<ref class="MutableClassDescriptor" to="napile.asm.members.AsmAnnotation">AsmAnnotation</ref>>(0)
		//TODO [VISTALL] no annotations - currently
		return <ref class="ConstructorDescriptor" to="napile.asm.members.AsmType.this">AsmType</ref>(<ref class="LocalVariableDescriptor" to="napile.asm.AsmUtil.toAsmType.annotations">annotations</ref>, <ref class="ConstructorDescriptor" to="napile.asm.members.typeConstructor.AsmClassType.this">AsmClassType</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.AsmUtil.toAsmType.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.constructorClass">constructorClass</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Class.name">name</ref>), <ref class="LocalVariableDescriptor" to="napile.asm.AsmUtil.toAsmType.parameters">parameters</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="napile.asm.AsmUtil.toAsmType.type">type</ref>.<ref class="VariableDescriptorImpl" to="napile.reflect.Type.nullable">nullable</ref>)
	}
}
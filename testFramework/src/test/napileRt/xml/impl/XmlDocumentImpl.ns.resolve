/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="xml">xml</ref>.<ref class="PackageDescriptorImpl" to="xml.impl">impl</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.collection">collection</ref>.<ref class="MutableClassDescriptor" to="napile.collection.IterableUtil">IterableUtil</ref>
import <ref class="PackageDescriptorImpl" to="xml">xml</ref>.<ref class="MutableClassDescriptor" to="xml.XmlDocument">XmlDocument</ref>
import <ref class="PackageDescriptorImpl" to="xml">xml</ref>.<ref class="MutableClassDescriptor" to="xml.XmlElement">XmlElement</ref>

/**
 * @author VISTALL
 */
class XmlDocumentImpl : <ref class="MutableClassDescriptor" to="xml.XmlDocument">XmlDocument</ref>
{
	local val elements: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="xml.XmlElement">XmlElement</ref>>

	this(<ref class="VariableDescriptorImpl" to="xml.impl.XmlDocumentImpl.elements">elements</ref>)

	override meth get(val elementName : <ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>) : <ref class="MutableClassDescriptor" to="xml.XmlElement">XmlElement</ref>?
	{
		return <ref class="MutableClassDescriptor" to="napile.collection.IterableUtil">IterableUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.collection.IterableUtil.select">select</ref>(<ref class="VariableDescriptorImpl" to="xml.impl.XmlDocumentImpl.elements">elements</ref>, {(a) -> <ref class="CallParameterAsVariableDescriptorImpl" to="xml.impl.XmlDocumentImpl.get.@noname.a">a</ref>.<ref class="SimpleMethodDescriptorImpl" to="xml.XmlElement.getName">getName</ref>() <ref class="SimpleMethodDescriptorImpl" to="napile.lang.String.equals">==</ref> <ref class="CallParameterAsVariableDescriptorImpl" to="xml.impl.XmlDocumentImpl.get.elementName">elementName</ref>})
	}
}
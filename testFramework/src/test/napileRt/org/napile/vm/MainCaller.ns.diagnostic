/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.napile.vm

import napile.reflect.ReflectUtil
import napile.logging.Logger
import napile.reflect.Method
import napile.asm.AsmUtil.toAsmType

/**
 * @author VISTALL
 */
util class MainCaller
{
	meth main(val arg : Array<String>)
	{
		if(arg.length == 0)
			throw VmStartupError("Class name - expected")

		val clazz = ReflectUtil.findClass(arg[0])
		val mainMethod = clazz.findStaticMethod("main", arrayOf(toAsmType<Array<String>>()))
		if(mainMethod == null)
			throw VmStartupError("'static meth main(val arg : Array<String>)' method expected")

		val thread = Thread {
			try
			{
				mainMethod!!.invokeStatic(ArrayUtil.copyOfRange(arg, 1, arg.length))
			}
			catch(val e : Exception)
			{
				e.printStackTrace()
			}
			null
		}

		thread.start()
	}
}
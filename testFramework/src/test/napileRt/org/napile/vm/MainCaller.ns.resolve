/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.napile">napile</ref>.<ref class="PackageDescriptorImpl" to="org.napile.vm">vm</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.ReflectUtil">ReflectUtil</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.logging">logging</ref>.<ref class="MutableClassDescriptor" to="napile.logging.Logger">Logger</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.reflect">reflect</ref>.<ref class="MutableClassDescriptor" to="napile.reflect.Method">Method</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.asm">asm</ref>.<ref class="MutableClassDescriptor" to="napile.asm.AsmUtil">AsmUtil</ref>.<ref to="null">toAsmType</ref>

/**
 * @author VISTALL
 */
util class MainCaller
{
	meth main(val arg : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>>)
	{
		if(<ref class="CallParameterAsVariableDescriptorImpl" to="org.napile.vm.MainCaller.main.arg">arg</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Int.equals">==</ref> 0)
			throw <ref class="ConstructorDescriptor" to="org.napile.vm.VmStartupError.this">VmStartupError</ref>('Class name - expected')

		val clazz = <ref class="MutableClassDescriptor" to="napile.reflect.ReflectUtil">ReflectUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.ReflectUtil.findClass">findClass</ref>(<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Array.get"><ref class="CallParameterAsVariableDescriptorImpl" to="org.napile.vm.MainCaller.main.arg">arg</ref>[0]</ref>)
		val mainMethod = <ref class="LocalVariableDescriptor" to="org.napile.vm.MainCaller.main.clazz">clazz</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Class.findStaticMethod">findStaticMethod</ref>('main', arrayOf(<ref class="SimpleMethodDescriptorImpl" to="napile.asm.AsmUtil.toAsmType">toAsmType</ref><<ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.String">String</ref>>>()))
		if(<ref class="LocalVariableDescriptor" to="org.napile.vm.MainCaller.main.mainMethod">mainMethod</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.equals">==</ref> null)
			throw <ref class="ConstructorDescriptor" to="org.napile.vm.VmStartupError.this">VmStartupError</ref>('\'static meth main(val arg : Array<String>)\' method expected')

		val thread = <ref class="ConstructorDescriptor" to="napile.lang.Thread.this">Thread</ref> {
			try
			{
				<ref class="LocalVariableDescriptor" to="org.napile.vm.MainCaller.main.mainMethod">mainMethod</ref><ref to="null">!!</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.reflect.Method.invokeStatic">invokeStatic</ref>(<ref class="MutableClassDescriptor" to="napile.lang.ArrayUtil">ArrayUtil</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.ArrayUtil.copyOfRange">copyOfRange</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="org.napile.vm.MainCaller.main.arg">arg</ref>, 1, <ref class="CallParameterAsVariableDescriptorImpl" to="org.napile.vm.MainCaller.main.arg">arg</ref>.<ref class="VariableDescriptorImpl" to="napile.lang.Array.length">length</ref>))
			}
			catch(val e : <ref class="MutableClassDescriptor" to="napile.lang.Exception">Exception</ref>)
			{
				<ref class="LocalVariableDescriptor" to="org.napile.vm.MainCaller.main.@noname.e">e</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Exception.printStackTrace">printStackTrace</ref>()
			}
			null
		}

		<ref class="LocalVariableDescriptor" to="org.napile.vm.MainCaller.main.thread">thread</ref>.<ref class="SimpleMethodDescriptorImpl" to="napile.lang.Thread.start">start</ref>()
	}
}
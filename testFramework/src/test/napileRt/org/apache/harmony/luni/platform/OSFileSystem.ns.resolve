/*
 * Copyright 2010-2013 napile.org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.FileNotFoundException">FileNotFoundException</ref>
import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.IOException">IOException</ref>

/**
 * @author VISTALL
 */
covered class OSFileSystem : <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.IFileSystem">IFileSystem</ref>
{
	static val INSTANCE : <ref class="MutableClassDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem">OSFileSystem</ref> = <ref class="ConstructorDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem.this">OSFileSystem</ref>()

	this()

	override meth transfer(var fileHandler: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var socketDescriptor: <ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>?, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var count: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth seek(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var whence: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth close(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth truncate(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var size: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth getAllocGranularity(): <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth readDirect(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var address: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth lock(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var start: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var type: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var waitFlag: <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth unlock(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var start: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth ttyAvailable(): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth writev(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var buffers: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>?, var offsets: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var lengths: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var size: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth size(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth writeDirect(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var address: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth available(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}

	override meth write(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var bytes: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>
	{
		val fd = <ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.writeImpl">writeImpl</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.write.fileDescriptor">fileDescriptor</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.write.bytes">bytes</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.write.offset">offset</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.write.length">length</ref>)
		if(<ref class="LocalVariableDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem.write.fd">fd</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.io.IOException.this">IOException</ref>()
		return <ref class="LocalVariableDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem.write.fd">fd</ref>
	}

	native meth writeImpl(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var bytes: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>;

	override meth ttyRead(var bytes: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth readv(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var addresses: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>>?, var offsets: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var lengths: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var size: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth fflush(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var metadata: <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>) {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}
	override meth read(var fileDescriptor: <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var bytes: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref> {
		throw <ref class="ConstructorDescriptor" to="napile.lang.UnsupportedOperationException.this">UnsupportedOperationException</ref>()
	}

	override meth open(var fileName: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var mode: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>
	{
		val fd = <ref class="SimpleMethodDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.openImpl">openImpl</ref>(<ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.open.fileName">fileName</ref>, <ref class="CallParameterAsVariableDescriptorImpl" to="org.apache.harmony.luni.platform.OSFileSystem.open.mode">mode</ref>)
		if(<ref class="LocalVariableDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem.open.fd">fd</ref> <ref class="SimpleMethodDescriptorImpl" to="napile.lang.Long.compareTo"><</ref> 0)
			throw <ref class="ConstructorDescriptor" to="napile.io.FileNotFoundException.this">FileNotFoundException</ref>()
		return <ref class="LocalVariableDescriptor" to="org.apache.harmony.luni.platform.OSFileSystem.open.fd">fd</ref>
	}

	native meth openImpl(var fileName: <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var mode: <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>): <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>;
}
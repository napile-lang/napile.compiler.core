/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.apache.harmony.luni.platform

import napile.io.FileDescriptor

/**
 * TODO Type description
 *
 */
abstract class IFileSystem
{

	static val SHARED_LOCK_TYPE : Int = 1

	static val EXCLUSIVE_LOCK_TYPE : Int = 2

	static val SEEK_SET : Int = 1

	static val SEEK_CUR : Int = 2

	static val SEEK_END : Int = 4

	static val O_RDONLY : Int = 0x00000000

	static val O_WRONLY : Int = 0x00000001

	static val O_RDWR : Int = 0x00000010

	static val O_RDWRSYNC : Int = 0x00000020

	static val O_APPEND : Int = 0x00000100

	static val O_CREAT : Int = 0x00001000

	static val O_EXCL : Int = 0x00010000

	static val O_NOCTTY : Int = 0x00100000

	static val O_NONBLOCK : Int = 0x01000000

	static val O_TRUNC : Int = 0x10000000

	meth read(var fileDescriptor : Long, var bytes : Array<Byte>, var offset : Int, var length : Int) : Long

	meth write(var fileDescriptor : Long, var bytes : Array<Byte>, var offset : Int, var length : Int) : Long

	meth readv(var fileDescriptor : Long, var addresses : Array<Long>?, var offsets : Array<Int>?, var lengths : Array<Int>?, var size : Int) : Long

	meth writev(var fileDescriptor : Long, var buffers : Array<Any?>?, var offsets : Array<Int>?, var lengths : Array<Int>?, var size : Int) : Long

	meth readDirect(var fileDescriptor : Long, var address : Long, var offset : Int, var length : Int) : Long

	meth writeDirect(var fileDescriptor : Long, var address : Long, var offset : Int, var length : Int) : Long

	meth lock(var fileDescriptor : Long, var start : Long, var length : Long, var type : Int, var waitFlag : Bool) : Bool

	meth unlock(var fileDescriptor : Long, var start : Long, var length : Long)

	meth seek(var fileDescriptor : Long, var offset : Long, var whence : Int) : Long

	meth fflush(var fileDescriptor : Long, var metadata : Bool)

	meth close(var fileDescriptor : Long)

	meth truncate(var fileDescriptor : Long, var size : Long)

	/**
	 * Returns the granularity for virtual memory allocation.
	 */
	meth getAllocGranularity() : Int

	meth open(var fileName : Array<Byte>, var mode : Int) : Long

	meth transfer(var fileHandler : Long, var socketDescriptor : FileDescriptor?, var offset : Long, var count : Long) : Long

	meth ttyAvailable() : Long

	meth available(var fileDescriptor : Long) : Long

	meth size(var fileDescriptor : Long) : Long

	meth ttyRead(var bytes : Array<Byte>, var offset : Int, var length : Int) : Long
}

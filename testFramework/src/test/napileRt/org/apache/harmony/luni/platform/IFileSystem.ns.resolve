/*
 *  Licensed to the Apache Software Foundation (ASF) under one or more
 *  contributor license agreements.  See the NOTICE file distributed with
 *  this work for additional information regarding copyright ownership.
 *  The ASF licenses this file to You under the Apache License, Version 2.0
 *  (the "License"); you may not use this file except in compliance with
 *  the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package <ref class="PackageDescriptorImpl" to="org">org</ref>.<ref class="PackageDescriptorImpl" to="org.apache">apache</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony">harmony</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni">luni</ref>.<ref class="PackageDescriptorImpl" to="org.apache.harmony.luni.platform">platform</ref>

import <ref class="PackageDescriptorImpl" to="napile">napile</ref>.<ref class="PackageDescriptorImpl" to="napile.io">io</ref>.<ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>

/**
 * TODO Type description
 *
 */
abstract class IFileSystem
{

	static val SHARED_LOCK_TYPE : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 1

	static val EXCLUSIVE_LOCK_TYPE : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 2

	static val SEEK_SET : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 1

	static val SEEK_CUR : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 2

	static val SEEK_END : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 4

	static val O_RDONLY : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00000000

	static val O_WRONLY : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00000001

	static val O_RDWR : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00000010

	static val O_RDWRSYNC : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00000020

	static val O_APPEND : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00000100

	static val O_CREAT : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00001000

	static val O_EXCL : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00010000

	static val O_NOCTTY : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x00100000

	static val O_NONBLOCK : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x01000000

	static val O_TRUNC : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref> = 0x10000000

	meth read(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var bytes : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth write(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var bytes : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth readv(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var addresses : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>>?, var offsets : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var lengths : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var size : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth writev(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var buffers : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Any">Any</ref>?>?, var offsets : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var lengths : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>>?, var size : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth readDirect(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var address : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth writeDirect(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var address : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth lock(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var start : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var type : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var waitFlag : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>

	meth unlock(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var start : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>)

	meth seek(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var whence : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth fflush(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var metadata : <ref class="MutableClassDescriptor" to="napile.lang.Bool">Bool</ref>)

	meth close(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>)

	meth truncate(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var size : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>)

	/**
	 * Returns the granularity for virtual memory allocation.
	 */
	meth getAllocGranularity() : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>

	meth open(var fileName : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var mode : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth transfer(var fileHandler : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var socketDescriptor : <ref class="MutableClassDescriptor" to="napile.io.FileDescriptor">FileDescriptor</ref>?, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>, var count : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth ttyAvailable() : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth available(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth size(var fileDescriptor : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>

	meth ttyRead(var bytes : <ref class="MutableClassDescriptor" to="napile.lang.Array">Array</ref><<ref class="MutableClassDescriptor" to="napile.lang.Byte">Byte</ref>>, var offset : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>, var length : <ref class="MutableClassDescriptor" to="napile.lang.Int">Int</ref>) : <ref class="MutableClassDescriptor" to="napile.lang.Long">Long</ref>
}
